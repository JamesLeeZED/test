{"version":3,"file":"gui3DManager-0cfa6e39.js","sources":["../../node_modules/@babylonjs/core/Behaviors/Meshes/attachToBoxBehavior.js","../../node_modules/@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js","../../node_modules/@babylonjs/core/Behaviors/Meshes/multiPointerScaleBehavior.js","../../node_modules/@babylonjs/core/Behaviors/Meshes/surfaceMagnetismBehavior.js","../../node_modules/@babylonjs/core/Behaviors/Meshes/followBehavior.js","../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicScreenUniversalCamera.js","../../node_modules/@babylonjs/core/Layers/layerSceneComponent.js","../../node_modules/@babylonjs/core/Layers/layer.js","../../node_modules/@babylonjs/core/Materials/Occlusion/occlusionMaterial.js","../../node_modules/@babylonjs/core/Materials/Textures/Procedurals/customProceduralTexture.js","../../node_modules/@babylonjs/core/Materials/Textures/rawTexture3D.js","../../node_modules/@babylonjs/core/Materials/Textures/refractionTexture.js","../../node_modules/@babylonjs/core/Materials/Textures/thinRenderTargetTexture.js","../../node_modules/@babylonjs/core/Meshes/trailMesh.js","../../node_modules/@babylonjs/core/PostProcesses/highlightsPostProcess.js","../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.js","../../node_modules/@babylonjs/gui/2D/valueAndUnit.js","../../node_modules/@babylonjs/gui/2D/measure.js","../../node_modules/@babylonjs/gui/2D/math2D.js","../../node_modules/@babylonjs/gui/2D/controls/control.js","../../node_modules/@babylonjs/gui/2D/controls/container.js","../../node_modules/@babylonjs/gui/2D/controls/rectangle.js","../../node_modules/@babylonjs/gui/2D/controls/textBlock.js","../../node_modules/@babylonjs/gui/2D/controls/image.js","../../node_modules/@babylonjs/gui/2D/controls/button.js","../../node_modules/@babylonjs/gui/2D/controls/stackPanel.js","../../node_modules/@babylonjs/gui/2D/controls/checkbox.js","../../node_modules/@babylonjs/gui/2D/controls/textWrapper.js","../../node_modules/@babylonjs/gui/2D/controls/inputText.js","../../node_modules/@babylonjs/gui/2D/controls/grid.js","../../node_modules/@babylonjs/gui/2D/controls/colorpicker.js","../../node_modules/@babylonjs/gui/2D/controls/ellipse.js","../../node_modules/@babylonjs/gui/2D/controls/focusableButton.js","../../node_modules/@babylonjs/gui/2D/controls/inputTextArea.js","../../node_modules/@babylonjs/gui/2D/controls/inputPassword.js","../../node_modules/@babylonjs/gui/2D/controls/line.js","../../node_modules/@babylonjs/gui/2D/multiLinePoint.js","../../node_modules/@babylonjs/gui/2D/controls/multiLine.js","../../node_modules/@babylonjs/gui/2D/controls/radioButton.js","../../node_modules/@babylonjs/gui/2D/controls/sliders/baseSlider.js","../../node_modules/@babylonjs/gui/2D/controls/sliders/slider.js","../../node_modules/@babylonjs/gui/2D/controls/selector.js","../../node_modules/@babylonjs/gui/2D/controls/scrollViewers/scrollViewerWindow.js","../../node_modules/@babylonjs/gui/2D/controls/sliders/scrollBar.js","../../node_modules/@babylonjs/gui/2D/controls/sliders/imageScrollBar.js","../../node_modules/@babylonjs/gui/2D/controls/scrollViewers/scrollViewer.js","../../node_modules/@babylonjs/gui/2D/controls/toggleButton.js","../../node_modules/@babylonjs/gui/2D/controls/virtualKeyboard.js","../../node_modules/@babylonjs/gui/2D/controls/displayGrid.js","../../node_modules/@babylonjs/gui/2D/controls/sliders/imageBasedSlider.js","../../node_modules/@babylonjs/gui/2D/style.js","../../node_modules/@babylonjs/gui/2D/advancedDynamicTexture.js","../../node_modules/@babylonjs/gui/3D/vector3WithInfo.js","../../node_modules/@babylonjs/gui/3D/controls/control3D.js","../../node_modules/@babylonjs/gui/3D/controls/contentDisplay3D.js","../../node_modules/@babylonjs/gui/3D/controls/abstractButton3D.js","../../node_modules/@babylonjs/gui/3D/controls/button3D.js","../../node_modules/@babylonjs/gui/3D/controls/container3D.js","../../node_modules/@babylonjs/gui/3D/controls/volumeBasedPanel.js","../../node_modules/@babylonjs/gui/3D/controls/cylinderPanel.js","../../node_modules/@babylonjs/gui/3D/materials/fluent/shaders/fluent.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/fluent/fluentMaterial.js","../../node_modules/@babylonjs/gui/3D/controls/touchHolographicMenu.js","../../node_modules/@babylonjs/gui/3D/controls/handMenu.js","../../node_modules/@babylonjs/gui/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/fluentBackplate/fluentBackplateMaterial.js","../../node_modules/@babylonjs/gui/3D/controls/holographicBackplate.js","../../node_modules/@babylonjs/gui/3D/controls/holographicButton.js","../../node_modules/@babylonjs/gui/3D/materials/fluentButton/shaders/fluentButton.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/fluentButton/shaders/fluentButton.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/fluentButton/fluentButtonMaterial.js","../../node_modules/@babylonjs/gui/3D/controls/touchButton3D.js","../../node_modules/@babylonjs/gui/3D/controls/touchHolographicButton.js","../../node_modules/@babylonjs/gui/3D/behaviors/defaultBehavior.js","../../node_modules/@babylonjs/gui/3D/materials/handle/shaders/handle.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/handle/shaders/handle.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/handle/handleMaterial.js","../../node_modules/@babylonjs/gui/3D/gizmos/gizmoHandle.js","../../node_modules/@babylonjs/gui/3D/gizmos/slateGizmo.js","../../node_modules/@babylonjs/gui/3D/controls/holographicSlate.js","../../node_modules/@babylonjs/gui/3D/controls/meshButton3D.js","../../node_modules/@babylonjs/gui/3D/controls/nearMenu.js","../../node_modules/@babylonjs/gui/3D/controls/planePanel.js","../../node_modules/@babylonjs/gui/3D/controls/scatterPanel.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/mrdlSliderBarMaterial.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/mrdlSliderThumbMaterial.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/mrdlBackplateMaterial.js","../../node_modules/@babylonjs/gui/3D/controls/slider3D.js","../../node_modules/@babylonjs/gui/3D/controls/spherePanel.js","../../node_modules/@babylonjs/gui/3D/controls/stackPanel3D.js","../../node_modules/@babylonjs/gui/3D/controls/touchMeshButton3D.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlBackglow.fragment.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/shaders/mrdlBackglow.vertex.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/mrdlBackglowMaterial.js","../../node_modules/@babylonjs/gui/3D/materials/mrdl/mrdlInnerquadMaterial.js","../../node_modules/@babylonjs/gui/3D/gui3DManager.js"],"sourcesContent":["import { Vector3, Matrix, Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * @internal\n */\nclass FaceDirectionInfo {\n    constructor(direction, rotatedDirection = new Vector3(), diff = 0, ignore = false) {\n        this.direction = direction;\n        this.rotatedDirection = rotatedDirection;\n        this.diff = diff;\n        this.ignore = ignore;\n    }\n}\n/**\n * A behavior that when attached to a mesh will will place a specified node on the meshes face pointing towards the camera\n */\nexport class AttachToBoxBehavior {\n    /**\n     * Creates the AttachToBoxBehavior, used to attach UI to the closest face of the box to a camera\n     * @param _ui The transform node that should be attached to the mesh\n     */\n    constructor(_ui) {\n        this._ui = _ui;\n        /**\n         *  The name of the behavior\n         */\n        this.name = \"AttachToBoxBehavior\";\n        /**\n         * The distance away from the face of the mesh that the UI should be attached to (default: 0.15)\n         */\n        this.distanceAwayFromFace = 0.15;\n        /**\n         * The distance from the bottom of the face that the UI should be attached to (default: 0.15)\n         */\n        this.distanceAwayFromBottomOfFace = 0.15;\n        this._faceVectors = [\n            new FaceDirectionInfo(Vector3.Up()),\n            new FaceDirectionInfo(Vector3.Down()),\n            new FaceDirectionInfo(Vector3.Left()),\n            new FaceDirectionInfo(Vector3.Right()),\n            new FaceDirectionInfo(Vector3.Forward()),\n            new FaceDirectionInfo(Vector3.Forward().scaleInPlace(-1)),\n        ];\n        this._tmpMatrix = new Matrix();\n        this._tmpVector = new Vector3();\n        this._zeroVector = Vector3.Zero();\n        this._lookAtTmpMatrix = new Matrix();\n        /* Does nothing */\n    }\n    /**\n     *  Initializes the behavior\n     */\n    init() {\n        /* Does nothing */\n    }\n    _closestFace(targetDirection) {\n        // Go over each face and calculate the angle between the face's normal and targetDirection\n        this._faceVectors.forEach((v) => {\n            if (!this._target.rotationQuaternion) {\n                this._target.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._target.rotation.y, this._target.rotation.x, this._target.rotation.z);\n            }\n            this._target.rotationQuaternion.toRotationMatrix(this._tmpMatrix);\n            Vector3.TransformCoordinatesToRef(v.direction, this._tmpMatrix, v.rotatedDirection);\n            v.diff = Vector3.GetAngleBetweenVectors(v.rotatedDirection, targetDirection, Vector3.Cross(v.rotatedDirection, targetDirection));\n        });\n        // Return the face information of the one with the normal closest to target direction\n        return this._faceVectors.reduce((min, p) => {\n            if (min.ignore) {\n                return p;\n            }\n            else if (p.ignore) {\n                return min;\n            }\n            else {\n                return min.diff < p.diff ? min : p;\n            }\n        }, this._faceVectors[0]);\n    }\n    _lookAtToRef(pos, up = new Vector3(0, 1, 0), ref) {\n        Matrix.LookAtLHToRef(this._zeroVector, pos, up, this._lookAtTmpMatrix);\n        this._lookAtTmpMatrix.invert();\n        Quaternion.FromRotationMatrixToRef(this._lookAtTmpMatrix, ref);\n    }\n    /**\n     * Attaches the AttachToBoxBehavior to the passed in mesh\n     * @param target The mesh that the specified node will be attached to\n     */\n    attach(target) {\n        this._target = target;\n        this._scene = this._target.getScene();\n        // Every frame, update the app bars position\n        this._onRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\n            if (!this._scene.activeCamera) {\n                return;\n            }\n            // Find the face closest to the cameras position\n            let cameraPos = this._scene.activeCamera.position;\n            if (this._scene.activeCamera.devicePosition) {\n                cameraPos = this._scene.activeCamera.devicePosition;\n            }\n            const facing = this._closestFace(cameraPos.subtract(target.position));\n            if (this._scene.activeCamera.leftCamera) {\n                this._scene.activeCamera.leftCamera.computeWorldMatrix().getRotationMatrixToRef(this._tmpMatrix);\n            }\n            else {\n                this._scene.activeCamera.computeWorldMatrix().getRotationMatrixToRef(this._tmpMatrix);\n            }\n            // Get camera up direction\n            Vector3.TransformCoordinatesToRef(Vector3.Up(), this._tmpMatrix, this._tmpVector);\n            // Ignore faces to not select a parallel face for the up vector of the UI\n            this._faceVectors.forEach((v) => {\n                if (facing.direction.x && v.direction.x) {\n                    v.ignore = true;\n                }\n                if (facing.direction.y && v.direction.y) {\n                    v.ignore = true;\n                }\n                if (facing.direction.z && v.direction.z) {\n                    v.ignore = true;\n                }\n            });\n            const facingUp = this._closestFace(this._tmpVector);\n            // Unignore faces\n            this._faceVectors.forEach((v) => {\n                v.ignore = false;\n            });\n            // Position the app bar on that face\n            this._ui.position.copyFrom(target.position);\n            if (facing.direction.x) {\n                facing.rotatedDirection.scaleToRef(target.scaling.x / 2 + this.distanceAwayFromFace, this._tmpVector);\n                this._ui.position.addInPlace(this._tmpVector);\n            }\n            if (facing.direction.y) {\n                facing.rotatedDirection.scaleToRef(target.scaling.y / 2 + this.distanceAwayFromFace, this._tmpVector);\n                this._ui.position.addInPlace(this._tmpVector);\n            }\n            if (facing.direction.z) {\n                facing.rotatedDirection.scaleToRef(target.scaling.z / 2 + this.distanceAwayFromFace, this._tmpVector);\n                this._ui.position.addInPlace(this._tmpVector);\n            }\n            // Rotate to be oriented properly to the camera\n            if (!this._ui.rotationQuaternion) {\n                this._ui.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._ui.rotation.y, this._ui.rotation.x, this._ui.rotation.z);\n            }\n            facing.rotatedDirection.scaleToRef(-1, this._tmpVector);\n            this._lookAtToRef(this._tmpVector, facingUp.rotatedDirection, this._ui.rotationQuaternion);\n            // Place ui the correct distance from the bottom of the mesh\n            if (facingUp.direction.x) {\n                this._ui.up.scaleToRef(this.distanceAwayFromBottomOfFace - target.scaling.x / 2, this._tmpVector);\n            }\n            if (facingUp.direction.y) {\n                this._ui.up.scaleToRef(this.distanceAwayFromBottomOfFace - target.scaling.y / 2, this._tmpVector);\n            }\n            if (facingUp.direction.z) {\n                this._ui.up.scaleToRef(this.distanceAwayFromBottomOfFace - target.scaling.z / 2, this._tmpVector);\n            }\n            this._ui.position.addInPlace(this._tmpVector);\n        });\n    }\n    /**\n     *  Detaches the behavior from the mesh\n     */\n    detach() {\n        this._scene.onBeforeRenderObservable.remove(this._onRenderObserver);\n    }\n}\n//# sourceMappingURL=attachToBoxBehavior.js.map","/**\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\n */\nexport class FadeInOutBehavior {\n    /**\n     * Time in milliseconds to delay before fading in (Default: 0)\n     * Will set both fade in and out delay to the same value\n     */\n    get delay() {\n        return this.fadeInDelay;\n    }\n    set delay(value) {\n        this.fadeInDelay = value;\n        this.fadeOutDelay = value;\n    }\n    /**\n     * Instantiates the FadeInOutBehavior\n     */\n    constructor() {\n        /**\n         * Time in milliseconds to delay before fading in (Default: 0)\n         */\n        this.fadeInDelay = 0;\n        /**\n         * Time in milliseconds to delay before fading out (Default: 0)\n         */\n        this.fadeOutDelay = 0;\n        /**\n         * Time in milliseconds for the mesh to fade in (Default: 300)\n         */\n        this.fadeInTime = 300;\n        /**\n         * Time in milliseconds for the mesh to fade out (Default: 300)\n         */\n        this.fadeOutTime = 300;\n        this._millisecondsPerFrame = 1000 / 60;\n        this._hovered = false;\n        this._hoverValue = 0;\n        this._ownerNode = null;\n        this._delay = 0;\n        this._time = 300;\n        this._update = () => {\n            if (this._ownerNode) {\n                this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\n                this._setAllVisibility(this._ownerNode, (this._hoverValue - this._delay) / this._time);\n                if (this._ownerNode.visibility > 1) {\n                    this._setAllVisibility(this._ownerNode, 1);\n                    if (this._hoverValue > this._time) {\n                        this._hoverValue = this._time;\n                        this._detachObserver();\n                        return;\n                    }\n                }\n                else if (this._ownerNode.visibility < 0) {\n                    this._setAllVisibility(this._ownerNode, 0);\n                    if (this._hoverValue < 0) {\n                        this._hoverValue = 0;\n                        this._detachObserver();\n                        return;\n                    }\n                }\n                this._attachObserver();\n            }\n        };\n    }\n    /**\n     *  The name of the behavior\n     */\n    get name() {\n        return \"FadeInOut\";\n    }\n    /**\n     *  Initializes the behavior\n     */\n    init() { }\n    /**\n     * Attaches the fade behavior on the passed in mesh\n     * @param ownerNode The mesh that will be faded in/out once attached\n     */\n    attach(ownerNode) {\n        this._ownerNode = ownerNode;\n        this._setAllVisibility(this._ownerNode, 0);\n    }\n    /**\n     *  Detaches the behavior from the mesh\n     */\n    detach() {\n        this._ownerNode = null;\n    }\n    /**\n     * Triggers the mesh to begin fading in (or out)\n     * @param fadeIn if the object should fade in or out (true to fade in)\n     */\n    fadeIn(fadeIn = true) {\n        this._delay = fadeIn ? this.fadeInDelay : this.fadeOutDelay;\n        this._time = fadeIn ? this.fadeInTime : this.fadeOutTime;\n        // Cancel any pending updates\n        this._detachObserver();\n        // If fading in and already visible or fading out and already not visible do nothing\n        if (this._ownerNode && ((fadeIn && this._ownerNode.visibility >= 1) || (!fadeIn && this._ownerNode.visibility <= 0))) {\n            return;\n        }\n        this._hovered = fadeIn;\n        if (!this._hovered) {\n            // Make the delay the negative of fadeout delay so the hoverValue is kept above 1 until\n            // fadeOutDelay has elapsed\n            this._delay *= -1;\n        }\n        // Reset the hoverValue.  This is necessary because we may have been fading out, e.g. but not yet reached\n        // the delay, so the hover value is greater than 1\n        if (this._ownerNode.visibility >= 1) {\n            this._hoverValue = this._time;\n        }\n        else if (this._ownerNode.visibility <= 0) {\n            this._hoverValue = 0;\n        }\n        this._update();\n    }\n    /**\n     * Triggers the mesh to begin fading out\n     */\n    fadeOut() {\n        this.fadeIn(false);\n    }\n    _setAllVisibility(mesh, value) {\n        mesh.visibility = value;\n        mesh.getChildMeshes().forEach((c) => {\n            this._setAllVisibility(c, value);\n        });\n    }\n    _attachObserver() {\n        var _a;\n        if (!this._onBeforeRenderObserver) {\n            this._onBeforeRenderObserver = (_a = this._ownerNode) === null || _a === void 0 ? void 0 : _a.getScene().onBeforeRenderObservable.add(this._update);\n        }\n    }\n    _detachObserver() {\n        var _a;\n        if (this._onBeforeRenderObserver) {\n            (_a = this._ownerNode) === null || _a === void 0 ? void 0 : _a.getScene().onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n            this._onBeforeRenderObserver = null;\n        }\n    }\n}\n//# sourceMappingURL=fadeInOutBehavior.js.map","import { PointerDragBehavior } from \"./pointerDragBehavior.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\n/**\n * A behavior that when attached to a mesh will allow the mesh to be scaled\n */\nexport class MultiPointerScaleBehavior {\n    /**\n     * Instantiate a new behavior that when attached to a mesh will allow the mesh to be scaled\n     */\n    constructor() {\n        this._startDistance = 0;\n        this._initialScale = new Vector3(0, 0, 0);\n        this._targetScale = new Vector3(0, 0, 0);\n        this._sceneRenderObserver = null;\n        this._dragBehaviorA = new PointerDragBehavior({});\n        this._dragBehaviorA.moveAttached = false;\n        this._dragBehaviorB = new PointerDragBehavior({});\n        this._dragBehaviorB.moveAttached = false;\n    }\n    /**\n     *  The name of the behavior\n     */\n    get name() {\n        return \"MultiPointerScale\";\n    }\n    /**\n     *  Initializes the behavior\n     */\n    init() { }\n    _getCurrentDistance() {\n        return this._dragBehaviorA.lastDragPosition.subtract(this._dragBehaviorB.lastDragPosition).length();\n    }\n    /**\n     * Attaches the scale behavior the passed in mesh\n     * @param ownerNode The mesh that will be scaled around once attached\n     */\n    attach(ownerNode) {\n        this._ownerNode = ownerNode;\n        // Create 2 drag behaviors such that each will only be triggered by a separate pointer\n        this._dragBehaviorA.onDragStartObservable.add(() => {\n            if (this._dragBehaviorA.dragging && this._dragBehaviorB.dragging) {\n                if (this._dragBehaviorA.currentDraggingPointerId == this._dragBehaviorB.currentDraggingPointerId) {\n                    this._dragBehaviorA.releaseDrag();\n                }\n                else {\n                    this._initialScale.copyFrom(ownerNode.scaling);\n                    this._startDistance = this._getCurrentDistance();\n                }\n            }\n        });\n        this._dragBehaviorB.onDragStartObservable.add(() => {\n            if (this._dragBehaviorA.dragging && this._dragBehaviorB.dragging) {\n                if (this._dragBehaviorA.currentDraggingPointerId == this._dragBehaviorB.currentDraggingPointerId) {\n                    this._dragBehaviorB.releaseDrag();\n                }\n                else {\n                    this._initialScale.copyFrom(ownerNode.scaling);\n                    this._startDistance = this._getCurrentDistance();\n                }\n            }\n        });\n        // Once both drag behaviors are active scale based on the distance between the two pointers\n        [this._dragBehaviorA, this._dragBehaviorB].forEach((behavior) => {\n            behavior.onDragObservable.add(() => {\n                if (this._dragBehaviorA.dragging && this._dragBehaviorB.dragging) {\n                    const ratio = this._getCurrentDistance() / this._startDistance;\n                    this._initialScale.scaleToRef(ratio, this._targetScale);\n                }\n            });\n        });\n        ownerNode.addBehavior(this._dragBehaviorA);\n        ownerNode.addBehavior(this._dragBehaviorB);\n        // On every frame move towards target scaling to avoid jitter caused by vr controllers\n        this._sceneRenderObserver = ownerNode.getScene().onBeforeRenderObservable.add(() => {\n            if (this._dragBehaviorA.dragging && this._dragBehaviorB.dragging) {\n                const change = this._targetScale.subtract(ownerNode.scaling).scaleInPlace(0.1);\n                if (change.length() > 0.01) {\n                    ownerNode.scaling.addInPlace(change);\n                }\n            }\n        });\n    }\n    /**\n     *  Detaches the behavior from the mesh\n     */\n    detach() {\n        this._ownerNode.getScene().onBeforeRenderObservable.remove(this._sceneRenderObserver);\n        [this._dragBehaviorA, this._dragBehaviorB].forEach((behavior) => {\n            behavior.onDragStartObservable.clear();\n            behavior.onDragObservable.clear();\n            this._ownerNode.removeBehavior(behavior);\n        });\n    }\n}\n//# sourceMappingURL=multiPointerScaleBehavior.js.map","import { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Quaternion, TmpVectors, Vector3 } from \"../../Maths/math.vector.js\";\n/**\n * A behavior that allows a transform node to stick to a surface position/orientation\n * @since 5.0.0\n */\nexport class SurfaceMagnetismBehavior {\n    constructor() {\n        this._attachPointLocalOffset = new Vector3();\n        this._workingPosition = new Vector3();\n        this._workingQuaternion = new Quaternion();\n        this._lastTick = -1;\n        this._hit = false;\n        /**\n         * Distance offset from the hit point to place the target at, along the hit normal.\n         */\n        this.hitNormalOffset = 0.05;\n        /**\n         * Spatial mapping meshes to collide with\n         */\n        this.meshes = [];\n        /**\n         * Set to false if the node should strictly follow the camera without any interpolation time\n         */\n        this.interpolatePose = true;\n        /**\n         * Rate of interpolation of position and rotation of the attached node.\n         * Higher values will give a slower interpolation.\n         */\n        this.lerpTime = 250;\n        /**\n         * If true, pitch and roll are omitted.\n         */\n        this.keepOrientationVertical = true;\n        /**\n         * Is this behavior reacting to pointer events\n         */\n        this.enabled = true;\n        /**\n         * Maximum distance for the node to stick to the surface\n         */\n        this.maxStickingDistance = 0.8;\n    }\n    /**\n     * Name of the behavior\n     */\n    get name() {\n        return \"SurfaceMagnetism\";\n    }\n    /**\n     * Function called when the behavior needs to be initialized (after attaching it to a target)\n     */\n    init() { }\n    /**\n     * Attaches the behavior to a transform node\n     * @param target defines the target where the behavior is attached to\n     * @param scene the scene\n     */\n    attach(target, scene) {\n        this._attachedMesh = target;\n        this._scene = scene || target.getScene();\n        if (!this._attachedMesh.rotationQuaternion) {\n            this._attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._attachedMesh.rotation.y, this._attachedMesh.rotation.x, this._attachedMesh.rotation.z);\n        }\n        this.updateAttachPoint();\n        this._workingPosition.copyFrom(this._attachedMesh.position);\n        this._workingQuaternion.copyFrom(this._attachedMesh.rotationQuaternion);\n        this._addObservables();\n    }\n    /**\n     * Detaches the behavior\n     */\n    detach() {\n        this._attachedMesh = null;\n        this._removeObservables();\n    }\n    _getTargetPose(pickingInfo) {\n        if (!this._attachedMesh) {\n            return null;\n        }\n        if (pickingInfo && pickingInfo.hit) {\n            const pickedNormal = pickingInfo.getNormal(true, true);\n            const pickedPoint = pickingInfo.pickedPoint;\n            if (!pickedNormal || !pickedPoint) {\n                return null;\n            }\n            pickedNormal.normalize();\n            const worldTarget = TmpVectors.Vector3[0];\n            worldTarget.copyFrom(pickedNormal);\n            worldTarget.scaleInPlace(this.hitNormalOffset);\n            worldTarget.addInPlace(pickedPoint);\n            if (this._attachedMesh.parent) {\n                TmpVectors.Matrix[0].copyFrom(this._attachedMesh.parent.getWorldMatrix()).invert();\n                Vector3.TransformNormalToRef(worldTarget, TmpVectors.Matrix[0], worldTarget);\n            }\n            return {\n                position: worldTarget,\n                quaternion: Quaternion.RotationYawPitchRoll(-Math.atan2(pickedNormal.x, -pickedNormal.z), this.keepOrientationVertical ? 0 : Math.atan2(pickedNormal.y, Math.sqrt(pickedNormal.z * pickedNormal.z + pickedNormal.x * pickedNormal.x)), 0),\n            };\n        }\n        return null;\n    }\n    /**\n     * Updates the attach point with the current geometry extents of the attached mesh\n     */\n    updateAttachPoint() {\n        this._getAttachPointOffsetToRef(this._attachPointLocalOffset);\n    }\n    /**\n     * Finds the intersection point of the given ray onto the meshes and updates the target.\n     * Transformation will be interpolated according to `interpolatePose` and `lerpTime` properties.\n     * If no mesh of `meshes` are hit, this does nothing.\n     * @param pickInfo The input pickingInfo that will be used to intersect the meshes\n     * @returns a boolean indicating if we found a hit to stick to\n     */\n    findAndUpdateTarget(pickInfo) {\n        this._hit = false;\n        if (!pickInfo.ray) {\n            return false;\n        }\n        const subPicking = pickInfo.ray.intersectsMeshes(this.meshes)[0];\n        if (this._attachedMesh && subPicking && subPicking.hit && subPicking.pickedMesh) {\n            const pose = this._getTargetPose(subPicking);\n            if (pose && Vector3.Distance(this._attachedMesh.position, pose.position) < this.maxStickingDistance) {\n                this._workingPosition.copyFrom(pose.position);\n                this._workingQuaternion.copyFrom(pose.quaternion);\n                this._hit = true;\n            }\n        }\n        return this._hit;\n    }\n    _getAttachPointOffsetToRef(ref) {\n        if (!this._attachedMesh) {\n            ref.setAll(0);\n            return;\n        }\n        const storedQuat = TmpVectors.Quaternion[0];\n        storedQuat.copyFrom(this._attachedMesh.rotationQuaternion);\n        this._attachedMesh.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\n        this._attachedMesh.computeWorldMatrix();\n        const boundingMinMax = this._attachedMesh.getHierarchyBoundingVectors();\n        const center = TmpVectors.Vector3[0];\n        boundingMinMax.max.addToRef(boundingMinMax.min, center);\n        center.scaleInPlace(0.5);\n        center.z = boundingMinMax.max.z;\n        // We max the z coordinate because we want the attach point to be on the back of the mesh\n        const invWorld = TmpVectors.Matrix[0];\n        this._attachedMesh.getWorldMatrix().invertToRef(invWorld);\n        Vector3.TransformCoordinatesToRef(center, invWorld, ref);\n        this._attachedMesh.rotationQuaternion.copyFrom(storedQuat);\n    }\n    _updateTransformToGoal(elapsed) {\n        if (!this._attachedMesh || !this._hit) {\n            return;\n        }\n        const oldParent = this._attachedMesh.parent;\n        this._attachedMesh.setParent(null);\n        const worldOffset = TmpVectors.Vector3[0];\n        Vector3.TransformNormalToRef(this._attachPointLocalOffset, this._attachedMesh.getWorldMatrix(), worldOffset);\n        if (!this.interpolatePose) {\n            this._attachedMesh.position.copyFrom(this._workingPosition).subtractInPlace(worldOffset);\n            this._attachedMesh.rotationQuaternion.copyFrom(this._workingQuaternion);\n            return;\n        }\n        // position\n        const interpolatedPosition = new Vector3();\n        Vector3.SmoothToRef(this._attachedMesh.position, this._workingPosition, elapsed, this.lerpTime, interpolatedPosition);\n        this._attachedMesh.position.copyFrom(interpolatedPosition);\n        // rotation\n        const currentRotation = new Quaternion();\n        currentRotation.copyFrom(this._attachedMesh.rotationQuaternion);\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this._attachedMesh.rotationQuaternion);\n        this._attachedMesh.setParent(oldParent);\n    }\n    _addObservables() {\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\n            if (this.enabled && pointerInfo.type == PointerEventTypes.POINTERMOVE && pointerInfo.pickInfo) {\n                this.findAndUpdateTarget(pointerInfo.pickInfo);\n            }\n        });\n        this._lastTick = Date.now();\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\n            const tick = Date.now();\n            this._updateTransformToGoal(tick - this._lastTick);\n            this._lastTick = tick;\n        });\n    }\n    _removeObservables() {\n        this._scene.onPointerObservable.remove(this._pointerObserver);\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\n        this._pointerObserver = null;\n        this._onBeforeRender = null;\n    }\n}\n//# sourceMappingURL=surfaceMagnetismBehavior.js.map","import { Matrix, Quaternion, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { Epsilon } from \"../../Maths/math.constants.js\";\n/**\n * A behavior that when attached to a mesh will follow a camera\n * @since 5.0.0\n */\nexport class FollowBehavior {\n    constructor() {\n        // Memory cache to avoid GC usage\n        this._tmpQuaternion = new Quaternion();\n        this._tmpVectors = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n        this._tmpMatrix = new Matrix();\n        this._tmpInvertView = new Matrix();\n        this._tmpForward = new Vector3();\n        this._tmpNodeForward = new Vector3();\n        this._tmpPosition = new Vector3();\n        this._workingPosition = new Vector3();\n        this._workingQuaternion = new Quaternion();\n        this._lastTick = -1;\n        this._recenterNextUpdate = true;\n        /**\n         * Set to false if the node should strictly follow the camera without any interpolation time\n         */\n        this.interpolatePose = true;\n        /**\n         * Rate of interpolation of position and rotation of the attached node.\n         * Higher values will give a slower interpolation.\n         */\n        this.lerpTime = 500;\n        /**\n         * If the behavior should ignore the pitch and roll of the camera.\n         */\n        this.ignoreCameraPitchAndRoll = false;\n        /**\n         * Pitch offset from camera (relative to Max Distance)\n         * Is only effective if `ignoreCameraPitchAndRoll` is set to `true`.\n         */\n        this.pitchOffset = 15;\n        /**\n         * The vertical angle from the camera forward axis to the owner will not exceed this value\n         */\n        this.maxViewVerticalDegrees = 30;\n        /**\n         * The horizontal angle from the camera forward axis to the owner will not exceed this value\n         */\n        this.maxViewHorizontalDegrees = 30;\n        /**\n         * The attached node will not reorient until the angle between its forward vector and the vector to the camera is greater than this value\n         */\n        this.orientToCameraDeadzoneDegrees = 60;\n        /**\n         * Option to ignore distance clamping\n         */\n        this.ignoreDistanceClamp = false;\n        /**\n         * Option to ignore angle clamping\n         */\n        this.ignoreAngleClamp = false;\n        /**\n         * Max vertical distance between the attachedNode and camera\n         */\n        this.verticalMaxDistance = 0;\n        /**\n         *  Default distance from eye to attached node, i.e. the sphere radius\n         */\n        this.defaultDistance = 0.8;\n        /**\n         *  Max distance from eye to attached node, i.e. the sphere radius\n         */\n        this.maximumDistance = 2;\n        /**\n         *  Min distance from eye to attached node, i.e. the sphere radius\n         */\n        this.minimumDistance = 0.3;\n        /**\n         * Ignore vertical movement and lock the Y position of the object.\n         */\n        this.useFixedVerticalOffset = false;\n        /**\n         * Fixed vertical position offset distance.\n         */\n        this.fixedVerticalOffset = 0;\n        /**\n         * Enables/disables the behavior\n         * @internal\n         */\n        this._enabled = true;\n    }\n    /**\n     * The camera that should be followed by this behavior\n     */\n    get followedCamera() {\n        return this._followedCamera || this._scene.activeCamera;\n    }\n    set followedCamera(camera) {\n        this._followedCamera = camera;\n    }\n    /**\n     *  The name of the behavior\n     */\n    get name() {\n        return \"Follow\";\n    }\n    /**\n     *  Initializes the behavior\n     */\n    init() { }\n    /**\n     * Attaches the follow behavior\n     * @param ownerNode The mesh that will be following once attached\n     * @param followedCamera The camera that should be followed by the node\n     */\n    attach(ownerNode, followedCamera) {\n        this._scene = ownerNode.getScene();\n        this.attachedNode = ownerNode;\n        if (followedCamera) {\n            this.followedCamera = followedCamera;\n        }\n        this._addObservables();\n    }\n    /**\n     *  Detaches the behavior from the mesh\n     */\n    detach() {\n        this.attachedNode = null;\n        this._removeObservables();\n    }\n    /**\n     * Recenters the attached node in front of the camera on the next update\n     */\n    recenter() {\n        this._recenterNextUpdate = true;\n    }\n    _angleBetweenVectorAndPlane(vector, normal) {\n        // Work on copies\n        this._tmpVectors[0].copyFrom(vector);\n        vector = this._tmpVectors[0];\n        this._tmpVectors[1].copyFrom(normal);\n        normal = this._tmpVectors[1];\n        vector.normalize();\n        normal.normalize();\n        return Math.PI / 2 - Math.acos(Vector3.Dot(vector, normal));\n    }\n    _length2D(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.z * vector.z);\n    }\n    _distanceClamp(currentToTarget, moveToDefault = false) {\n        let minDistance = this.minimumDistance;\n        let maxDistance = this.maximumDistance;\n        const defaultDistance = this.defaultDistance;\n        const direction = this._tmpVectors[0];\n        direction.copyFrom(currentToTarget);\n        let currentDistance = direction.length();\n        direction.normalizeFromLength(currentDistance);\n        if (this.ignoreCameraPitchAndRoll) {\n            // If we don't account for pitch offset, the casted object will float up/down as the reference\n            // gets closer to it because we will still be casting in the direction of the pitched offset.\n            // To fix this, only modify the XZ position of the object.\n            minDistance = this._length2D(direction) * minDistance;\n            maxDistance = this._length2D(direction) * maxDistance;\n            const currentDistance2D = this._length2D(currentToTarget);\n            direction.scaleInPlace(currentDistance / currentDistance2D);\n            currentDistance = currentDistance2D;\n        }\n        let clampedDistance = currentDistance;\n        if (moveToDefault) {\n            clampedDistance = defaultDistance;\n        }\n        else {\n            clampedDistance = Scalar.Clamp(currentDistance, minDistance, maxDistance);\n        }\n        currentToTarget.copyFrom(direction).scaleInPlace(clampedDistance);\n        return currentDistance !== clampedDistance;\n    }\n    _applyVerticalClamp(currentToTarget) {\n        if (this.verticalMaxDistance !== 0) {\n            currentToTarget.y = Scalar.Clamp(currentToTarget.y, -this.verticalMaxDistance, this.verticalMaxDistance);\n        }\n    }\n    _toOrientationQuatToRef(vector, quaternion) {\n        Quaternion.RotationYawPitchRollToRef(Math.atan2(vector.x, vector.z), Math.atan2(vector.y, Math.sqrt(vector.z * vector.z + vector.x * vector.x)), 0, quaternion);\n    }\n    _applyPitchOffset(invertView) {\n        const forward = this._tmpVectors[0];\n        const right = this._tmpVectors[1];\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\n        right.copyFromFloats(1, 0, 0);\n        Vector3.TransformNormalToRef(forward, invertView, forward);\n        forward.y = 0;\n        forward.normalize();\n        Vector3.TransformNormalToRef(right, invertView, right);\n        Quaternion.RotationAxisToRef(right, (this.pitchOffset * Math.PI) / 180, this._tmpQuaternion);\n        forward.rotateByQuaternionToRef(this._tmpQuaternion, forward);\n        this._toOrientationQuatToRef(forward, this._tmpQuaternion);\n        this._tmpQuaternion.toRotationMatrix(this._tmpMatrix);\n        // Since we already extracted position from the invert view matrix, we can\n        // disregard the position part of the matrix in the copy\n        invertView.copyFrom(this._tmpMatrix);\n    }\n    _angularClamp(invertView, currentToTarget) {\n        const forward = this._tmpVectors[5];\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\n        const right = this._tmpVectors[6];\n        right.copyFromFloats(1, 0, 0);\n        // forward and right are related to camera frame of reference\n        Vector3.TransformNormalToRef(forward, invertView, forward);\n        Vector3.TransformNormalToRef(right, invertView, right);\n        // Up is global Z\n        const up = Vector3.UpReadOnly;\n        const dist = currentToTarget.length();\n        if (dist < Epsilon) {\n            return false;\n        }\n        let angularClamped = false;\n        const rotationQuat = this._tmpQuaternion;\n        // X-axis leashing\n        if (this.ignoreCameraPitchAndRoll) {\n            const angle = Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\n            Quaternion.RotationAxisToRef(right, angle, rotationQuat);\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\n        }\n        else {\n            const angle = -Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\n            const minMaxAngle = ((this.maxViewVerticalDegrees * Math.PI) / 180) * 0.5;\n            if (angle < -minMaxAngle) {\n                Quaternion.RotationAxisToRef(right, -angle - minMaxAngle, rotationQuat);\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\n                angularClamped = true;\n            }\n            else if (angle > minMaxAngle) {\n                Quaternion.RotationAxisToRef(right, -angle + minMaxAngle, rotationQuat);\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\n                angularClamped = true;\n            }\n        }\n        // Y-axis leashing\n        const angle = this._angleBetweenVectorAndPlane(currentToTarget, right) * (this._scene.useRightHandedSystem ? -1 : 1);\n        const minMaxAngle = ((this.maxViewHorizontalDegrees * Math.PI) / 180) * 0.5;\n        if (angle < -minMaxAngle) {\n            Quaternion.RotationAxisToRef(up, -angle - minMaxAngle, rotationQuat);\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\n            angularClamped = true;\n        }\n        else if (angle > minMaxAngle) {\n            Quaternion.RotationAxisToRef(up, -angle + minMaxAngle, rotationQuat);\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\n            angularClamped = true;\n        }\n        return angularClamped;\n    }\n    _orientationClamp(currentToTarget, rotationQuaternion) {\n        var _a;\n        // Construct a rotation quat from up vector and target vector\n        const toFollowed = this._tmpVectors[0];\n        toFollowed.copyFrom(currentToTarget).scaleInPlace(-1).normalize();\n        const up = this._tmpVectors[1];\n        const right = this._tmpVectors[2];\n        // We use global up vector to orient the following node (global +Y)\n        up.copyFromFloats(0, 1, 0);\n        // Gram-Schmidt to create an orthonormal frame\n        Vector3.CrossToRef(toFollowed, up, right);\n        const length = right.length();\n        if (length < Epsilon) {\n            return;\n        }\n        right.normalizeFromLength(length);\n        Vector3.CrossToRef(right, toFollowed, up);\n        if ((_a = this.attachedNode) === null || _a === void 0 ? void 0 : _a.getScene().useRightHandedSystem) {\n            Quaternion.FromLookDirectionRHToRef(toFollowed, up, rotationQuaternion);\n        }\n        else {\n            Quaternion.FromLookDirectionLHToRef(toFollowed, up, rotationQuaternion);\n        }\n    }\n    _passedOrientationDeadzone(currentToTarget, forward) {\n        const leashToFollow = this._tmpVectors[5];\n        leashToFollow.copyFrom(currentToTarget);\n        leashToFollow.normalize();\n        const angle = Math.abs(Vector3.GetAngleBetweenVectorsOnPlane(forward, leashToFollow, Vector3.UpReadOnly));\n        return (angle * 180) / Math.PI > this.orientToCameraDeadzoneDegrees;\n    }\n    _updateLeashing(camera) {\n        if (this.attachedNode && this._enabled) {\n            const oldParent = this.attachedNode.parent;\n            this.attachedNode.setParent(null);\n            const worldMatrix = this.attachedNode.getWorldMatrix();\n            const currentToTarget = this._workingPosition;\n            const rotationQuaternion = this._workingQuaternion;\n            const pivot = this.attachedNode.getPivotPoint();\n            const invertView = this._tmpInvertView;\n            invertView.copyFrom(camera.getViewMatrix());\n            invertView.invert();\n            Vector3.TransformCoordinatesToRef(pivot, worldMatrix, currentToTarget);\n            const position = this._tmpPosition;\n            position.copyFromFloats(0, 0, 0);\n            Vector3.TransformCoordinatesToRef(position, worldMatrix, position);\n            position.scaleInPlace(-1).subtractInPlace(pivot);\n            currentToTarget.subtractInPlace(camera.globalPosition);\n            if (this.ignoreCameraPitchAndRoll) {\n                this._applyPitchOffset(invertView);\n            }\n            let angularClamped = false;\n            const forward = this._tmpForward;\n            forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\n            Vector3.TransformNormalToRef(forward, invertView, forward);\n            const nodeForward = this._tmpNodeForward;\n            nodeForward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\n            Vector3.TransformNormalToRef(nodeForward, worldMatrix, nodeForward);\n            if (this._recenterNextUpdate) {\n                currentToTarget.copyFrom(forward).scaleInPlace(this.defaultDistance);\n            }\n            else {\n                if (this.ignoreAngleClamp) {\n                    const currentDistance = currentToTarget.length();\n                    currentToTarget.copyFrom(forward).scaleInPlace(currentDistance);\n                }\n                else {\n                    angularClamped = this._angularClamp(invertView, currentToTarget);\n                }\n            }\n            let distanceClamped = false;\n            if (!this.ignoreDistanceClamp) {\n                distanceClamped = this._distanceClamp(currentToTarget, angularClamped);\n                this._applyVerticalClamp(currentToTarget);\n            }\n            if (this.useFixedVerticalOffset) {\n                currentToTarget.y = position.y - camera.globalPosition.y + this.fixedVerticalOffset;\n            }\n            if (angularClamped || distanceClamped || this._passedOrientationDeadzone(currentToTarget, nodeForward) || this._recenterNextUpdate) {\n                this._orientationClamp(currentToTarget, rotationQuaternion);\n            }\n            this._workingPosition.subtractInPlace(pivot);\n            this._recenterNextUpdate = false;\n            this.attachedNode.setParent(oldParent);\n        }\n    }\n    _updateTransformToGoal(elapsed) {\n        if (!this.attachedNode || !this.followedCamera || !this._enabled) {\n            return;\n        }\n        if (!this.attachedNode.rotationQuaternion) {\n            this.attachedNode.rotationQuaternion = Quaternion.Identity();\n        }\n        const oldParent = this.attachedNode.parent;\n        this.attachedNode.setParent(null);\n        if (!this.interpolatePose) {\n            this.attachedNode.position.copyFrom(this.followedCamera.globalPosition).addInPlace(this._workingPosition);\n            this.attachedNode.rotationQuaternion.copyFrom(this._workingQuaternion);\n            return;\n        }\n        // position\n        const currentDirection = new Vector3();\n        currentDirection.copyFrom(this.attachedNode.position).subtractInPlace(this.followedCamera.globalPosition);\n        Vector3.SmoothToRef(currentDirection, this._workingPosition, elapsed, this.lerpTime, currentDirection);\n        currentDirection.addInPlace(this.followedCamera.globalPosition);\n        this.attachedNode.position.copyFrom(currentDirection);\n        // rotation\n        const currentRotation = new Quaternion();\n        currentRotation.copyFrom(this.attachedNode.rotationQuaternion);\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this.attachedNode.rotationQuaternion);\n        this.attachedNode.setParent(oldParent);\n    }\n    _addObservables() {\n        this._lastTick = Date.now();\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\n            if (!this.followedCamera) {\n                return;\n            }\n            const tick = Date.now();\n            this._updateLeashing(this.followedCamera);\n            this._updateTransformToGoal(tick - this._lastTick);\n            this._lastTick = tick;\n        });\n    }\n    _removeObservables() {\n        if (this._onBeforeRender) {\n            this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\n        }\n    }\n}\n//# sourceMappingURL=followBehavior.js.map","import { Camera } from \"../../Cameras/camera.js\";\nimport { UniversalCamera } from \"../../Cameras/universalCamera.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { TargetCamera } from \"../targetCamera.js\";\nimport { TransformNode } from \"../../Meshes/transformNode.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * Camera used to simulate stereoscopic rendering on real screens (based on UniversalCamera)\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n */\nexport class StereoscopicScreenUniversalCamera extends UniversalCamera {\n    set distanceBetweenEyes(newValue) {\n        this._distanceBetweenEyes = newValue;\n    }\n    /**\n     * distance between the eyes\n     */\n    get distanceBetweenEyes() {\n        return this._distanceBetweenEyes;\n    }\n    set distanceToProjectionPlane(newValue) {\n        this._distanceToProjectionPlane = newValue;\n    }\n    /**\n     * Distance to projection plane (should be the same units the like distance between the eyes)\n     */\n    get distanceToProjectionPlane() {\n        return this._distanceToProjectionPlane;\n    }\n    /**\n     * Creates a new StereoscopicScreenUniversalCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param scene defines the hosting scene\n     * @param distanceToProjectionPlane defines distance between each color axis. The rig cameras will receive this as their negative z position!\n     * @param distanceBetweenEyes defines is stereoscopic is done side by side or over under\n     */\n    constructor(name, position, scene, distanceToProjectionPlane = 1, distanceBetweenEyes = 0.065) {\n        super(name, position, scene);\n        this._distanceBetweenEyes = distanceBetweenEyes;\n        this._distanceToProjectionPlane = distanceToProjectionPlane;\n        this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL, {\n            stereoHalfAngle: 0,\n        });\n        this._cameraRigParams.stereoHalfAngle = 0;\n        this._cameraRigParams.interaxialDistance = distanceBetweenEyes;\n    }\n    /**\n     * Gets camera class name\n     * @returns StereoscopicScreenUniversalCamera\n     */\n    getClassName() {\n        return \"StereoscopicUniversalCamera\";\n    }\n    /**\n     * @internal\n     */\n    createRigCamera(name) {\n        const camera = new TargetCamera(name, Vector3.Zero(), this.getScene());\n        const transform = new TransformNode(\"tm_\" + name, this.getScene());\n        camera.parent = transform;\n        transform.setPivotMatrix(Matrix.Identity(), false);\n        camera.isRigCamera = true;\n        camera.rigParent = this;\n        return camera;\n    }\n    /**\n     * @internal\n     */\n    _updateRigCameras() {\n        for (let cameraIndex = 0; cameraIndex < this._rigCameras.length; cameraIndex++) {\n            const cam = this._rigCameras[cameraIndex];\n            cam.minZ = this.minZ;\n            cam.maxZ = this.maxZ;\n            cam.fov = this.fov;\n            cam.upVector.copyFrom(this.upVector);\n            if (cam.rotationQuaternion) {\n                cam.rotationQuaternion.copyFrom(this.rotationQuaternion);\n            }\n            else {\n                cam.rotation.copyFrom(this.rotation);\n            }\n            this._updateCamera(this._rigCameras[cameraIndex], cameraIndex);\n        }\n    }\n    _updateCamera(camera, cameraIndex) {\n        const b = this.distanceBetweenEyes / 2;\n        const z = b / this.distanceToProjectionPlane;\n        camera.position.copyFrom(this.position);\n        camera.position.addInPlaceFromFloats(cameraIndex === 0 ? -b : b, 0, -this._distanceToProjectionPlane);\n        const transform = camera.parent;\n        const m = transform.getPivotMatrix();\n        m.setTranslationFromFloats(cameraIndex === 0 ? b : -b, 0, 0);\n        m.setRowFromFloats(2, cameraIndex === 0 ? z : -z, 0, 1, 0);\n        transform.setPivotMatrix(m, false);\n    }\n    _setRigMode() {\n        this._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1);\n        this._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n        for (let cameraIndex = 0; cameraIndex < this._rigCameras.length; cameraIndex++) {\n            this._updateCamera(this._rigCameras[cameraIndex], cameraIndex);\n        }\n    }\n}\n//# sourceMappingURL=stereoscopicScreenUniversalCamera.js.map","import { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Defines the layer scene component responsible to manage any layers\n * in a given scene.\n */\nexport class LayerSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_LAYER;\n        this.scene = scene || EngineStore.LastCreatedScene;\n        if (!this.scene) {\n            return;\n        }\n        this._engine = this.scene.getEngine();\n        this.scene.layers = new Array();\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER, this, this._drawCameraBackground);\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER, this, this._drawCameraForegroundWithPostProcessing);\n        this.scene._afterCameraPostProcessStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERAPOSTPROCESS_LAYER, this, this._drawCameraForegroundWithoutPostProcessing);\n        this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER, this, this._drawRenderTargetBackground);\n        this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER, this, this._drawRenderTargetForegroundWithPostProcessing);\n        this.scene._afterRenderTargetPostProcessStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER, this, this._drawRenderTargetForegroundWithoutPostProcessing);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        const layers = this.scene.layers;\n        for (const layer of layers) {\n            layer._rebuild();\n        }\n    }\n    /**\n     * Disposes the component and the associated resources.\n     */\n    dispose() {\n        const layers = this.scene.layers;\n        while (layers.length) {\n            layers[0].dispose();\n        }\n    }\n    _draw(predicate) {\n        const layers = this.scene.layers;\n        if (layers.length) {\n            this._engine.setDepthBuffer(false);\n            for (const layer of layers) {\n                if (predicate(layer)) {\n                    layer.render();\n                }\n            }\n            this._engine.setDepthBuffer(true);\n        }\n    }\n    _drawCameraPredicate(layer, isBackground, applyPostProcess, cameraLayerMask) {\n        return (!layer.renderOnlyInRenderTargetTextures &&\n            layer.isBackground === isBackground &&\n            layer.applyPostProcess === applyPostProcess &&\n            (layer.layerMask & cameraLayerMask) !== 0);\n    }\n    _drawCameraBackground(camera) {\n        this._draw((layer) => {\n            return this._drawCameraPredicate(layer, true, true, camera.layerMask);\n        });\n    }\n    _drawCameraForegroundWithPostProcessing(camera) {\n        this._draw((layer) => {\n            return this._drawCameraPredicate(layer, false, true, camera.layerMask);\n        });\n    }\n    _drawCameraForegroundWithoutPostProcessing(camera) {\n        this._draw((layer) => {\n            return this._drawCameraPredicate(layer, false, false, camera.layerMask);\n        });\n    }\n    _drawRenderTargetPredicate(layer, isBackground, applyPostProcess, cameraLayerMask, renderTargetTexture) {\n        return (layer.renderTargetTextures.length > 0 &&\n            layer.isBackground === isBackground &&\n            layer.applyPostProcess === applyPostProcess &&\n            layer.renderTargetTextures.indexOf(renderTargetTexture) > -1 &&\n            (layer.layerMask & cameraLayerMask) !== 0);\n    }\n    _drawRenderTargetBackground(renderTarget) {\n        this._draw((layer) => {\n            return this._drawRenderTargetPredicate(layer, true, true, this.scene.activeCamera.layerMask, renderTarget);\n        });\n    }\n    _drawRenderTargetForegroundWithPostProcessing(renderTarget) {\n        this._draw((layer) => {\n            return this._drawRenderTargetPredicate(layer, false, true, this.scene.activeCamera.layerMask, renderTarget);\n        });\n    }\n    _drawRenderTargetForegroundWithoutPostProcessing(renderTarget) {\n        this._draw((layer) => {\n            return this._drawRenderTargetPredicate(layer, false, false, this.scene.activeCamera.layerMask, renderTarget);\n        });\n    }\n    /**\n     * Adds all the elements from the container to the scene\n     * @param container the container holding the elements\n     */\n    addFromContainer(container) {\n        if (!container.layers) {\n            return;\n        }\n        container.layers.forEach((layer) => {\n            this.scene.layers.push(layer);\n        });\n    }\n    /**\n     * Removes all the elements in the container from the scene\n     * @param container contains the elements to remove\n     * @param dispose if the removed element should be disposed (default: false)\n     */\n    removeFromContainer(container, dispose = false) {\n        if (!container.layers) {\n            return;\n        }\n        container.layers.forEach((layer) => {\n            const index = this.scene.layers.indexOf(layer);\n            if (index !== -1) {\n                this.scene.layers.splice(index, 1);\n            }\n            if (dispose) {\n                layer.dispose();\n            }\n        });\n    }\n}\n//# sourceMappingURL=layerSceneComponent.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { LayerSceneComponent } from \"./layerSceneComponent.js\";\n\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/layer.fragment.js\";\nimport \"../Shaders/layer.vertex.js\";\n/**\n * This represents a full screen 2d layer.\n * This can be useful to display a picture in the  background of your scene for instance.\n * @see https://www.babylonjs-playground.com/#08A2BS#1\n */\nexport class Layer {\n    /**\n     * Determines if the layer is drawn before (true) or after (false) post-processing.\n     * If the layer is background, it is always before.\n     */\n    set applyPostProcess(value) {\n        this._applyPostProcess = value;\n    }\n    get applyPostProcess() {\n        return this.isBackground || this._applyPostProcess;\n    }\n    /**\n     * Back compatibility with callback before the onDisposeObservable existed.\n     * The set callback will be triggered when the layer has been disposed.\n     */\n    set onDispose(callback) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\n     * The set callback will be triggered just before rendering the layer.\n     */\n    set onBeforeRender(callback) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n    /**\n     * Back compatibility with callback before the onAfterRenderObservable existed.\n     * The set callback will be triggered just after rendering the layer.\n     */\n    set onAfterRender(callback) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n    /**\n     * Instantiates a new layer.\n     * This represents a full screen 2d layer.\n     * This can be useful to display a picture in the  background of your scene for instance.\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\n     * @param name Define the name of the layer in the scene\n     * @param imgUrl Define the url of the texture to display in the layer\n     * @param scene Define the scene the layer belongs to\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\n     * @param color Defines a color for the layer\n     */\n    constructor(\n    /**\n     * Define the name of the layer.\n     */\n    name, imgUrl, scene, isBackground, color) {\n        this.name = name;\n        this._applyPostProcess = true;\n        /**\n         * Define the scale of the layer in order to zoom in out of the texture.\n         */\n        this.scale = new Vector2(1, 1);\n        /**\n         * Define an offset for the layer in order to shift the texture.\n         */\n        this.offset = new Vector2(0, 0);\n        /**\n         * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\n         */\n        this.alphaBlendingMode = 2;\n        /**\n         * Define a mask to restrict the layer to only some of the scene cameras.\n         */\n        this.layerMask = 0x0fffffff;\n        /**\n         * Define the list of render target the layer is visible into.\n         */\n        this.renderTargetTextures = [];\n        /**\n         * Define if the layer is only used in renderTarget or if it also\n         * renders in the main frame buffer of the canvas.\n         */\n        this.renderOnlyInRenderTargetTextures = false;\n        /**\n         * Define if the layer is enabled (ie. should be displayed). Default: true\n         */\n        this.isEnabled = true;\n        this._vertexBuffers = {};\n        /**\n         * An event triggered when the layer is disposed.\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered before rendering the scene\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the scene\n         */\n        this.onAfterRenderObservable = new Observable();\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\n        this.isBackground = isBackground === undefined ? true : isBackground;\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\n        this._scene = (scene || EngineStore.LastCreatedScene);\n        let layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER);\n        if (!layerComponent) {\n            layerComponent = new LayerSceneComponent(this._scene);\n            this._scene._addComponent(layerComponent);\n        }\n        this._scene.layers.push(this);\n        const engine = this._scene.getEngine();\n        this._drawWrapper = new DrawWrapper(engine);\n        // VBO\n        const vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        const vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\n        this._createIndexBuffer();\n    }\n    _createIndexBuffer() {\n        const engine = this._scene.getEngine();\n        // Indices\n        const indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = engine.createIndexBuffer(indices);\n    }\n    /** @internal */\n    _rebuild() {\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vb) {\n            vb._rebuild();\n        }\n        this._createIndexBuffer();\n    }\n    /**\n     * Checks if the layer is ready to be rendered\n     * @returns true if the layer is ready. False otherwise.\n     */\n    isReady() {\n        var _a;\n        const engine = this._scene.getEngine();\n        let defines = \"\";\n        if (this.alphaTest) {\n            defines = \"#define ALPHATEST\";\n        }\n        if (this.texture && !this.texture.gammaSpace) {\n            defines += \"\\r\\n#define LINEAR\";\n        }\n        if (this._previousDefines !== defines) {\n            this._previousDefines = defines;\n            this._drawWrapper.effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\n        }\n        const currentEffect = this._drawWrapper.effect;\n        return (currentEffect === null || currentEffect === void 0 ? void 0 : currentEffect.isReady()) && ((_a = this.texture) === null || _a === void 0 ? void 0 : _a.isReady());\n    }\n    /**\n     * Renders the layer in the scene.\n     */\n    render() {\n        if (!this.isEnabled) {\n            return;\n        }\n        const engine = this._scene.getEngine();\n        // Check\n        if (!this.isReady()) {\n            return;\n        }\n        const currentEffect = this._drawWrapper.effect;\n        this.onBeforeRenderObservable.notifyObservers(this);\n        // Render\n        engine.enableEffect(this._drawWrapper);\n        engine.setState(false);\n        // Texture\n        currentEffect.setTexture(\"textureSampler\", this.texture);\n        currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix());\n        // Color\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\n        // Scale / offset\n        currentEffect.setVector2(\"offset\", this.offset);\n        currentEffect.setVector2(\"scale\", this.scale);\n        // VBOs\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\n        // Draw order\n        if (!this.alphaTest) {\n            engine.setAlphaMode(this.alphaBlendingMode);\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n            engine.setAlphaMode(0);\n        }\n        else {\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n    }\n    /**\n     * Disposes and releases the associated resources.\n     */\n    dispose() {\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n        if (this.texture) {\n            this.texture.dispose();\n            this.texture = null;\n        }\n        // Clean RTT list\n        this.renderTargetTextures = [];\n        // Remove from scene\n        const index = this._scene.layers.indexOf(this);\n        this._scene.layers.splice(index, 1);\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderObservable.clear();\n    }\n}\n//# sourceMappingURL=layer.js.map","import { Color4 } from \"../../Maths/math.color.js\";\nimport { ShaderMaterial } from \"../shaderMaterial.js\";\nimport \"../../Shaders/color.fragment.js\";\nimport \"../../Shaders/color.vertex.js\";\n/**\n * A material to use for fast depth-only rendering.\n * @since 5.0.0\n */\nexport class OcclusionMaterial extends ShaderMaterial {\n    constructor(name, scene) {\n        super(name, scene, \"color\", {\n            attributes: [\"position\"],\n            uniforms: [\"world\", \"viewProjection\", \"color\"],\n        });\n        this.disableColorWrite = true;\n        this.forceDepthWrite = true;\n        this.setColor4(\"color\", new Color4(0, 0, 0, 1));\n    }\n}\n//# sourceMappingURL=occlusionMaterial.js.map","import { Logger } from \"../../../Misc/logger.js\";\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector.js\";\nimport { Color4, Color3 } from \"../../../Maths/math.color.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { ProceduralTexture } from \"./proceduralTexture.js\";\nimport { WebRequest } from \"../../../Misc/webRequest.js\";\n/**\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures#creating-custom-procedural-textures\n */\nexport class CustomProceduralTexture extends ProceduralTexture {\n    /**\n     * Instantiates a new Custom Procedural Texture.\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n     * Custom Procedural textures are the easiest way to create your own procedural in your application.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures#creating-custom-procedural-textures\n     * @param name Define the name of the texture\n     * @param texturePath Define the folder path containing all the custom texture related files (config, shaders...)\n     * @param size Define the size of the texture to create\n     * @param scene Define the scene the texture belongs to\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\n     * @param generateMipMaps Define if the texture should creates mip maps or not\n     * @param skipJson Define a boolena indicating that there is no json config file to load\n     */\n    constructor(name, texturePath, size, scene, fallbackTexture, generateMipMaps, skipJson) {\n        super(name, size, null, scene, fallbackTexture, generateMipMaps);\n        this._animate = true;\n        this._time = 0;\n        this._texturePath = texturePath;\n        if (!skipJson) {\n            //Try to load json\n            this._loadJson(texturePath);\n        }\n        else {\n            this.setFragment(this._texturePath);\n        }\n        this.refreshRate = 1;\n    }\n    _loadJson(jsonUrl) {\n        const noConfigFile = () => {\n            try {\n                this.setFragment(this._texturePath);\n            }\n            catch (ex) {\n                Logger.Log(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\n            }\n        };\n        const configFileUrl = jsonUrl + \"/config.json\";\n        const xhr = new WebRequest();\n        xhr.open(\"GET\", configFileUrl);\n        xhr.addEventListener(\"load\", () => {\n            if (xhr.status === 200 || (xhr.responseText && xhr.responseText.length > 0)) {\n                try {\n                    this._config = JSON.parse(xhr.response);\n                    this.updateShaderUniforms();\n                    this.updateTextures();\n                    this.setFragment(this._texturePath + \"/custom\");\n                    this._animate = this._config.animate;\n                    this.refreshRate = this._config.refreshrate;\n                }\n                catch (ex) {\n                    noConfigFile();\n                }\n            }\n            else {\n                noConfigFile();\n            }\n        }, false);\n        xhr.addEventListener(\"error\", () => {\n            noConfigFile();\n        }, false);\n        try {\n            xhr.send();\n        }\n        catch (ex) {\n            Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\n        }\n    }\n    /**\n     * Is the texture ready to be used ? (rendered at least once)\n     * @returns true if ready, otherwise, false.\n     */\n    isReady() {\n        if (!super.isReady()) {\n            return false;\n        }\n        for (const name in this._textures) {\n            const texture = this._textures[name];\n            if (!texture.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Render the texture to its associated render target.\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\n     */\n    render(useCameraPostProcess) {\n        const scene = this.getScene();\n        if (this._animate && scene) {\n            this._time += scene.getAnimationRatio() * 0.03;\n            this.updateShaderUniforms();\n        }\n        super.render(useCameraPostProcess);\n    }\n    /**\n     * Update the list of dependant textures samplers in the shader.\n     */\n    updateTextures() {\n        for (let i = 0; i < this._config.sampler2Ds.length; i++) {\n            this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\n        }\n    }\n    /**\n     * Update the uniform values of the procedural texture in the shader.\n     */\n    updateShaderUniforms() {\n        if (this._config) {\n            for (let j = 0; j < this._config.uniforms.length; j++) {\n                const uniform = this._config.uniforms[j];\n                switch (uniform.type) {\n                    case \"float\":\n                        this.setFloat(uniform.name, uniform.value);\n                        break;\n                    case \"color3\":\n                        this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\n                        break;\n                    case \"color4\":\n                        this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\n                        break;\n                    case \"vector2\":\n                        this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\n                        break;\n                    case \"vector3\":\n                        this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\n                        break;\n                }\n            }\n        }\n        this.setFloat(\"time\", this._time);\n    }\n    /**\n     * Define if the texture animates or not.\n     */\n    get animate() {\n        return this._animate;\n    }\n    set animate(value) {\n        this._animate = value;\n    }\n}\n//# sourceMappingURL=customProceduralTexture.js.map","import { Texture } from \"./texture.js\";\n\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 3D textures containing user data\n */\nexport class RawTexture3D extends Texture {\n    /**\n     * Create a new RawTexture3D\n     * @param data defines the data of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param depth defines the depth of the texture\n     * @param format defines the texture format to use\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n     * @param invertY defines if texture must be stored with Y axis inverted\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n     */\n    constructor(data, width, height, depth, \n    /** Gets or sets the texture format to use */\n    format, scene, generateMipMaps = true, invertY = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, textureType = 0) {\n        super(null, scene, !generateMipMaps, invertY);\n        this.format = format;\n        this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n        this.is3D = true;\n    }\n    /**\n     * Update the texture with new data\n     * @param data defines the data to store in the texture\n     */\n    update(data) {\n        if (!this._texture) {\n            return;\n        }\n        this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n    }\n}\n//# sourceMappingURL=rawTexture3D.js.map","import { Plane } from \"../../Maths/math.plane.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\n/**\n * Creates a refraction texture used by refraction channel of the standard material.\n * It is like a mirror but to see through a material.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#refractiontexture\n */\nexport class RefractionTexture extends RenderTargetTexture {\n    /**\n     * Creates a refraction texture used by refraction channel of the standard material.\n     * It is like a mirror but to see through a material.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#refraction\n     * @param name Define the texture name\n     * @param size Define the size of the underlying texture\n     * @param scene Define the scene the refraction belongs to\n     * @param generateMipMaps Define if we need to generate mips level for the refraction\n     */\n    constructor(name, size, scene, generateMipMaps) {\n        super(name, size, scene, generateMipMaps, true);\n        /**\n         * Define the reflection plane we want to use. The refractionPlane is usually set to the constructed refractor.\n         * It is possible to directly set the refractionPlane by directly using a Plane(a, b, c, d) where a, b and c give the plane normal vector (a, b, c) and d is a scalar displacement from the refractionPlane to the origin. However in all but the very simplest of situations it is more straight forward to set it to the refractor as stated in the doc.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#refraction\n         */\n        this.refractionPlane = new Plane(0, 1, 0, 1);\n        /**\n         * Define how deep under the surface we should see.\n         */\n        this.depth = 2.0;\n        this.onBeforeRenderObservable.add(() => {\n            this.getScene().clipPlane = this.refractionPlane;\n        });\n        this.onAfterRenderObservable.add(() => {\n            this.getScene().clipPlane = null;\n        });\n    }\n    /**\n     * Clone the refraction texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        const scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        const textureSize = this.getSize();\n        const newTexture = new RefractionTexture(this.name, textureSize.width, scene, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // Refraction Texture\n        newTexture.refractionPlane = this.refractionPlane.clone();\n        if (this.renderList) {\n            newTexture.renderList = this.renderList.slice(0);\n        }\n        newTexture.depth = this.depth;\n        return newTexture;\n    }\n    /**\n     * Serialize the texture to a JSON representation you could use in Parse later on\n     * @returns the serialized JSON representation\n     */\n    serialize() {\n        if (!this.name) {\n            return null;\n        }\n        const serializationObject = super.serialize();\n        serializationObject.mirrorPlane = this.refractionPlane.asArray();\n        serializationObject.depth = this.depth;\n        return serializationObject;\n    }\n}\n//# sourceMappingURL=refractionTexture.js.map","import { ThinTexture } from \"./thinTexture.js\";\n/**\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\n * usable as the input of an effect.\n */\nexport class ThinRenderTargetTexture extends ThinTexture {\n    /**\n     * Gets the render target wrapper associated with this render target\n     */\n    get renderTarget() {\n        return this._renderTarget;\n    }\n    /**\n     * Instantiates a new ThinRenderTargetTexture.\n     * Tiny helper class to wrap a RenderTargetWrapper in a texture.\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\n     * @param engine Define the internalTexture to wrap\n     * @param size Define the size of the RTT to create\n     * @param options Define rendertarget options\n     */\n    constructor(engine, size, options) {\n        super(null);\n        this._renderTarget = null;\n        this._engine = engine;\n        this._renderTargetOptions = options;\n        this.resize(size);\n    }\n    /**\n     * Resize the texture to a new desired size.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size. It can be:\n     *   - a number for squared texture,\n     *   - an object containing { width: number, height: number }\n     */\n    resize(size) {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        this._texture = null;\n        this._size = size;\n        if (this._engine) {\n            this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\n        }\n        this._texture = this.renderTarget.texture;\n    }\n    /**\n     * Get the underlying lower level texture from Babylon.\n     * @returns the internal texture\n     */\n    getInternalTexture() {\n        return this._texture;\n    }\n    /**\n     * Get the class name of the texture.\n     * @returns \"ThinRenderTargetTexture\"\n     */\n    getClassName() {\n        return \"ThinRenderTargetTexture\";\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     * @param disposeOnlyFramebuffers\n     */\n    dispose(disposeOnlyFramebuffers = false) {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n        this._renderTarget = null;\n        if (!disposeOnlyFramebuffers) {\n            super.dispose();\n        }\n    }\n}\n//# sourceMappingURL=thinRenderTargetTexture.js.map","import { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\n/**\n * Class used to create a trail following a mesh\n */\nexport class TrailMesh extends Mesh {\n    /**\n     * Creates a new TrailMesh.\n     * @param name The value used by scene.getMeshByName() to do a lookup.\n     * @param generator The mesh or transform node to generate a trail.\n     * @param scene The scene to add this mesh to.\n     * @param diameter Diameter of trailing mesh. Default is 1.\n     * @param length Length of trailing mesh. Default is 60.\n     * @param autoStart Automatically start trailing mesh. Default true.\n     */\n    constructor(name, generator, scene, diameter = 1, length = 60, autoStart = true) {\n        super(name, scene);\n        this._sectionPolygonPointsCount = 4;\n        this._running = false;\n        this._autoStart = autoStart;\n        this._generator = generator;\n        this.diameter = diameter;\n        this._length = length;\n        this._sectionVectors = [];\n        this._sectionNormalVectors = [];\n        for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n            this._sectionVectors[i] = Vector3.Zero();\n            this._sectionNormalVectors[i] = Vector3.Zero();\n        }\n        this._createMesh();\n    }\n    /**\n     * \"TrailMesh\"\n     * @returns \"TrailMesh\"\n     */\n    getClassName() {\n        return \"TrailMesh\";\n    }\n    _createMesh() {\n        const data = new VertexData();\n        const positions = [];\n        const normals = [];\n        const indices = [];\n        let meshCenter = Vector3.Zero();\n        if (this._generator instanceof AbstractMesh && this._generator.hasBoundingInfo) {\n            meshCenter = this._generator.getBoundingInfo().boundingBox.centerWorld;\n        }\n        else {\n            meshCenter = this._generator.position;\n        }\n        const alpha = (2 * Math.PI) / this._sectionPolygonPointsCount;\n        for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n            positions.push(meshCenter.x + Math.cos(i * alpha) * this.diameter, meshCenter.y + Math.sin(i * alpha) * this.diameter, meshCenter.z);\n        }\n        for (let i = 1; i <= this._length; i++) {\n            for (let j = 0; j < this._sectionPolygonPointsCount; j++) {\n                positions.push(meshCenter.x + Math.cos(j * alpha) * this.diameter, meshCenter.y + Math.sin(j * alpha) * this.diameter, meshCenter.z);\n            }\n            const l = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\n            for (let j = 0; j < this._sectionPolygonPointsCount - 1; j++) {\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\n            }\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\n        }\n        VertexData.ComputeNormals(positions, indices, normals);\n        data.positions = positions;\n        data.normals = normals;\n        data.indices = indices;\n        data.applyToMesh(this, true);\n        if (this._autoStart) {\n            this.start();\n        }\n    }\n    /**\n     * Start trailing mesh.\n     */\n    start() {\n        if (!this._running) {\n            this._running = true;\n            this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(() => {\n                this.update();\n            });\n        }\n    }\n    /**\n     * Stop trailing mesh.\n     */\n    stop() {\n        if (this._beforeRenderObserver && this._running) {\n            this._running = false;\n            this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\n        }\n    }\n    /**\n     * Update trailing mesh geometry.\n     */\n    update() {\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\n        const wm = this._generator.getWorldMatrix();\n        if (positions && normals) {\n            for (let i = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\n                positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - (normals[i] / this._length) * this.diameter;\n            }\n            for (let i = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\n                normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\n            }\n            const l = positions.length - 3 * this._sectionPolygonPointsCount;\n            const alpha = (2 * Math.PI) / this._sectionPolygonPointsCount;\n            for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n                this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this.diameter, Math.sin(i * alpha) * this.diameter, 0);\n                this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\n                Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\n                Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\n            }\n            for (let i = 0; i < this._sectionPolygonPointsCount; i++) {\n                positions[l + 3 * i] = this._sectionVectors[i].x;\n                positions[l + 3 * i + 1] = this._sectionVectors[i].y;\n                positions[l + 3 * i + 2] = this._sectionVectors[i].z;\n                normals[l + 3 * i] = this._sectionNormalVectors[i].x;\n                normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\n                normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\n            }\n            this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\n        }\n    }\n    /**\n     * Returns a new TrailMesh object.\n     * @param name is a string, the name given to the new mesh\n     * @param newGenerator use new generator object for cloned trail mesh\n     * @returns a new mesh\n     */\n    clone(name = \"\", newGenerator) {\n        return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this.diameter, this._length, this._autoStart);\n    }\n    /**\n     * Serializes this trail mesh\n     * @param serializationObject object to write serialization to\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n    }\n    /**\n     * Parses a serialized trail mesh\n     * @param parsedMesh the serialized mesh\n     * @param scene the scene to create the trail mesh in\n     * @returns the created trail mesh\n     */\n    static Parse(parsedMesh, scene) {\n        var _a;\n        return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, (_a = parsedMesh.diameter) !== null && _a !== void 0 ? _a : parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\n    }\n}\n//# sourceMappingURL=trailMesh.js.map","import { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/highlights.fragment.js\";\n/**\n * Extracts highlights from the image\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nexport class HighlightsPostProcess extends PostProcess {\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"HighlightsPostProcess\" string\n     */\n    getClassName() {\n        return \"HighlightsPostProcess\";\n    }\n    /**\n     * Extracts highlights from the image\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\n     */\n    constructor(name, options, camera, samplingMode, engine, reusable, textureType = 0) {\n        super(name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType);\n    }\n}\n//# sourceMappingURL=highlightsPostProcess.js.map","import { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/chromaticAberration.fragment.js\";\nimport \"../../../Shaders/lensHighlights.fragment.js\";\nimport \"../../../Shaders/depthOfField.fragment.js\";\n/**\n * BABYLON.JS Chromatic Aberration GLSL Shader\n * Author: Olivier Guyot\n * Separates very slightly R, G and B colors on the edges of the screen\n * Inspired by Francois Tarlier & Martins Upitis\n */\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\n    /**\n     * @constructor\n     *\n     * Effect parameters are as follow:\n     * {\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\n     *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\n     *      grain_amount: number;               // from 0 to 1\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\n     * }\n     * Note: if an effect parameter is unset, effect is disabled\n     *\n     * @param name The rendering pipeline name\n     * @param parameters - An object containing all parameters (see above)\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     */\n    constructor(name, parameters, scene, ratio = 1.0, cameras) {\n        super(scene.getEngine(), name);\n        // Lens effects can be of the following:\n        // - chromatic aberration (slight shift of RGB colors)\n        // - blur on the edge of the lens\n        // - lens distortion\n        // - depth-of-field blur & highlights enhancing\n        // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n        // - grain effect (noise or custom texture)\n        // Two additional texture samplers are needed:\n        // - depth map (for depth-of-field)\n        // - grain texture\n        /**\n         * @ignore\n         * The chromatic aberration PostProcess id in the pipeline\n         */\n        this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n        /**\n         * @ignore\n         * The highlights enhancing PostProcess id in the pipeline\n         */\n        this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n        /**\n         * @ignore\n         * The depth-of-field PostProcess id in the pipeline\n         */\n        this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n        this._pentagonBokehIsEnabled = false;\n        this._scene = scene;\n        // Fetch texture samplers\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n        if (parameters.grain_texture) {\n            this._grainTexture = parameters.grain_texture;\n        }\n        else {\n            this._createGrainTexture();\n        }\n        // save parameters\n        this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n        this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n        this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n        this._distortion = parameters.distortion ? parameters.distortion : 0;\n        this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n        this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n        this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n        this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n        this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n        this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n        this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\n        // Create effects\n        this._createChromaticAberrationPostProcess(ratio);\n        this._createHighlightsPostProcess(ratio);\n        this._createDepthOfFieldPostProcess(ratio / 4);\n        // Set up pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensChromaticAberrationEffect, () => {\n            return this._chromaticAberrationPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.HighlightsEnhancingEffect, () => {\n            return this._highlightsPostProcess;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensDepthOfFieldEffect, () => {\n            return this._depthOfFieldPostProcess;\n        }, true));\n        if (this._highlightsGain === -1) {\n            this._disableEffect(this.HighlightsEnhancingEffect, null);\n        }\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n    }\n    /**\n     * Get the class name\n     * @returns \"LensRenderingPipeline\"\n     */\n    getClassName() {\n        return \"LensRenderingPipeline\";\n    }\n    // Properties\n    /**\n     * Gets associated scene\n     */\n    get scene() {\n        return this._scene;\n    }\n    /**\n     * Gets or sets the edge blur\n     */\n    get edgeBlur() {\n        return this._edgeBlur;\n    }\n    set edgeBlur(value) {\n        this.setEdgeBlur(value);\n    }\n    /**\n     * Gets or sets the grain amount\n     */\n    get grainAmount() {\n        return this._grainAmount;\n    }\n    set grainAmount(value) {\n        this.setGrainAmount(value);\n    }\n    /**\n     * Gets or sets the chromatic aberration amount\n     */\n    get chromaticAberration() {\n        return this._chromaticAberration;\n    }\n    set chromaticAberration(value) {\n        this.setChromaticAberration(value);\n    }\n    /**\n     * Gets or sets the depth of field aperture\n     */\n    get dofAperture() {\n        return this._dofAperture;\n    }\n    set dofAperture(value) {\n        this.setAperture(value);\n    }\n    /**\n     * Gets or sets the edge distortion\n     */\n    get edgeDistortion() {\n        return this._distortion;\n    }\n    set edgeDistortion(value) {\n        this.setEdgeDistortion(value);\n    }\n    /**\n     * Gets or sets the depth of field distortion\n     */\n    get dofDistortion() {\n        return this._dofDistance;\n    }\n    set dofDistortion(value) {\n        this.setFocusDistance(value);\n    }\n    /**\n     * Gets or sets the darken out of focus amount\n     */\n    get darkenOutOfFocus() {\n        return this._dofDarken;\n    }\n    set darkenOutOfFocus(value) {\n        this.setDarkenOutOfFocus(value);\n    }\n    /**\n     * Gets or sets a boolean indicating if blur noise is enabled\n     */\n    get blurNoise() {\n        return this._blurNoise;\n    }\n    set blurNoise(value) {\n        this._blurNoise = value;\n    }\n    /**\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\n     */\n    get pentagonBokeh() {\n        return this._pentagonBokehIsEnabled;\n    }\n    set pentagonBokeh(value) {\n        if (value) {\n            this.enablePentagonBokeh();\n        }\n        else {\n            this.disablePentagonBokeh();\n        }\n    }\n    /**\n     * Gets or sets the highlight grain amount\n     */\n    get highlightsGain() {\n        return this._highlightsGain;\n    }\n    set highlightsGain(value) {\n        this.setHighlightsGain(value);\n    }\n    /**\n     * Gets or sets the highlight threshold\n     */\n    get highlightsThreshold() {\n        return this._highlightsThreshold;\n    }\n    set highlightsThreshold(value) {\n        this.setHighlightsThreshold(value);\n    }\n    // public methods (self explanatory)\n    /**\n     * Sets the amount of blur at the edges\n     * @param amount blur amount\n     */\n    setEdgeBlur(amount) {\n        this._edgeBlur = amount;\n    }\n    /**\n     * Sets edge blur to 0\n     */\n    disableEdgeBlur() {\n        this._edgeBlur = 0;\n    }\n    /**\n     * Sets the amount of grain\n     * @param amount Amount of grain\n     */\n    setGrainAmount(amount) {\n        this._grainAmount = amount;\n    }\n    /**\n     * Set grain amount to 0\n     */\n    disableGrain() {\n        this._grainAmount = 0;\n    }\n    /**\n     * Sets the chromatic aberration amount\n     * @param amount amount of chromatic aberration\n     */\n    setChromaticAberration(amount) {\n        this._chromaticAberration = amount;\n    }\n    /**\n     * Sets chromatic aberration amount to 0\n     */\n    disableChromaticAberration() {\n        this._chromaticAberration = 0;\n    }\n    /**\n     * Sets the EdgeDistortion amount\n     * @param amount amount of EdgeDistortion\n     */\n    setEdgeDistortion(amount) {\n        this._distortion = amount;\n    }\n    /**\n     * Sets edge distortion to 0\n     */\n    disableEdgeDistortion() {\n        this._distortion = 0;\n    }\n    /**\n     * Sets the FocusDistance amount\n     * @param amount amount of FocusDistance\n     */\n    setFocusDistance(amount) {\n        this._dofDistance = amount;\n    }\n    /**\n     * Disables depth of field\n     */\n    disableDepthOfField() {\n        this._dofDistance = -1;\n    }\n    /**\n     * Sets the Aperture amount\n     * @param amount amount of Aperture\n     */\n    setAperture(amount) {\n        this._dofAperture = amount;\n    }\n    /**\n     * Sets the DarkenOutOfFocus amount\n     * @param amount amount of DarkenOutOfFocus\n     */\n    setDarkenOutOfFocus(amount) {\n        this._dofDarken = amount;\n    }\n    /**\n     * Creates a pentagon bokeh effect\n     */\n    enablePentagonBokeh() {\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n        this._pentagonBokehIsEnabled = true;\n    }\n    /**\n     * Disables the pentagon bokeh effect\n     */\n    disablePentagonBokeh() {\n        this._pentagonBokehIsEnabled = false;\n        this._highlightsPostProcess.updateEffect();\n    }\n    /**\n     * Enables noise blur\n     */\n    enableNoiseBlur() {\n        this._blurNoise = true;\n    }\n    /**\n     * Disables noise blur\n     */\n    disableNoiseBlur() {\n        this._blurNoise = false;\n    }\n    /**\n     * Sets the HighlightsGain amount\n     * @param amount amount of HighlightsGain\n     */\n    setHighlightsGain(amount) {\n        this._highlightsGain = amount;\n    }\n    /**\n     * Sets the HighlightsThreshold amount\n     * @param amount amount of HighlightsThreshold\n     */\n    setHighlightsThreshold(amount) {\n        if (this._highlightsGain === -1) {\n            this._highlightsGain = 1.0;\n        }\n        this._highlightsThreshold = amount;\n    }\n    /**\n     * Disables highlights\n     */\n    disableHighlights() {\n        this._highlightsGain = -1;\n    }\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\n     */\n    dispose(disableDepthRender = false) {\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        this._chromaticAberrationPostProcess = null;\n        this._highlightsPostProcess = null;\n        this._depthOfFieldPostProcess = null;\n        this._grainTexture.dispose();\n        if (disableDepthRender) {\n            this._scene.disableDepthRenderer();\n        }\n    }\n    // colors shifting and distortion\n    _createChromaticAberrationPostProcess(ratio) {\n        this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\n        [], // samplers\n        ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._chromaticAberrationPostProcess.onApply = (effect) => {\n            effect.setFloat(\"chromatic_aberration\", this._chromaticAberration);\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n            effect.setFloat(\"radialIntensity\", 1);\n            effect.setFloat2(\"direction\", 17, 17);\n            effect.setFloat2(\"centerPosition\", 0.5, 0.5);\n        };\n    }\n    // highlights enhancing\n    _createHighlightsPostProcess(ratio) {\n        this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\n        [], // samplers\n        ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n        this._highlightsPostProcess.externalTextureSamplerBinding = true;\n        this._highlightsPostProcess.onApply = (effect) => {\n            effect.setFloat(\"gain\", this._highlightsGain);\n            effect.setFloat(\"threshold\", this._highlightsThreshold);\n            effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n        };\n    }\n    // colors shifting and distortion\n    _createDepthOfFieldPostProcess(ratio) {\n        this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\n            \"grain_amount\",\n            \"blur_noise\",\n            \"screen_width\",\n            \"screen_height\",\n            \"distortion\",\n            \"dof_enabled\",\n            \"screen_distance\",\n            \"aperture\",\n            \"darken\",\n            \"edge_blur\",\n            \"highlights\",\n            \"near\",\n            \"far\",\n        ], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\n        this._depthOfFieldPostProcess.onApply = (effect) => {\n            effect.setTexture(\"depthSampler\", this._depthTexture);\n            effect.setTexture(\"grainSampler\", this._grainTexture);\n            effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\n            effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\n            effect.setFloat(\"grain_amount\", this._grainAmount);\n            effect.setBool(\"blur_noise\", this._blurNoise);\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\n            effect.setFloat(\"distortion\", this._distortion);\n            effect.setBool(\"dof_enabled\", this._dofDistance !== -1);\n            effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / this._dofDistance));\n            effect.setFloat(\"aperture\", this._dofAperture);\n            effect.setFloat(\"darken\", this._dofDarken);\n            effect.setFloat(\"edge_blur\", this._edgeBlur);\n            effect.setBool(\"highlights\", this._highlightsGain !== -1);\n            if (this._scene.activeCamera) {\n                effect.setFloat(\"near\", this._scene.activeCamera.minZ);\n                effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\n            }\n        };\n    }\n    // creates a black and white random noise texture, 512x512\n    _createGrainTexture() {\n        const size = 512;\n        this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\n        this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        const context = this._grainTexture.getContext();\n        const rand = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n        let value;\n        for (let x = 0; x < size; x++) {\n            for (let y = 0; y < size; y++) {\n                value = Math.floor(rand(0.42, 0.58) * 255);\n                context.fillStyle = \"rgb(\" + value + \", \" + value + \", \" + value + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._grainTexture.update(false);\n    }\n}\n//# sourceMappingURL=lensRenderingPipeline.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\n/**\n * Class used to specific a value and its associated unit\n */\nexport class ValueAndUnit {\n    /**\n     * Creates a new ValueAndUnit\n     * @param value defines the value to store\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\n     */\n    constructor(value, \n    /** defines the unit to store */\n    unit = ValueAndUnit.UNITMODE_PIXEL, \n    /** defines a boolean indicating if the value can be negative */\n    negativeValueAllowed = true) {\n        this.negativeValueAllowed = negativeValueAllowed;\n        this._value = 1;\n        this._unit = ValueAndUnit.UNITMODE_PIXEL;\n        /**\n         * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n         */\n        this.ignoreAdaptiveScaling = false;\n        /**\n         * Observable event triggered each time the value or unit changes\n         */\n        this.onChangedObservable = new Observable();\n        this._value = value;\n        this._unit = unit;\n        this._originalUnit = unit;\n    }\n    /** Gets a boolean indicating if the value is a percentage */\n    get isPercentage() {\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\n    }\n    /** Gets a boolean indicating if the value is store as pixel */\n    get isPixel() {\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\n    }\n    /**\n     * Gets value (without units)\n     * @deprecated use value property instead\n     */\n    get internalValue() {\n        return this._value;\n    }\n    /** Gets value (without units) */\n    get value() {\n        return this._value;\n    }\n    /** Sets value (without units) */\n    set value(value) {\n        if (value !== this._value) {\n            this._value = value;\n            this.onChangedObservable.notifyObservers();\n        }\n    }\n    /** Gets units (without value) */\n    get unit() {\n        return this._unit;\n    }\n    /** Sets units (without value) */\n    set unit(value) {\n        if (value !== this._unit) {\n            this._unit = value;\n            this.onChangedObservable.notifyObservers();\n        }\n    }\n    /**\n     * Gets value as pixel\n     * @param host defines the root host\n     * @param refValue defines the reference value for percentages\n     * @returns the value as pixel\n     */\n    getValueInPixel(host, refValue) {\n        if (this.isPixel) {\n            return this.getValue(host);\n        }\n        return this.getValue(host) * refValue;\n    }\n    /**\n     * Update the current value and unit.\n     * @param value defines the value to store\n     * @param unit defines the unit to store\n     * @returns the current ValueAndUnit\n     */\n    updateInPlace(value, unit = ValueAndUnit.UNITMODE_PIXEL) {\n        if (this.value !== value || this.unit !== unit) {\n            // set member variables to notify only once\n            this._value = value;\n            this._unit = unit;\n            this.onChangedObservable.notifyObservers();\n        }\n        return this;\n    }\n    /**\n     * Gets the value accordingly to its unit\n     * @param host  defines the root host\n     * @returns the value\n     */\n    getValue(host) {\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\n            let width = 0;\n            let height = 0;\n            if (host.idealWidth) {\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\n            }\n            if (host.idealHeight) {\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\n            }\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\n                return window.innerWidth < window.innerHeight ? width : height;\n            }\n            if (host.idealWidth) {\n                // horizontal\n                return width;\n            }\n            if (host.idealHeight) {\n                // vertical\n                return height;\n            }\n        }\n        return this._value;\n    }\n    /**\n     * Gets a string representation of the value\n     * @param host defines the root host\n     * @param decimals defines an optional number of decimals to display\n     * @returns a string\n     */\n    toString(host, decimals) {\n        switch (this._unit) {\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\n                const percentage = this.getValue(host) * 100;\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\n            }\n            case ValueAndUnit.UNITMODE_PIXEL: {\n                const pixels = this.getValue(host);\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\n            }\n        }\n        return this._unit.toString();\n    }\n    /**\n     * Store a value parsed from a string\n     * @param source defines the source string\n     * @returns true if the value was successfully parsed and updated\n     */\n    fromString(source) {\n        const match = ValueAndUnit._Regex.exec(source.toString());\n        if (!match || match.length === 0) {\n            return false;\n        }\n        let sourceValue = parseFloat(match[1]);\n        let sourceUnit = this._originalUnit;\n        if (!this.negativeValueAllowed) {\n            if (sourceValue < 0) {\n                sourceValue = 0;\n            }\n        }\n        if (match.length === 4) {\n            switch (match[3]) {\n                case \"px\":\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\n                    break;\n                case \"%\":\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\n                    sourceValue /= 100.0;\n                    break;\n            }\n        }\n        if (sourceValue === this._value && sourceUnit === this._unit) {\n            return false;\n        }\n        this._value = sourceValue;\n        this._unit = sourceUnit;\n        this.onChangedObservable.notifyObservers();\n        return true;\n    }\n    /** UNITMODE_PERCENTAGE */\n    static get UNITMODE_PERCENTAGE() {\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\n    }\n    /** UNITMODE_PIXEL */\n    static get UNITMODE_PIXEL() {\n        return ValueAndUnit._UNITMODE_PIXEL;\n    }\n}\n// Static\nValueAndUnit._Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\nValueAndUnit._UNITMODE_PERCENTAGE = 0;\nValueAndUnit._UNITMODE_PIXEL = 1;\n//# sourceMappingURL=valueAndUnit.js.map","import { Vector2 } from \"@babylonjs/core/Maths/math.vector.js\";\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\nconst tmpV1 = new Vector2(0, 0);\nconst tmpV2 = new Vector2(0, 0);\n/**\n * Class used to store 2D control sizes\n */\nexport class Measure {\n    /**\n     * Creates a new measure\n     * @param left defines left coordinate\n     * @param top defines top coordinate\n     * @param width defines width dimension\n     * @param height defines height dimension\n     */\n    constructor(\n    /** defines left coordinate */\n    left, \n    /** defines top coordinate  */\n    top, \n    /** defines width dimension  */\n    width, \n    /** defines height dimension */\n    height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Copy from another measure\n     * @param other defines the other measure to copy from\n     */\n    copyFrom(other) {\n        this.left = other.left;\n        this.top = other.top;\n        this.width = other.width;\n        this.height = other.height;\n    }\n    /**\n     * Copy from a group of 4 floats\n     * @param left defines left coordinate\n     * @param top defines top coordinate\n     * @param width defines width dimension\n     * @param height defines height dimension\n     */\n    copyFromFloats(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Computes the axis aligned bounding box measure for two given measures\n     * @param a Input measure\n     * @param b Input measure\n     * @param result the resulting bounding measure\n     */\n    static CombineToRef(a, b, result) {\n        const left = Math.min(a.left, b.left);\n        const top = Math.min(a.top, b.top);\n        const right = Math.max(a.left + a.width, b.left + b.width);\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\n        result.left = left;\n        result.top = top;\n        result.width = right - left;\n        result.height = bottom - top;\n    }\n    /**\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\n     * @param transform the matrix to transform the measure before computing the AABB\n     * @param addX number to add to left\n     * @param addY number to add to top\n     * @param addWidth number to add to width\n     * @param addHeight number to add to height\n     * @param result the resulting AABB\n     */\n    addAndTransformToRef(transform, addX, addY, addWidth, addHeight, result) {\n        const left = this.left + addX;\n        const top = this.top + addY;\n        const width = this.width + addWidth;\n        const height = this.height + addHeight;\n        tmpRect[0].copyFromFloats(left, top);\n        tmpRect[1].copyFromFloats(left + width, top);\n        tmpRect[2].copyFromFloats(left + width, top + height);\n        tmpRect[3].copyFromFloats(left, top + height);\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\n        tmpV2.copyFromFloats(0, 0);\n        for (let i = 0; i < 4; i++) {\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\n        }\n        result.left = tmpV1.x;\n        result.top = tmpV1.y;\n        result.width = tmpV2.x - tmpV1.x;\n        result.height = tmpV2.y - tmpV1.y;\n    }\n    /**\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\n     * @param transform the matrix to transform the measure before computing the AABB\n     * @param result the resulting AABB\n     */\n    transformToRef(transform, result) {\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\n    }\n    /**\n     * Check equality between this measure and another one\n     * @param other defines the other measures\n     * @returns true if both measures are equals\n     */\n    isEqualsTo(other) {\n        if (this.left !== other.left) {\n            return false;\n        }\n        if (this.top !== other.top) {\n            return false;\n        }\n        if (this.width !== other.width) {\n            return false;\n        }\n        if (this.height !== other.height) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Creates an empty measure\n     * @returns a new measure\n     */\n    static Empty() {\n        return new Measure(0, 0, 0, 0);\n    }\n}\n//# sourceMappingURL=measure.js.map","import { Vector2 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\n/**\n * Class used to transport Vector2 information for pointer events\n */\nexport class Vector2WithInfo extends Vector2 {\n    /**\n     * Creates a new Vector2WithInfo\n     * @param source defines the vector2 data to transport\n     * @param buttonIndex defines the current mouse button index\n     */\n    constructor(source, \n    /** defines the current mouse button index */\n    buttonIndex = 0) {\n        super(source.x, source.y);\n        this.buttonIndex = buttonIndex;\n    }\n}\n/** Class used to provide 2D matrix features */\nexport class Matrix2D {\n    /**\n     * Creates a new matrix\n     * @param m00 defines value for (0, 0)\n     * @param m01 defines value for (0, 1)\n     * @param m10 defines value for (1, 0)\n     * @param m11 defines value for (1, 1)\n     * @param m20 defines value for (2, 0)\n     * @param m21 defines value for (2, 1)\n     */\n    constructor(m00, m01, m10, m11, m20, m21) {\n        /** Gets the internal array of 6 floats used to store matrix data */\n        this.m = new Float32Array(6);\n        this.fromValues(m00, m01, m10, m11, m20, m21);\n    }\n    /**\n     * Fills the matrix from direct values\n     * @param m00 defines value for (0, 0)\n     * @param m01 defines value for (0, 1)\n     * @param m10 defines value for (1, 0)\n     * @param m11 defines value for (1, 1)\n     * @param m20 defines value for (2, 0)\n     * @param m21 defines value for (2, 1)\n     * @returns the current modified matrix\n     */\n    fromValues(m00, m01, m10, m11, m20, m21) {\n        this.m[0] = m00;\n        this.m[1] = m01;\n        this.m[2] = m10;\n        this.m[3] = m11;\n        this.m[4] = m20;\n        this.m[5] = m21;\n        return this;\n    }\n    /**\n     * Gets matrix determinant\n     * @returns the determinant\n     */\n    determinant() {\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\n    }\n    /**\n     * Inverses the matrix and stores it in a target matrix\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n    invertToRef(result) {\n        const l0 = this.m[0];\n        const l1 = this.m[1];\n        const l2 = this.m[2];\n        const l3 = this.m[3];\n        const l4 = this.m[4];\n        const l5 = this.m[5];\n        const det = this.determinant();\n        if (det < Epsilon * Epsilon) {\n            result.m[0] = 0;\n            result.m[1] = 0;\n            result.m[2] = 0;\n            result.m[3] = 0;\n            result.m[4] = 0;\n            result.m[5] = 0;\n            return this;\n        }\n        const detDiv = 1 / det;\n        const det4 = l2 * l5 - l3 * l4;\n        const det5 = l1 * l4 - l0 * l5;\n        result.m[0] = l3 * detDiv;\n        result.m[1] = -l1 * detDiv;\n        result.m[2] = -l2 * detDiv;\n        result.m[3] = l0 * detDiv;\n        result.m[4] = det4 * detDiv;\n        result.m[5] = det5 * detDiv;\n        return this;\n    }\n    /**\n     * Multiplies the current matrix with another one\n     * @param other defines the second operand\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n    multiplyToRef(other, result) {\n        const l0 = this.m[0];\n        const l1 = this.m[1];\n        const l2 = this.m[2];\n        const l3 = this.m[3];\n        const l4 = this.m[4];\n        const l5 = this.m[5];\n        const r0 = other.m[0];\n        const r1 = other.m[1];\n        const r2 = other.m[2];\n        const r3 = other.m[3];\n        const r4 = other.m[4];\n        const r5 = other.m[5];\n        result.m[0] = l0 * r0 + l1 * r2;\n        result.m[1] = l0 * r1 + l1 * r3;\n        result.m[2] = l2 * r0 + l3 * r2;\n        result.m[3] = l2 * r1 + l3 * r3;\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\n        return this;\n    }\n    /**\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\n     * @param x defines the x coordinate to transform\n     * @param y defines the x coordinate to transform\n     * @param result defines the target vector2\n     * @returns the current matrix\n     */\n    transformCoordinates(x, y, result) {\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\n        return this;\n    }\n    // Statics\n    /**\n     * Creates an identity matrix\n     * @returns a new matrix\n     */\n    static Identity() {\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\n    }\n    /**\n     * Creates an identity matrix and stores it in a target matrix\n     * @param result defines the target matrix\n     */\n    static IdentityToRef(result) {\n        result.m[0] = 1;\n        result.m[1] = 0;\n        result.m[2] = 0;\n        result.m[3] = 1;\n        result.m[4] = 0;\n        result.m[5] = 0;\n    }\n    /**\n     * Creates a translation matrix and stores it in a target matrix\n     * @param x defines the x coordinate of the translation\n     * @param y defines the y coordinate of the translation\n     * @param result defines the target matrix\n     */\n    static TranslationToRef(x, y, result) {\n        result.fromValues(1, 0, 0, 1, x, y);\n    }\n    /**\n     * Creates a scaling matrix and stores it in a target matrix\n     * @param x defines the x coordinate of the scaling\n     * @param y defines the y coordinate of the scaling\n     * @param result defines the target matrix\n     */\n    static ScalingToRef(x, y, result) {\n        result.fromValues(x, 0, 0, y, 0, 0);\n    }\n    /**\n     * Creates a rotation matrix and stores it in a target matrix\n     * @param angle defines the rotation angle\n     * @param result defines the target matrix\n     */\n    static RotationToRef(angle, result) {\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        result.fromValues(c, s, -s, c, 0, 0);\n    }\n    /**\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\n     * @param tx defines the x coordinate of the translation\n     * @param ty defines the y coordinate of the translation\n     * @param angle defines the rotation angle\n     * @param scaleX defines the x coordinate of the scaling\n     * @param scaleY defines the y coordinate of the scaling\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\n     * @param result defines the target matrix\n     */\n    static ComposeToRef(tx, ty, angle, scaleX, scaleY, parentMatrix, result) {\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\n        if (parentMatrix) {\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\n        }\n        else {\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\n        }\n    }\n}\nMatrix2D._TempPreTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempPostTranslationMatrix = Matrix2D.Identity();\nMatrix2D._TempRotationMatrix = Matrix2D.Identity();\nMatrix2D._TempScalingMatrix = Matrix2D.Identity();\nMatrix2D._TempCompose0 = Matrix2D.Identity();\nMatrix2D._TempCompose1 = Matrix2D.Identity();\nMatrix2D._TempCompose2 = Matrix2D.Identity();\n/**\n * Useful math functions\n */\nexport class MathTools {\n    /**\n     * Rounds a number to the nearest multiple of a given precision\n     * @param value the value to be rounded\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\n     * @returns\n     */\n    static Round(value, precision = MathTools.DefaultRoundingPrecision) {\n        return Math.round(value * precision) / precision;\n    }\n}\n/**\n * Default rounding precision for GUI elements. It should be\n * set to a power of ten, where the exponent means the number\n * of decimal digits to round to, i.e, 100 means 2 decimal digits,\n * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\n */\nMathTools.DefaultRoundingPrecision = 100;\n//# sourceMappingURL=math2D.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector2, Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Measure } from \"../measure.js\";\nimport { Matrix2D, Vector2WithInfo } from \"../math2D.js\";\nimport { GetClass, RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Root class used for all 2D controls\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\n */\nexport class Control {\n    /**\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\n     * A readonly control will still raise pointer events but will not react to them\n     */\n    get isReadOnly() {\n        return this._isReadOnly;\n    }\n    set isReadOnly(value) {\n        this._isReadOnly = value;\n    }\n    /**\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\n     */\n    get transformedMeasure() {\n        return this._evaluatedMeasure;\n    }\n    /**\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    set clipChildren(value) {\n        this._clipChildren = value;\n    }\n    get clipChildren() {\n        return this._clipChildren;\n    }\n    /**\n     * Sets/Gets a boolean indicating that control content must be clipped\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    set clipContent(value) {\n        this._clipContent = value;\n    }\n    get clipContent() {\n        return this._clipContent;\n    }\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n    set shadowOffsetX(value) {\n        if (this._shadowOffsetX === value) {\n            return;\n        }\n        this._shadowOffsetX = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n    set shadowOffsetY(value) {\n        if (this._shadowOffsetY === value) {\n            return;\n        }\n        this._shadowOffsetY = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n    set shadowBlur(value) {\n        if (this._shadowBlur === value) {\n            return;\n        }\n        this._previousShadowBlur = this._shadowBlur;\n        this._shadowBlur = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\n    get shadowColor() {\n        return this._shadowColor;\n    }\n    set shadowColor(value) {\n        if (this._shadowColor === value) {\n            return;\n        }\n        this._shadowColor = value;\n        this._markAsDirty();\n    }\n    // Properties\n    /** Gets the control type name */\n    get typeName() {\n        return this._getTypeName();\n    }\n    /**\n     * Get the current class name of the control.\n     * @returns current class name\n     */\n    getClassName() {\n        return this._getTypeName();\n    }\n    /**\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\n     */\n    set accessibilityTag(value) {\n        this._accessibilityTag = value;\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\n    }\n    get accessibilityTag() {\n        return this._accessibilityTag;\n    }\n    /**\n     * Get the hosting AdvancedDynamicTexture\n     */\n    get host() {\n        return this._host;\n    }\n    /** Gets or set information about font offsets (used to render and align text) */\n    get fontOffset() {\n        return this._fontOffset;\n    }\n    set fontOffset(offset) {\n        this._fontOffset = offset;\n    }\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\n    get alpha() {\n        return this._alpha;\n    }\n    set alpha(value) {\n        if (this._alpha === value) {\n            return;\n        }\n        this._alphaSet = true;\n        this._alpha = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\n     */\n    get highlightLineWidth() {\n        return this._highlightLineWidth;\n    }\n    set highlightLineWidth(value) {\n        if (this._highlightLineWidth === value) {\n            return;\n        }\n        this._highlightLineWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\n     */\n    get isHighlighted() {\n        return this._isHighlighted;\n    }\n    set isHighlighted(value) {\n        if (this._isHighlighted === value) {\n            return;\n        }\n        this._isHighlighted = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a string defining the color to use for highlighting this control\n     */\n    get highlightColor() {\n        return this._highlightColor;\n    }\n    set highlightColor(value) {\n        if (this._highlightColor === value) {\n            return;\n        }\n        this._highlightColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get scaleX() {\n        return this._scaleX;\n    }\n    set scaleX(value) {\n        if (this._scaleX === value) {\n            return;\n        }\n        this._scaleX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get scaleY() {\n        return this._scaleY;\n    }\n    set scaleY(value) {\n        if (this._scaleY === value) {\n            return;\n        }\n        this._scaleY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the rotation angle (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        if (this._rotation === value) {\n            return;\n        }\n        this._rotation = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the transformation center on Y axis (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get transformCenterY() {\n        return this._transformCenterY;\n    }\n    set transformCenterY(value) {\n        if (this._transformCenterY === value) {\n            return;\n        }\n        this._transformCenterY = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /** Gets or sets the transformation center on X axis (0 by default)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\n     */\n    get transformCenterX() {\n        return this._transformCenterX;\n    }\n    set transformCenterX(value) {\n        if (this._transformCenterX === value) {\n            return;\n        }\n        this._transformCenterX = value;\n        this._markAsDirty();\n        this._markMatrixAsDirty();\n    }\n    /**\n     * Gets or sets the horizontal alignment\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n     */\n    get horizontalAlignment() {\n        return this._horizontalAlignment;\n    }\n    set horizontalAlignment(value) {\n        if (this._horizontalAlignment === value) {\n            return;\n        }\n        this._horizontalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the vertical alignment\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\n     */\n    get verticalAlignment() {\n        return this._verticalAlignment;\n    }\n    set verticalAlignment(value) {\n        if (this._verticalAlignment === value) {\n            return;\n        }\n        this._verticalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets control width\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get width() {\n        return this._width.toString(this._host);\n    }\n    set width(value) {\n        this._fixedRatioMasterIsWidth = true;\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets the control width in pixel\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get widthInPixels() {\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set widthInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = true;\n        this.width = value + \"px\";\n    }\n    /**\n     * Gets or sets control height\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get height() {\n        return this._height.toString(this._host);\n    }\n    set height(value) {\n        this._fixedRatioMasterIsWidth = false;\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets control height in pixel\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get heightInPixels() {\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set heightInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this._fixedRatioMasterIsWidth = false;\n        this.height = value + \"px\";\n    }\n    /** Gets or set font family */\n    get fontFamily() {\n        return this._fontFamily;\n    }\n    set fontFamily(value) {\n        if (this._fontFamily === value) {\n            return;\n        }\n        this._fontFamily = value;\n        this._resetFontCache();\n    }\n    /** Gets or sets font style */\n    get fontStyle() {\n        return this._fontStyle;\n    }\n    set fontStyle(value) {\n        if (this._fontStyle === value) {\n            return;\n        }\n        this._fontStyle = value;\n        this._resetFontCache();\n    }\n    /** Gets or sets font weight */\n    get fontWeight() {\n        return this._fontWeight;\n    }\n    set fontWeight(value) {\n        if (this._fontWeight === value) {\n            return;\n        }\n        this._fontWeight = value;\n        this._resetFontCache();\n    }\n    /**\n     * Gets or sets style\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\n     */\n    get style() {\n        return this._style;\n    }\n    set style(value) {\n        if (this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n        this._style = value;\n        if (this._style) {\n            this._styleObserver = this._style.onChangedObservable.add(() => {\n                this._markAsDirty();\n                this._resetFontCache();\n            });\n        }\n        this._markAsDirty();\n        this._resetFontCache();\n    }\n    /** @internal */\n    get _isFontSizeInPercentage() {\n        return this._fontSize.isPercentage;\n    }\n    /** Gets or sets font size in pixels */\n    get fontSizeInPixels() {\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\n        if (fontSizeToUse.isPixel) {\n            return fontSizeToUse.getValue(this._host);\n        }\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\n    }\n    set fontSizeInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.fontSize = value + \"px\";\n    }\n    /** Gets or sets font size */\n    get fontSize() {\n        return this._fontSize.toString(this._host);\n    }\n    set fontSize(value) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n        if (this._fontSize.fromString(value)) {\n            this._markAsDirty();\n            this._resetFontCache();\n        }\n    }\n    /** Gets or sets foreground color */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        if (this._color === value) {\n            return;\n        }\n        this._color = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets gradient. Setting a gradient will override the color */\n    get gradient() {\n        return this._gradient;\n    }\n    set gradient(value) {\n        if (this._gradient === value) {\n            return;\n        }\n        this._gradient = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets z index which is used to reorder controls on the z axis */\n    get zIndex() {\n        return this._zIndex;\n    }\n    set zIndex(value) {\n        if (this.zIndex === value) {\n            return;\n        }\n        this._zIndex = value;\n        if (this.parent) {\n            this.parent._reOrderControl(this);\n        }\n    }\n    /** Gets or sets a boolean indicating if the control can be rendered */\n    get notRenderable() {\n        return this._doNotRender;\n    }\n    set notRenderable(value) {\n        if (this._doNotRender === value) {\n            return;\n        }\n        this._doNotRender = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the control is visible */\n    get isVisible() {\n        return this._isVisible;\n    }\n    set isVisible(value) {\n        if (this._isVisible === value) {\n            return;\n        }\n        this._isVisible = value;\n        this._markAsDirty(true);\n        this.onIsVisibleChangedObservable.notifyObservers(value);\n    }\n    /** Gets a boolean indicating that the control needs to update its rendering */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * Gets the current linked mesh (or null if none)\n     */\n    get linkedMesh() {\n        return this._linkedMesh;\n    }\n    /**\n     * Gets or sets a value indicating the padding should work like in CSS.\n     * Basically, it will add the padding amount on each side of the parent control for its children.\n     */\n    get descendantsOnlyPadding() {\n        return this._descendantsOnlyPadding;\n    }\n    set descendantsOnlyPadding(value) {\n        if (this._descendantsOnlyPadding === value) {\n            return;\n        }\n        this._descendantsOnlyPadding = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the left of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingLeft() {\n        return this._paddingLeft.toString(this._host);\n    }\n    set paddingLeft(value) {\n        if (this._paddingLeft.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingLeftInPixels() {\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set paddingLeftInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingLeft = value + \"px\";\n    }\n    /** @internal */\n    get _paddingLeftInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingLeftInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the right of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingRight() {\n        return this._paddingRight.toString(this._host);\n    }\n    set paddingRight(value) {\n        if (this._paddingRight.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingRightInPixels() {\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set paddingRightInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingRight = value + \"px\";\n    }\n    /** @internal */\n    get _paddingRightInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingRightInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the top of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingTop() {\n        return this._paddingTop.toString(this._host);\n    }\n    set paddingTop(value) {\n        if (this._paddingTop.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingTopInPixels() {\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set paddingTopInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingTop = value + \"px\";\n    }\n    /** @internal */\n    get _paddingTopInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingTopInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the padding to use on the bottom of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingBottom() {\n        return this._paddingBottom.toString(this._host);\n    }\n    set paddingBottom(value) {\n        if (this._paddingBottom.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get paddingBottomInPixels() {\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set paddingBottomInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.paddingBottom = value + \"px\";\n    }\n    /** @internal */\n    get _paddingBottomInPixels() {\n        if (this._descendantsOnlyPadding) {\n            return 0;\n        }\n        return this.paddingBottomInPixels;\n    }\n    /**\n     * Gets or sets a value indicating the left coordinate of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get left() {\n        return this._left.toString(this._host);\n    }\n    set left(value) {\n        if (this._left.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the left coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get leftInPixels() {\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set leftInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.left = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the top coordinate of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get top() {\n        return this._top.toString(this._host);\n    }\n    set top(value) {\n        if (this._top.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the top coordinate in pixels of the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get topInPixels() {\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set topInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.top = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetX() {\n        return this._linkOffsetX.toString(this._host);\n    }\n    set linkOffsetX(value) {\n        if (this._linkOffsetX.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetXInPixels() {\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set linkOffsetXInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetX = value + \"px\";\n    }\n    /**\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetY() {\n        return this._linkOffsetY.toString(this._host);\n    }\n    set linkOffsetY(value) {\n        if (this._linkOffsetY.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    get linkOffsetYInPixels() {\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set linkOffsetYInPixels(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        this.linkOffsetY = value + \"px\";\n    }\n    /** Gets the center coordinate on X axis */\n    get centerX() {\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\n    }\n    /** Gets the center coordinate on Y axis */\n    get centerY() {\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\n    }\n    /** Gets or sets if control is Enabled */\n    get isEnabled() {\n        return this._isEnabled;\n    }\n    set isEnabled(value) {\n        if (this._isEnabled === value) {\n            return;\n        }\n        this._isEnabled = value;\n        this._markAsDirty();\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\n        const recursivelyFirePointerOut = (control) => {\n            if (!control.host) {\n                return;\n            }\n            for (const pointer in control.host._lastControlOver) {\n                if (control === this.host._lastControlOver[pointer]) {\n                    control._onPointerOut(control, null, true);\n                    delete control.host._lastControlOver[pointer];\n                }\n            }\n            if (control.children !== undefined) {\n                control.children.forEach(recursivelyFirePointerOut);\n            }\n        };\n        recursivelyFirePointerOut(this);\n    }\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\n    get disabledColor() {\n        return this._disabledColor;\n    }\n    set disabledColor(value) {\n        if (this._disabledColor === value) {\n            return;\n        }\n        this._disabledColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\n    get disabledColorItem() {\n        return this._disabledColorItem;\n    }\n    set disabledColorItem(value) {\n        if (this._disabledColorItem === value) {\n            return;\n        }\n        this._disabledColorItem = value;\n        this._markAsDirty();\n    }\n    // Functions\n    /**\n     * Creates a new control\n     * @param name defines the name of the control\n     */\n    constructor(\n    /** defines the name of the control */\n    name) {\n        this.name = name;\n        this._alpha = 1;\n        this._alphaSet = false;\n        this._zIndex = 0;\n        /** @internal */\n        this._currentMeasure = Measure.Empty();\n        /** @internal */\n        this._tempPaddingMeasure = Measure.Empty();\n        this._fontFamily = \"Arial\";\n        this._fontStyle = \"\";\n        this._fontWeight = \"\";\n        this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n        /** @internal */\n        this._width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        /** @internal */\n        this._height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        this._color = \"\";\n        this._style = null;\n        /** @internal */\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        /** @internal */\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        /** @internal */\n        this._isDirty = true;\n        /** @internal */\n        this._wasDirty = false;\n        /** @internal */\n        this._tempParentMeasure = Measure.Empty();\n        /** @internal */\n        this._prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\n        /** @internal */\n        this._cachedParentMeasure = Measure.Empty();\n        this._descendantsOnlyPadding = false;\n        this._paddingLeft = new ValueAndUnit(0);\n        this._paddingRight = new ValueAndUnit(0);\n        this._paddingTop = new ValueAndUnit(0);\n        this._paddingBottom = new ValueAndUnit(0);\n        /** @internal */\n        this._left = new ValueAndUnit(0);\n        /** @internal */\n        this._top = new ValueAndUnit(0);\n        this._scaleX = 1.0;\n        this._scaleY = 1.0;\n        this._rotation = 0;\n        this._transformCenterX = 0.5;\n        this._transformCenterY = 0.5;\n        /** @internal */\n        this._transformMatrix = Matrix2D.Identity();\n        /** @internal */\n        this._invertTransformMatrix = Matrix2D.Identity();\n        /** @internal */\n        this._transformedPosition = Vector2.Zero();\n        this._isMatrixDirty = true;\n        this._isVisible = true;\n        this._isHighlighted = false;\n        this._highlightColor = \"#4affff\";\n        this._highlightLineWidth = 2;\n        this._fontSet = false;\n        this._dummyVector2 = Vector2.Zero();\n        this._downCount = 0;\n        this._enterCount = -1;\n        this._doNotRender = false;\n        this._downPointerIds = {};\n        this._evaluatedMeasure = new Measure(0, 0, 0, 0);\n        this._evaluatedParentMeasure = new Measure(0, 0, 0, 0);\n        this._isEnabled = true;\n        this._disabledColor = \"#9a9a9a\";\n        this._disabledColorItem = \"#6a6a6a\";\n        this._isReadOnly = false;\n        this._gradient = null;\n        /** @internal */\n        this._rebuildLayout = false;\n        /** @internal */\n        this._customData = {};\n        /** @internal */\n        this._isClipped = false;\n        /** @internal */\n        this._automaticSize = false;\n        /**\n         * Gets or sets an object used to store user defined information for the node\n         */\n        this.metadata = null;\n        /** Gets or sets a boolean indicating if the control can be hit with pointer events */\n        this.isHitTestVisible = true;\n        /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\n         * * Button controls (Button, RadioButton, ToggleButton)\n         * * Checkbox\n         * * ColorPicker\n         * * InputText\n         * * Slider\n         */\n        this.isPointerBlocker = false;\n        /** Gets or sets a boolean indicating if the control can be focusable */\n        this.isFocusInvisible = false;\n        this._clipChildren = true;\n        this._clipContent = true;\n        /**\n         * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\n         */\n        this.useBitmapCache = false;\n        this._shadowOffsetX = 0;\n        this._shadowOffsetY = 0;\n        this._shadowBlur = 0;\n        this._previousShadowBlur = 0;\n        this._shadowColor = \"black\";\n        /** Gets or sets the cursor to use when the control is hovered */\n        this.hoverCursor = \"\";\n        /** @internal */\n        this._linkOffsetX = new ValueAndUnit(0);\n        /** @internal */\n        this._linkOffsetY = new ValueAndUnit(0);\n        this._accessibilityTag = null;\n        this.onAccessibilityTagChangedObservable = new Observable();\n        /**\n         * An event triggered when pointer wheel is scrolled\n         */\n        this.onWheelObservable = new Observable();\n        /**\n         * An event triggered when the pointer moves over the control.\n         */\n        this.onPointerMoveObservable = new Observable();\n        /**\n         * An event triggered when the pointer moves out of the control.\n         */\n        this.onPointerOutObservable = new Observable();\n        /**\n         * An event triggered when the pointer taps the control\n         */\n        this.onPointerDownObservable = new Observable();\n        /**\n         * An event triggered when pointer up\n         */\n        this.onPointerUpObservable = new Observable();\n        /**\n         * An event triggered when a control is clicked on\n         */\n        this.onPointerClickObservable = new Observable();\n        /**\n         * An event triggered when pointer enters the control\n         */\n        this.onPointerEnterObservable = new Observable();\n        /**\n         * An event triggered when the control is marked as dirty\n         */\n        this.onDirtyObservable = new Observable();\n        /**\n         * An event triggered before drawing the control\n         */\n        this.onBeforeDrawObservable = new Observable();\n        /**\n         * An event triggered after the control was drawn\n         */\n        this.onAfterDrawObservable = new Observable();\n        /**\n         * An event triggered when the control has been disposed\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered when the control isVisible is changed\n         */\n        this.onIsVisibleChangedObservable = new Observable();\n        /**\n         * Gets or sets a fixed ratio for this control.\n         * When different from 0, the ratio is used to compute the \"second\" dimension.\n         * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\n         * second dimension is computed as first dimension * fixedRatio\n         */\n        this.fixedRatio = 0;\n        this._fixedRatioMasterIsWidth = true;\n        /**\n         * Array of animations\n         */\n        this.animations = null;\n        this._tmpMeasureA = new Measure(0, 0, 0, 0);\n    }\n    /** @internal */\n    _getTypeName() {\n        return \"Control\";\n    }\n    /**\n     * Gets the first ascendant in the hierarchy of the given type\n     * @param className defines the required type\n     * @returns the ascendant or null if not found\n     */\n    getAscendantOfClass(className) {\n        if (!this.parent) {\n            return null;\n        }\n        if (this.parent.getClassName() === className) {\n            return this.parent;\n        }\n        return this.parent.getAscendantOfClass(className);\n    }\n    /**\n     * Mark control element as dirty\n     * @param force force non visible elements to be marked too\n     */\n    markAsDirty(force = false) {\n        this._markAsDirty(force);\n    }\n    /**\n     * Mark the element and its children as dirty\n     */\n    markAllAsDirty() {\n        this._markAllAsDirty();\n    }\n    /** @internal */\n    _resetFontCache() {\n        this._fontSet = true;\n        this._markAsDirty();\n    }\n    /**\n     * Determines if a container is an ascendant of the current control\n     * @param container defines the container to look for\n     * @returns true if the container is one of the ascendant of the control\n     */\n    isAscendant(container) {\n        if (!this.parent) {\n            return false;\n        }\n        if (this.parent === container) {\n            return true;\n        }\n        return this.parent.isAscendant(container);\n    }\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in local space\n     */\n    getLocalCoordinates(globalCoordinates) {\n        const result = Vector2.Zero();\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\n        return result;\n    }\n    /**\n     * Gets coordinates in local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @param result defines the target vector2 where to store the result\n     * @returns the current control\n     */\n    getLocalCoordinatesToRef(globalCoordinates, result) {\n        result.x = globalCoordinates.x - this._currentMeasure.left;\n        result.y = globalCoordinates.y - this._currentMeasure.top;\n        return this;\n    }\n    /**\n     * Gets coordinates in parent local control space\n     * @param globalCoordinates defines the coordinates to transform\n     * @returns the new coordinates in parent local space\n     */\n    getParentLocalCoordinates(globalCoordinates) {\n        const result = Vector2.Zero();\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\n        return result;\n    }\n    /**\n     * Move the current control to a vector3 position projected onto the screen.\n     * @param position defines the target position\n     * @param scene defines the hosting scene\n     */\n    moveToVector3(position, scene) {\n        if (!this._host || this.parent !== this._host._rootContainer) {\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n            return;\n        }\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        const globalViewport = this._host._getGlobalViewport();\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\n        this._moveToProjectedPosition(projectedPosition);\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n            this.notRenderable = true;\n            return;\n        }\n        this.notRenderable = false;\n    }\n    /**\n     * Will store all controls that have this control as ascendant in a given array\n     * @param results defines the array where to store the descendants\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     */\n    getDescendantsToRef(results, directDescendantsOnly = false, predicate) {\n        // Do nothing by default\n    }\n    /**\n     * Will return all controls that have this control as ascendant\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns all child controls\n     */\n    getDescendants(directDescendantsOnly, predicate) {\n        const results = new Array();\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\n        return results;\n    }\n    /**\n     * Link current control with a target mesh\n     * @param mesh defines the mesh to link with\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\n     */\n    linkWithMesh(mesh) {\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\n            if (mesh) {\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\n            }\n            return;\n        }\n        const index = this._host._linkedControls.indexOf(this);\n        if (index !== -1) {\n            this._linkedMesh = mesh;\n            if (!mesh) {\n                this._host._linkedControls.splice(index, 1);\n            }\n            return;\n        }\n        else if (!mesh) {\n            return;\n        }\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._linkedMesh = mesh;\n        this._host._linkedControls.push(this);\n    }\n    /**\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\n     * @param { string | number} paddingTop - The value of the top padding.\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    setPadding(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n        const top = paddingTop;\n        const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n        const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n        const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n        this.paddingTop = top;\n        this.paddingRight = right;\n        this.paddingBottom = bottom;\n        this.paddingLeft = left;\n    }\n    /**\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\n     * @param { number} paddingTop - The value in pixels of the top padding.\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    setPaddingInPixels(paddingTop, paddingRight, paddingBottom, paddingLeft) {\n        const top = paddingTop;\n        const right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;\n        const bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;\n        const left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;\n        this.paddingTopInPixels = top;\n        this.paddingRightInPixels = right;\n        this.paddingBottomInPixels = bottom;\n        this.paddingLeftInPixels = left;\n    }\n    /**\n     * @internal\n     */\n    _moveToProjectedPosition(projectedPosition) {\n        var _a;\n        const oldLeft = this._left.getValue(this._host);\n        const oldTop = this._top.getValue(this._host);\n        const parentMeasure = (_a = this.parent) === null || _a === void 0 ? void 0 : _a._currentMeasure;\n        if (parentMeasure) {\n            this._processMeasures(parentMeasure, this._host.getContext());\n        }\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\n        if (leftAndTopIgnoreAdaptiveScaling) {\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\n                newLeft = oldLeft;\n            }\n            if (Math.abs(newTop - oldTop) < 0.5) {\n                newTop = oldTop;\n            }\n        }\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\n            return;\n        }\n        this.left = newLeft + \"px\";\n        this.top = newTop + \"px\";\n        this._left.ignoreAdaptiveScaling = true;\n        this._top.ignoreAdaptiveScaling = true;\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _offsetLeft(offset) {\n        this._isDirty = true;\n        this._currentMeasure.left += offset;\n    }\n    /**\n     * @internal\n     */\n    _offsetTop(offset) {\n        this._isDirty = true;\n        this._currentMeasure.top += offset;\n    }\n    /** @internal */\n    _markMatrixAsDirty() {\n        this._isMatrixDirty = true;\n        this._flagDescendantsAsMatrixDirty();\n    }\n    /** @internal */\n    _flagDescendantsAsMatrixDirty() {\n        // No child\n    }\n    /**\n     * @internal\n     */\n    _intersectsRect(rect, context) {\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\n        this._transform(context);\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\n            return false;\n        }\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\n            return false;\n        }\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\n            return false;\n        }\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\n            return false;\n        }\n        return true;\n    }\n    /** @internal */\n    _computeAdditionnalOffsetX() {\n        return 0;\n    }\n    /** @internal */\n    _computeAdditionnalOffsetY() {\n        return 0;\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    invalidateRect() {\n        this._transform();\n        if (this.host && this.host.useInvalidateRectOptimization) {\n            // Rotate by transform to get the measure transformed to global space\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\n            // the previous measure is used to properly clear a control that is scaled down\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\n            // Expand rect based on shadows\n            const shadowOffsetX = this.shadowOffsetX;\n            const shadowOffsetY = this.shadowOffsetY;\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n            const offsetX = this._computeAdditionnalOffsetX();\n            const offsetY = this._computeAdditionnalOffsetY();\n            this.host.invalidateRect(Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX), Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY), Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX), Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY));\n        }\n    }\n    /**\n     * @internal\n     */\n    _markAsDirty(force = false) {\n        if (!this._isVisible && !force) {\n            return;\n        }\n        this._isDirty = true;\n        this._markMatrixAsDirty();\n        // Redraw only this rectangle\n        if (this._host) {\n            this._host.markAsDirty();\n        }\n    }\n    /** @internal */\n    _markAllAsDirty() {\n        this._markAsDirty();\n        if (this._font) {\n            this._prepareFont();\n        }\n    }\n    /**\n     * @internal\n     */\n    _link(host) {\n        this._host = host;\n        if (this._host) {\n            this.uniqueId = this._host.getScene().getUniqueId();\n        }\n    }\n    /**\n     * @internal\n     */\n    _transform(context) {\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\n            return;\n        }\n        // postTranslate\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\n        if (context) {\n            context.translate(offsetX, offsetY);\n            // rotate\n            context.rotate(this._rotation);\n            // scale\n            context.scale(this._scaleX, this._scaleY);\n            // preTranslate\n            context.translate(-offsetX, -offsetY);\n        }\n        // Need to update matrices?\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\n            this._cachedOffsetX = offsetX;\n            this._cachedOffsetY = offsetY;\n            this._isMatrixDirty = false;\n            this._flagDescendantsAsMatrixDirty();\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        }\n    }\n    /**\n     * @internal\n     */\n    _renderHighlight(context) {\n        if (!this.isHighlighted) {\n            return;\n        }\n        context.save();\n        context.strokeStyle = this._highlightColor;\n        context.lineWidth = this._highlightLineWidth;\n        this._renderHighlightSpecific(context);\n        context.restore();\n    }\n    /**\n     * @internal\n     */\n    _renderHighlightSpecific(context) {\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n    }\n    _getColor(context) {\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\n    }\n    /**\n     * @internal\n     */\n    _applyStates(context) {\n        if (this._isFontSizeInPercentage) {\n            this._fontSet = true;\n        }\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\n            this._fontSet = true;\n        }\n        if (this._fontSet) {\n            this._prepareFont();\n            this._fontSet = false;\n        }\n        if (this._font) {\n            context.font = this._font;\n        }\n        if (this._color || this.gradient) {\n            context.fillStyle = this._getColor(context);\n        }\n        if (Control.AllowAlphaInheritance) {\n            context.globalAlpha *= this._alpha;\n        }\n        else if (this._alphaSet) {\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\n        }\n    }\n    /**\n     * @internal\n     */\n    _layout(parentMeasure, context) {\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            this.host._numLayoutCalls++;\n            this._currentMeasure.addAndTransformToRef(this._transformMatrix, -this._paddingLeftInPixels | 0, -this._paddingTopInPixels | 0, this._paddingRightInPixels | 0, this._paddingBottomInPixels | 0, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n            context.save();\n            this._applyStates(context);\n            let rebuildCount = 0;\n            do {\n                this._rebuildLayout = false;\n                this._processMeasures(parentMeasure, context);\n                rebuildCount++;\n            } while (this._rebuildLayout && rebuildCount < 3);\n            if (rebuildCount >= 3) {\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\n            }\n            context.restore();\n            this.invalidateRect();\n            this._evaluateClippingState(parentMeasure);\n        }\n        this._wasDirty = this._isDirty;\n        this._isDirty = false;\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _processMeasures(parentMeasure, context) {\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\n        // Apply padding if in correct mode\n        if (this.parent && this.parent.descendantsOnlyPadding) {\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\n        }\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\n        // Let children take some pre-measurement actions\n        this._preMeasure(this._tempPaddingMeasure, context);\n        this._measure();\n        this._computeAlignment(this._tempPaddingMeasure, context);\n        // Convert to int values\n        this._currentMeasure.left = this._currentMeasure.left | 0;\n        this._currentMeasure.top = this._currentMeasure.top | 0;\n        this._currentMeasure.width = this._currentMeasure.width | 0;\n        this._currentMeasure.height = this._currentMeasure.height | 0;\n        // Let children add more features\n        this._additionalProcessing(this._tempPaddingMeasure, context);\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        if (this.onDirtyObservable.hasObservers()) {\n            this.onDirtyObservable.notifyObservers(this);\n        }\n    }\n    _evaluateClippingState(parentMeasure) {\n        // Since transformMatrix is used here, we need to have it freshly computed\n        this._transform();\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\n        if (this.parent && this.parent.clipChildren) {\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\n            // Early clip\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\n                this._isClipped = true;\n                return;\n            }\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\n                this._isClipped = true;\n                return;\n            }\n        }\n        this._isClipped = false;\n    }\n    /** @internal */\n    _measure() {\n        // Width / Height\n        if (this._width.isPixel) {\n            this._currentMeasure.width = this._width.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.width *= this._width.getValue(this._host);\n        }\n        if (this._height.isPixel) {\n            this._currentMeasure.height = this._height.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.height *= this._height.getValue(this._host);\n        }\n        if (this.fixedRatio !== 0) {\n            if (this._fixedRatioMasterIsWidth) {\n                this._currentMeasure.height = this._currentMeasure.width * this.fixedRatio;\n            }\n            else {\n                this._currentMeasure.width = this._currentMeasure.height * this.fixedRatio;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _computeAlignment(parentMeasure, context) {\n        const width = this._currentMeasure.width;\n        const height = this._currentMeasure.height;\n        const parentWidth = parentMeasure.width;\n        const parentHeight = parentMeasure.height;\n        // Left / top\n        let x = 0;\n        let y = 0;\n        switch (this.horizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = parentWidth - width;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (parentWidth - width) / 2;\n                break;\n        }\n        switch (this.verticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                y = 0;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                y = parentHeight - height;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                y = (parentHeight - height) / 2;\n                break;\n        }\n        if (!this.descendantsOnlyPadding) {\n            if (this._paddingLeft.isPixel) {\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\n            }\n            if (this._paddingRight.isPixel) {\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\n            }\n            if (this._paddingTop.isPixel) {\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\n            }\n            if (this._paddingBottom.isPixel) {\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\n            }\n            else {\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\n            }\n        }\n        if (this._left.isPixel) {\n            this._currentMeasure.left += this._left.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\n        }\n        if (this._top.isPixel) {\n            this._currentMeasure.top += this._top.getValue(this._host);\n        }\n        else {\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\n        }\n        this._currentMeasure.left += x;\n        this._currentMeasure.top += y;\n    }\n    /**\n     * @internal\n     */\n    _preMeasure(parentMeasure, context) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _additionalProcessing(parentMeasure, context) {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _clipForChildren(context) {\n        // DO nothing\n    }\n    _clip(context, invalidatedRectangle) {\n        context.beginPath();\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\n        if (invalidatedRectangle) {\n            // Rotate the invalidated rect into the control's space\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\n            // Get the intersection of the rect in context space and the current context\n            const intersection = new Measure(0, 0, 0, 0);\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\n            Control._ClipMeasure.copyFrom(intersection);\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            const shadowOffsetX = this.shadowOffsetX;\n            const shadowOffsetY = this.shadowOffsetY;\n            const shadowBlur = this.shadowBlur;\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\n            context.rect(Control._ClipMeasure.left + leftShadowOffset, Control._ClipMeasure.top + topShadowOffset, Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset, Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset);\n        }\n        else {\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\n        }\n        context.clip();\n    }\n    /**\n     * @internal\n     */\n    _render(context, invalidatedRectangle) {\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\n            this._isDirty = false;\n            return false;\n        }\n        this.host._numRenderCalls++;\n        context.save();\n        this._applyStates(context);\n        // Transform\n        this._transform(context);\n        // Clip\n        if (this.clipContent) {\n            this._clip(context, invalidatedRectangle);\n        }\n        if (this.onBeforeDrawObservable.hasObservers()) {\n            this.onBeforeDrawObservable.notifyObservers(this);\n        }\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\n        }\n        else {\n            this._draw(context, invalidatedRectangle);\n        }\n        if (this.useBitmapCache && this._wasDirty) {\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n        this._renderHighlight(context);\n        if (this.onAfterDrawObservable.hasObservers()) {\n            this.onAfterDrawObservable.notifyObservers(this);\n        }\n        context.restore();\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _draw(context, invalidatedRectangle) {\n        // Do nothing\n    }\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    contains(x, y) {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n        x = this._transformedPosition.x;\n        y = this._transformedPosition.y;\n        // Check\n        if (x < this._currentMeasure.left) {\n            return false;\n        }\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\n            return false;\n        }\n        if (y < this._currentMeasure.top) {\n            return false;\n        }\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\n            return false;\n        }\n        if (this.isPointerBlocker) {\n            this._host._shouldBlockPointer = true;\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\n            return false;\n        }\n        if (!this.contains(x, y)) {\n            return false;\n        }\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        const canNotify = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerEnter(target, pi) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        if (this._enterCount > 0) {\n            return false;\n        }\n        if (this._enterCount === -1) {\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\n            this._enterCount = 0;\n        }\n        this._enterCount++;\n        const canNotify = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerEnter(target, pi);\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerOut(target, pi, force = false) {\n        if (!force && (!this._isEnabled || target === this)) {\n            return;\n        }\n        this._enterCount = 0;\n        let canNotify = true;\n        if (!target.isAscendant(this)) {\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\n        }\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerOut(target, pi, force);\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        // Prevent pointerout to lose control context.\n        // Event redundancy is checked inside the function.\n        this._onPointerEnter(this, pi);\n        if (this._downCount !== 0) {\n            return false;\n        }\n        this._downCount++;\n        this._downPointerIds[pointerId] = true;\n        const canNotify = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n        }\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n            this._host._capturedPointerIds.add(pi.event.pointerId);\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._downCount = 0;\n        delete this._downPointerIds[pointerId];\n        let canNotifyClick = notifyClick;\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        }\n        const canNotify = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\n        }\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\n            this._host._capturedPointerIds.delete(pi.event.pointerId);\n        }\n    }\n    /**\n     * @internal\n     */\n    _forcePointerUp(pointerId = null) {\n        if (pointerId !== null) {\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\n        }\n        else {\n            for (const key in this._downPointerIds) {\n                this._onPointerUp(this, Vector2.Zero(), +key, 0, true);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _onWheelScroll(deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return;\n        }\n        const canNotify = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\n        if (canNotify && this.parent != null) {\n            this.parent._onWheelScroll(deltaX, deltaY);\n        }\n    }\n    /** @internal */\n    _onCanvasBlur() { }\n    /**\n     * @internal\n     */\n    _processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._dummyVector2.copyFromFloats(x, y);\n        if (type === PointerEventTypes.POINTERMOVE) {\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\n            const previousControlOver = this._host._lastControlOver[pointerId];\n            if (previousControlOver && previousControlOver !== this) {\n                previousControlOver._onPointerOut(this, pi);\n            }\n            if (previousControlOver !== this) {\n                this._onPointerEnter(this, pi);\n            }\n            this._host._lastControlOver[pointerId] = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERDOWN) {\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\n            this._host._registerLastControlDown(this, pointerId);\n            this._host._lastPickedControl = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERUP) {\n            if (this._host._lastControlDown[pointerId]) {\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\n            }\n            delete this._host._lastControlDown[pointerId];\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERWHEEL) {\n            if (this._host._lastControlOver[pointerId]) {\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\n                return true;\n            }\n        }\n        return false;\n    }\n    _prepareFont() {\n        if (!this._font && !this._fontSet) {\n            return;\n        }\n        if (this._style) {\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\n        }\n        else {\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\n        }\n        this._fontOffset = Control._GetFontOffset(this._font);\n        //children need to be refreshed\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\n    }\n    /**\n     * Clones a control and its descendants\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n     * @returns the cloned control\n     */\n    clone(host) {\n        const serialization = {};\n        this.serialize(serialization);\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\n        const cloned = new controlType();\n        cloned.parse(serialization, host);\n        return cloned;\n    }\n    /**\n     * Parses a serialized object into this control\n     * @param serializedObject the object with the serialized properties\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\n     * @returns this control\n     */\n    parse(serializedObject, host) {\n        SerializationHelper.Parse(() => this, serializedObject, null);\n        this.name = serializedObject.name;\n        this._parseFromContent(serializedObject, host !== null && host !== void 0 ? host : this._host);\n        return this;\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        SerializationHelper.Serialize(this, serializationObject);\n        serializationObject.name = this.name;\n        serializationObject.className = this.getClassName();\n        // Call prepareFont to guarantee the font is properly set before serializing\n        this._prepareFont();\n        if (this._font) {\n            serializationObject.fontFamily = this._fontFamily;\n            serializationObject.fontSize = this.fontSize;\n            serializationObject.fontWeight = this.fontWeight;\n            serializationObject.fontStyle = this.fontStyle;\n        }\n        if (this._gradient) {\n            serializationObject.gradient = {};\n            this._gradient.serialize(serializationObject.gradient);\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        var _a;\n        if (serializedObject.fontFamily) {\n            this.fontFamily = serializedObject.fontFamily;\n        }\n        if (serializedObject.fontSize) {\n            this.fontSize = serializedObject.fontSize;\n        }\n        if (serializedObject.fontWeight) {\n            this.fontWeight = serializedObject.fontWeight;\n        }\n        if (serializedObject.fontStyle) {\n            this.fontStyle = serializedObject.fontStyle;\n        }\n        // Gradient\n        if (serializedObject.gradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\n            this._gradient = new className();\n            (_a = this._gradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.gradient);\n        }\n        // Animations\n        if (serializedObject.animations) {\n            this.animations = [];\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\n                const parsedAnimation = serializedObject.animations[animationIndex];\n                const internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    this.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\n                this._host\n                    .getScene()\n                    .beginAnimation(this, serializedObject.autoAnimateFrom, serializedObject.autoAnimateTo, serializedObject.autoAnimateLoop, serializedObject.autoAnimateSpeed || 1.0);\n            }\n        }\n    }\n    /** Releases associated resources */\n    dispose() {\n        this.onDirtyObservable.clear();\n        this.onBeforeDrawObservable.clear();\n        this.onAfterDrawObservable.clear();\n        this.onPointerDownObservable.clear();\n        this.onPointerEnterObservable.clear();\n        this.onPointerMoveObservable.clear();\n        this.onPointerOutObservable.clear();\n        this.onPointerUpObservable.clear();\n        this.onPointerClickObservable.clear();\n        this.onWheelObservable.clear();\n        if (this._styleObserver && this._style) {\n            this._style.onChangedObservable.remove(this._styleObserver);\n            this._styleObserver = null;\n        }\n        if (this.parent) {\n            this.parent.removeControl(this);\n            this.parent = null;\n        }\n        if (this._host) {\n            const index = this._host._linkedControls.indexOf(this);\n            if (index > -1) {\n                this.linkWithMesh(null);\n            }\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n    }\n    /** HORIZONTAL_ALIGNMENT_LEFT */\n    static get HORIZONTAL_ALIGNMENT_LEFT() {\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\n    }\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\n    static get HORIZONTAL_ALIGNMENT_RIGHT() {\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\n    }\n    /** HORIZONTAL_ALIGNMENT_CENTER */\n    static get HORIZONTAL_ALIGNMENT_CENTER() {\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\n    }\n    /** VERTICAL_ALIGNMENT_TOP */\n    static get VERTICAL_ALIGNMENT_TOP() {\n        return Control._VERTICAL_ALIGNMENT_TOP;\n    }\n    /** VERTICAL_ALIGNMENT_BOTTOM */\n    static get VERTICAL_ALIGNMENT_BOTTOM() {\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\n    }\n    /** VERTICAL_ALIGNMENT_CENTER */\n    static get VERTICAL_ALIGNMENT_CENTER() {\n        return Control._VERTICAL_ALIGNMENT_CENTER;\n    }\n    /**\n     * @internal\n     */\n    static _GetFontOffset(font) {\n        if (Control._FontHeightSizes[font]) {\n            return Control._FontHeightSizes[font];\n        }\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        const result = engine.getFontOffset(font);\n        Control._FontHeightSizes[font] = result;\n        return result;\n    }\n    /**\n     * Creates a Control from parsed data\n     * @param serializedObject defines parsed data\n     * @param host defines the hosting AdvancedDynamicTexture\n     * @returns a new Control\n     */\n    static Parse(serializedObject, host) {\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\n        control.name = serializedObject.name;\n        control._parseFromContent(serializedObject, host);\n        return control;\n    }\n    /**\n     * @internal\n     */\n    static drawEllipse(x, y, width, height, context) {\n        context.translate(x, y);\n        context.scale(width, height);\n        context.beginPath();\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\n        context.closePath();\n        context.scale(1 / width, 1 / height);\n        context.translate(-x, -y);\n    }\n    /**\n     * Returns true if the control is ready to be used\n     * @returns\n     */\n    isReady() {\n        // Most controls are ready by default, so the default implementation is to return true\n        return true;\n    }\n}\n/**\n * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\n */\nControl.AllowAlphaInheritance = false;\nControl._ClipMeasure = new Measure(0, 0, 0, 0);\n// Statics\nControl._HORIZONTAL_ALIGNMENT_LEFT = 0;\nControl._HORIZONTAL_ALIGNMENT_RIGHT = 1;\nControl._HORIZONTAL_ALIGNMENT_CENTER = 2;\nControl._VERTICAL_ALIGNMENT_TOP = 0;\nControl._VERTICAL_ALIGNMENT_BOTTOM = 1;\nControl._VERTICAL_ALIGNMENT_CENTER = 2;\nControl._FontHeightSizes = {};\nControl.AddHeader = () => { };\n__decorate([\n    serialize()\n], Control.prototype, \"metadata\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isHitTestVisible\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isPointerBlocker\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"isFocusInvisible\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"clipChildren\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"clipContent\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"useBitmapCache\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowOffsetX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowOffsetY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowBlur\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"shadowColor\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"hoverCursor\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"fontOffset\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"alpha\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"scaleX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"scaleY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"rotation\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"transformCenterY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"transformCenterX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"horizontalAlignment\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"verticalAlignment\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"fixedRatio\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"width\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"height\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"style\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"color\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"gradient\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"zIndex\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"notRenderable\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"isVisible\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"descendantsOnlyPadding\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingLeft\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingRight\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingTop\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"paddingBottom\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"left\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"top\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"linkOffsetX\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"linkOffsetY\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"isEnabled\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"disabledColor\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"disabledColorItem\", null);\n__decorate([\n    serialize()\n], Control.prototype, \"overlapGroup\", void 0);\n__decorate([\n    serialize()\n], Control.prototype, \"overlapDeltaMultiplier\", void 0);\nRegisterClass(\"BABYLON.GUI.Control\", Control);\n//# sourceMappingURL=control.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\nimport { Control } from \"./control.js\";\nimport { Measure } from \"../measure.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix2D } from \"../math2D.js\";\n/**\n * Root class for 2D containers\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\n */\nexport class Container extends Control {\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\n    get renderToIntermediateTexture() {\n        return this._renderToIntermediateTexture;\n    }\n    set renderToIntermediateTexture(value) {\n        if (this._renderToIntermediateTexture === value) {\n            return;\n        }\n        this._renderToIntermediateTexture = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\n    get adaptHeightToChildren() {\n        return this._adaptHeightToChildren;\n    }\n    set adaptHeightToChildren(value) {\n        if (this._adaptHeightToChildren === value) {\n            return;\n        }\n        this._adaptHeightToChildren = value;\n        if (value) {\n            this.height = \"100%\";\n        }\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\n    get adaptWidthToChildren() {\n        return this._adaptWidthToChildren;\n    }\n    set adaptWidthToChildren(value) {\n        if (this._adaptWidthToChildren === value) {\n            return;\n        }\n        this._adaptWidthToChildren = value;\n        if (value) {\n            this.width = \"100%\";\n        }\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background gradient color. Takes precedence over background */\n    get backgroundGradient() {\n        return this._backgroundGradient;\n    }\n    set backgroundGradient(value) {\n        if (this._backgroundGradient === value) {\n            return;\n        }\n        this._backgroundGradient = value;\n        this._markAsDirty();\n    }\n    /** Gets the list of children */\n    get children() {\n        return this._children;\n    }\n    get isReadOnly() {\n        return this._isReadOnly;\n    }\n    set isReadOnly(value) {\n        this._isReadOnly = value;\n        for (const child of this._children) {\n            child.isReadOnly = value;\n        }\n    }\n    /**\n     * Creates a new Container\n     * @param name defines the name of the container\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        /** @internal */\n        this._children = new Array();\n        /** @internal */\n        this._measureForChildren = Measure.Empty();\n        /** @internal */\n        this._background = \"\";\n        /** @internal */\n        this._backgroundGradient = null;\n        /** @internal */\n        this._adaptWidthToChildren = false;\n        /** @internal */\n        this._adaptHeightToChildren = false;\n        /** @internal */\n        this._renderToIntermediateTexture = false;\n        /** @internal */\n        this._intermediateTexture = null;\n        /**\n         * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\n         */\n        this.logLayoutCycleErrors = false;\n        /**\n         * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\n         */\n        this.maxLayoutCycle = 3;\n        /**\n         * An event triggered when any control is added to this container.\n         */\n        this.onControlAddedObservable = new Observable();\n        /**\n         * An event triggered when any control is removed from this container.\n         */\n        this.onControlRemovedObservable = new Observable();\n        this._inverseTransformMatrix = Matrix2D.Identity();\n        this._inverseMeasure = new Measure(0, 0, 0, 0);\n    }\n    _getTypeName() {\n        return \"Container\";\n    }\n    _flagDescendantsAsMatrixDirty() {\n        for (const child of this.children) {\n            child._isClipped = false;\n            child._markMatrixAsDirty();\n        }\n    }\n    /**\n     * Gets a child using its name\n     * @param name defines the child name to look for\n     * @returns the child control if found\n     */\n    getChildByName(name) {\n        for (const child of this.children) {\n            if (child.name === name) {\n                return child;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets a child using its type and its name\n     * @param name defines the child name to look for\n     * @param type defines the child type to look for\n     * @returns the child control if found\n     */\n    getChildByType(name, type) {\n        for (const child of this.children) {\n            if (child.typeName === type) {\n                return child;\n            }\n        }\n        return null;\n    }\n    /**\n     * Search for a specific control in children\n     * @param control defines the control to look for\n     * @returns true if the control is in child list\n     */\n    containsControl(control) {\n        return this.children.indexOf(control) !== -1;\n    }\n    /**\n     * Adds a new control to the current container\n     * @param control defines the control to add\n     * @returns the current container\n     */\n    addControl(control) {\n        if (!control) {\n            return this;\n        }\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            return this;\n        }\n        control._link(this._host);\n        control._markAllAsDirty();\n        this._reOrderControl(control);\n        this._markAsDirty();\n        this.onControlAddedObservable.notifyObservers(control);\n        return this;\n    }\n    /**\n     * Removes all controls from the current container\n     * @returns the current container\n     */\n    clearControls() {\n        const children = this.children.slice();\n        for (const child of children) {\n            this.removeControl(child);\n        }\n        return this;\n    }\n    /**\n     * Removes a control from the current container\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            this._children.splice(index, 1);\n            control.parent = null;\n        }\n        control.linkWithMesh(null);\n        if (this._host) {\n            this._host._cleanControlAfterRemoval(control);\n        }\n        this._markAsDirty();\n        this.onControlRemovedObservable.notifyObservers(control);\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _reOrderControl(control) {\n        const linkedMesh = control.linkedMesh;\n        this.removeControl(control);\n        let wasAdded = false;\n        for (let index = 0; index < this._children.length; index++) {\n            if (this._children[index].zIndex > control.zIndex) {\n                this._children.splice(index, 0, control);\n                wasAdded = true;\n                break;\n            }\n        }\n        if (!wasAdded) {\n            this._children.push(control);\n        }\n        control.parent = this;\n        if (linkedMesh) {\n            control.linkWithMesh(linkedMesh);\n        }\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _offsetLeft(offset) {\n        super._offsetLeft(offset);\n        for (const child of this._children) {\n            child._offsetLeft(offset);\n        }\n    }\n    /**\n     * @internal\n     */\n    _offsetTop(offset) {\n        super._offsetTop(offset);\n        for (const child of this._children) {\n            child._offsetTop(offset);\n        }\n    }\n    /** @internal */\n    _markAllAsDirty() {\n        super._markAllAsDirty();\n        for (let index = 0; index < this._children.length; index++) {\n            this._children[index]._markAllAsDirty();\n        }\n    }\n    _getBackgroundColor(context) {\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n    }\n    /**\n     * @internal\n     */\n    _localDraw(context) {\n        if (this._background || this._backgroundGradient) {\n            context.save();\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n            context.fillStyle = this._getBackgroundColor(context);\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            context.restore();\n        }\n    }\n    /**\n     * @internal\n     */\n    _link(host) {\n        super._link(host);\n        for (const child of this._children) {\n            child._link(host);\n        }\n    }\n    /** @internal */\n    _beforeLayout() {\n        // Do nothing\n    }\n    /**\n     * @internal\n     */\n    _processMeasures(parentMeasure, context) {\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\n            super._processMeasures(parentMeasure, context);\n            this._evaluateClippingState(parentMeasure);\n            if (this._renderToIntermediateTexture) {\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\n                    this._intermediateTexture.dispose();\n                    this._intermediateTexture = null;\n                }\n                if (!this._intermediateTexture) {\n                    this._intermediateTexture = new DynamicTexture(\"\", { width: this._currentMeasure.width, height: this._currentMeasure.height }, this._host.getScene(), false, Texture.NEAREST_SAMPLINGMODE, Constants.TEXTUREFORMAT_RGBA, false);\n                    this._intermediateTexture.hasAlpha = true;\n                }\n                else {\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _layout(parentMeasure, context) {\n        var _a, _b;\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\n            return false;\n        }\n        this.host._numLayoutCalls++;\n        if (this._isDirty) {\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\n        }\n        let rebuildCount = 0;\n        context.save();\n        this._applyStates(context);\n        this._beforeLayout();\n        do {\n            let computedWidth = -1;\n            let computedHeight = -1;\n            this._rebuildLayout = false;\n            this._processMeasures(parentMeasure, context);\n            if (!this._isClipped) {\n                for (const child of this._children) {\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\n                    if (child._layout(this._measureForChildren, context)) {\n                        if (child.isVisible && !child.notRenderable) {\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\n                            }\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\n                            }\n                        }\n                    }\n                }\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\n                    if (this.width !== computedWidth + \"px\") {\n                        (_a = this.parent) === null || _a === void 0 ? void 0 : _a._markAsDirty();\n                        this.width = computedWidth + \"px\";\n                        this._width.ignoreAdaptiveScaling = true;\n                        this._rebuildLayout = true;\n                    }\n                }\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\n                    if (this.height !== computedHeight + \"px\") {\n                        (_b = this.parent) === null || _b === void 0 ? void 0 : _b._markAsDirty();\n                        this.height = computedHeight + \"px\";\n                        this._height.ignoreAdaptiveScaling = true;\n                        this._rebuildLayout = true;\n                    }\n                }\n                this._postMeasure();\n            }\n            rebuildCount++;\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\n        }\n        context.restore();\n        if (this._isDirty) {\n            this.invalidateRect();\n            this._isDirty = false;\n        }\n        return true;\n    }\n    _postMeasure() {\n        // Do nothing by default\n    }\n    /**\n     * @internal\n     */\n    _draw(context, invalidatedRectangle) {\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? this._intermediateTexture.getContext() : context;\n        if (renderToIntermediateTextureThisDraw) {\n            contextToDrawTo.save();\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\n            if (invalidatedRectangle) {\n                this._transformMatrix.invertToRef(this._inverseTransformMatrix);\n                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);\n                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);\n            }\n            else {\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        }\n        this._localDraw(contextToDrawTo);\n        context.save();\n        if (this.clipChildren) {\n            this._clipForChildren(contextToDrawTo);\n        }\n        for (const child of this._children) {\n            // Only redraw parts of the screen that are invalidated\n            if (invalidatedRectangle) {\n                if (!child._intersectsRect(invalidatedRectangle)) {\n                    continue;\n                }\n            }\n            child._render(contextToDrawTo, invalidatedRectangle);\n        }\n        if (renderToIntermediateTextureThisDraw) {\n            contextToDrawTo.restore();\n            context.save();\n            context.globalAlpha = this.alpha;\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\n            context.restore();\n        }\n        context.restore();\n    }\n    getDescendantsToRef(results, directDescendantsOnly = false, predicate) {\n        if (!this.children) {\n            return;\n        }\n        for (let index = 0; index < this.children.length; index++) {\n            const item = this.children[index];\n            if (!predicate || predicate(item)) {\n                results.push(item);\n            }\n            if (!directDescendantsOnly) {\n                item.getDescendantsToRef(results, false, predicate);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\n            return false;\n        }\n        // checks if the picking position is within the container\n        const contains = super.contains(x, y);\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\n        if (!contains && this.clipChildren) {\n            return false;\n        }\n        // Checking backwards to pick closest first\n        for (let index = this._children.length - 1; index >= 0; index--) {\n            const child = this._children[index];\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\n                if (child.hoverCursor) {\n                    this._host._changeCursor(child.hoverCursor);\n                }\n                return true;\n            }\n        }\n        if (!contains) {\n            return false;\n        }\n        if (!this.isHitTestVisible) {\n            return false;\n        }\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n    }\n    /**\n     * @internal\n     */\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.copyFrom(this._currentMeasure);\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        if (this.backgroundGradient) {\n            serializationObject.backgroundGradient = {};\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n        }\n        if (!this.children.length) {\n            return;\n        }\n        serializationObject.children = [];\n        for (const child of this.children) {\n            const childSerializationObject = {};\n            child.serialize(childSerializationObject);\n            serializationObject.children.push(childSerializationObject);\n        }\n    }\n    /** Releases associated resources */\n    dispose() {\n        var _a;\n        super.dispose();\n        for (let index = this.children.length - 1; index >= 0; index--) {\n            this.children[index].dispose();\n        }\n        (_a = this._intermediateTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        var _a;\n        super._parseFromContent(serializedObject, host);\n        this._link(host);\n        // Gradient\n        if (serializedObject.backgroundGradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\n            this._backgroundGradient = new className();\n            (_a = this._backgroundGradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.backgroundGradient);\n        }\n        if (!serializedObject.children) {\n            return;\n        }\n        for (const childData of serializedObject.children) {\n            this.addControl(Control.Parse(childData, host));\n        }\n    }\n    isReady() {\n        for (const child of this.children) {\n            if (!child.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n__decorate([\n    serialize()\n], Container.prototype, \"renderToIntermediateTexture\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"maxLayoutCycle\", void 0);\n__decorate([\n    serialize()\n], Container.prototype, \"adaptHeightToChildren\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"adaptWidthToChildren\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"background\", null);\n__decorate([\n    serialize()\n], Container.prototype, \"backgroundGradient\", null);\nRegisterClass(\"BABYLON.GUI.Container\", Container);\n//# sourceMappingURL=container.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to create rectangle container */\nexport class Rectangle extends Container {\n    /** Gets or sets border thickness */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the corner radius of all angles */\n    get cornerRadius() {\n        return this._cornerRadius[0];\n    }\n    set cornerRadius(value) {\n        if (value < 0) {\n            value = 0;\n        }\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\n            return;\n        }\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the corner radius top left angle */\n    get cornerRadiusX() {\n        return this._cornerRadius[0];\n    }\n    set cornerRadiusX(value) {\n        if (this._cornerRadius[0] === value) {\n            return;\n        }\n        this._cornerRadius[0] = value;\n    }\n    /** Gets or sets the corner radius top right angle */\n    get cornerRadiusY() {\n        return this._cornerRadius[1];\n    }\n    set cornerRadiusY(value) {\n        if (this._cornerRadius[1] === value) {\n            return;\n        }\n        this._cornerRadius[1] = value;\n    }\n    /** Gets or sets the corner radius bottom left angle */\n    get cornerRadiusZ() {\n        return this._cornerRadius[2];\n    }\n    set cornerRadiusZ(value) {\n        if (this._cornerRadius[2] === value) {\n            return;\n        }\n        this._cornerRadius[2] = value;\n    }\n    /** Gets or sets the corner radius bottom right angle */\n    get cornerRadiusW() {\n        return this._cornerRadius[3];\n    }\n    set cornerRadiusW(value) {\n        if (this._cornerRadius[3] === value) {\n            return;\n        }\n        this._cornerRadius[3] = value;\n    }\n    /**\n     * Creates a new Rectangle\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._thickness = 1;\n        this._cornerRadius = [0, 0, 0, 0];\n        this._cachedRadius = [0, 0, 0, 0];\n    }\n    _getTypeName() {\n        return \"Rectangle\";\n    }\n    /** @internal */\n    _computeAdditionnalOffsetX() {\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n            // Take in account the aliasing\n            return 1;\n        }\n        return 0;\n    }\n    /** @internal */\n    _computeAdditionnalOffsetY() {\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n            // Take in account the aliasing\n            return 1;\n        }\n        return 0;\n    }\n    _getRectangleFill(context) {\n        return this._getBackgroundColor(context);\n    }\n    _localDraw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        if (this._background || this._backgroundGradient) {\n            context.fillStyle = this._getRectangleFill(context);\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n                this._drawRoundedRect(context, this._thickness / 2);\n                context.fill();\n            }\n            else {\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        }\n        if (this._thickness) {\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n            if (this.color || this.gradient) {\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\n            }\n            context.lineWidth = this._thickness;\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n                this._drawRoundedRect(context, this._thickness / 2);\n                context.stroke();\n            }\n            else {\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.width -= 2 * this._thickness;\n        this._measureForChildren.height -= 2 * this._thickness;\n        this._measureForChildren.left += this._thickness;\n        this._measureForChildren.top += this._thickness;\n    }\n    _drawRoundedRect(context, offset = 0) {\n        const x = this._currentMeasure.left + offset;\n        const y = this._currentMeasure.top + offset;\n        const width = this._currentMeasure.width - offset * 2;\n        const height = this._currentMeasure.height - offset * 2;\n        for (let index = 0; index < this._cornerRadius.length; index++) {\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\n        }\n        context.beginPath();\n        context.moveTo(x + this._cachedRadius[0], y);\n        context.lineTo(x + width - this._cachedRadius[1], y);\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\n        context.lineTo(x + this._cachedRadius[3], y + height);\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\n        context.lineTo(x, y + this._cachedRadius[0]);\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\n        context.closePath();\n    }\n    _clipForChildren(context) {\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\n            this._drawRoundedRect(context, this._thickness);\n            context.clip();\n        }\n    }\n}\n__decorate([\n    serialize()\n], Rectangle.prototype, \"thickness\", null);\n__decorate([\n    serialize()\n], Rectangle.prototype, \"cornerRadius\", null);\n__decorate([\n    serialize()\n], Rectangle.prototype, \"cornerRadiusX\", null);\n__decorate([\n    serialize()\n], Rectangle.prototype, \"cornerRadiusY\", null);\n__decorate([\n    serialize()\n], Rectangle.prototype, \"cornerRadiusZ\", null);\n__decorate([\n    serialize()\n], Rectangle.prototype, \"cornerRadiusW\", null);\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\n//# sourceMappingURL=rectangle.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Enum that determines the text-wrapping mode to use.\n */\nexport var TextWrapping;\n(function (TextWrapping) {\n    /**\n     * Clip the text when it's larger than Control.width; this is the default mode.\n     */\n    TextWrapping[TextWrapping[\"Clip\"] = 0] = \"Clip\";\n    /**\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\n     */\n    TextWrapping[TextWrapping[\"WordWrap\"] = 1] = \"WordWrap\";\n    /**\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\n     */\n    TextWrapping[TextWrapping[\"Ellipsis\"] = 2] = \"Ellipsis\";\n    /**\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\n     */\n    TextWrapping[TextWrapping[\"WordWrapEllipsis\"] = 3] = \"WordWrapEllipsis\";\n})(TextWrapping || (TextWrapping = {}));\n/**\n * Class used to create text block control\n */\nexport class TextBlock extends Control {\n    /**\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\n     */\n    get lines() {\n        return this._lines;\n    }\n    /**\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\n     */\n    get resizeToFit() {\n        return this._resizeToFit;\n    }\n    /**\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\n     */\n    set resizeToFit(value) {\n        if (this._resizeToFit === value) {\n            return;\n        }\n        this._resizeToFit = value;\n        if (this._resizeToFit) {\n            this._width.ignoreAdaptiveScaling = true;\n            this._height.ignoreAdaptiveScaling = true;\n        }\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if text must be wrapped\n     */\n    get textWrapping() {\n        return this._textWrapping;\n    }\n    /**\n     * Gets or sets a boolean indicating if text must be wrapped\n     */\n    set textWrapping(value) {\n        if (this._textWrapping === value) {\n            return;\n        }\n        this._textWrapping = +value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets text to display\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Gets or sets text to display\n     */\n    set text(value) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value + \"\"; // Making sure it is a text\n        this._markAsDirty();\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\n     */\n    get textHorizontalAlignment() {\n        return this._textHorizontalAlignment;\n    }\n    /**\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\n     */\n    set textHorizontalAlignment(value) {\n        if (this._textHorizontalAlignment === value) {\n            return;\n        }\n        this._textHorizontalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\n     */\n    get textVerticalAlignment() {\n        return this._textVerticalAlignment;\n    }\n    /**\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\n     */\n    set textVerticalAlignment(value) {\n        if (this._textVerticalAlignment === value) {\n            return;\n        }\n        this._textVerticalAlignment = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets line spacing value\n     */\n    set lineSpacing(value) {\n        if (this._lineSpacing.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets line spacing value\n     */\n    get lineSpacing() {\n        return this._lineSpacing.toString(this._host);\n    }\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    get outlineWidth() {\n        return this._outlineWidth;\n    }\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    set outlineWidth(value) {\n        if (this._outlineWidth === value) {\n            return;\n        }\n        this._outlineWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating that text must have underline\n     */\n    get underline() {\n        return this._underline;\n    }\n    /**\n     * Gets or sets a boolean indicating that text must have underline\n     */\n    set underline(value) {\n        if (this._underline === value) {\n            return;\n        }\n        this._underline = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets an boolean indicating that text must be crossed out\n     */\n    get lineThrough() {\n        return this._lineThrough;\n    }\n    /**\n     * Gets or sets an boolean indicating that text must be crossed out\n     */\n    set lineThrough(value) {\n        if (this._lineThrough === value) {\n            return;\n        }\n        this._lineThrough = value;\n        this._markAsDirty();\n    }\n    /**\n     * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.\n     */\n    get applyOutlineToUnderline() {\n        return this._applyOutlineToUnderline;\n    }\n    set applyOutlineToUnderline(value) {\n        if (this._applyOutlineToUnderline === value) {\n            return;\n        }\n        this._applyOutlineToUnderline = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    get outlineColor() {\n        return this._outlineColor;\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    set outlineColor(value) {\n        if (this._outlineColor === value) {\n            return;\n        }\n        this._outlineColor = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets word divider\n     */\n    get wordDivider() {\n        return this._wordDivider;\n    }\n    /**\n     * Gets or sets word divider\n     */\n    set wordDivider(value) {\n        if (this._wordDivider === value) {\n            return;\n        }\n        this._wordDivider = value;\n        this._markAsDirty();\n    }\n    /**\n     * By default, if a text block has text wrapping other than Clip, its width\n     * is not resized even if resizeToFit = true. This parameter forces the width\n     * to be resized.\n     */\n    get forceResizeWidth() {\n        return this._forceResizeWidth;\n    }\n    set forceResizeWidth(value) {\n        if (this._forceResizeWidth === value) {\n            return;\n        }\n        this._forceResizeWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new TextBlock object\n     * @param name defines the name of the control\n     * @param text defines the text to display (empty string by default)\n     */\n    constructor(\n    /**\n     * Defines the name of the control\n     */\n    name, text = \"\") {\n        super(name);\n        this.name = name;\n        this._text = \"\";\n        this._textWrapping = TextWrapping.Clip;\n        this._textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        this._textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        this._resizeToFit = false;\n        this._lineSpacing = new ValueAndUnit(0);\n        this._outlineWidth = 0;\n        this._outlineColor = \"white\";\n        this._underline = false;\n        this._lineThrough = false;\n        this._wordDivider = \" \";\n        this._forceResizeWidth = false;\n        this._applyOutlineToUnderline = false;\n        /**\n         * An event triggered after the text is changed\n         */\n        this.onTextChangedObservable = new Observable();\n        /**\n         * An event triggered after the text was broken up into lines\n         */\n        this.onLinesReadyObservable = new Observable();\n        this._linesTemp = [];\n        this.text = text;\n    }\n    _getTypeName() {\n        return \"TextBlock\";\n    }\n    _processMeasures(parentMeasure, context) {\n        if (!this._fontOffset || this.isDirty) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n        super._processMeasures(parentMeasure, context);\n        // Prepare lines\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\n        this.onLinesReadyObservable.notifyObservers(this);\n        let maxLineWidth = 0;\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            if (line.width > maxLineWidth) {\n                maxLineWidth = line.width;\n            }\n        }\n        if (this._resizeToFit) {\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\n                    this._rebuildLayout = true;\n                }\n            }\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\n                let lineSpacing = 0;\n                if (this._lineSpacing.isPixel) {\n                    lineSpacing = this._lineSpacing.getValue(this._host);\n                }\n                else {\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n                }\n                newHeight += (this._lines.length - 1) * lineSpacing;\n            }\n            if (newHeight !== this._height.internalValue) {\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\n                this._rebuildLayout = true;\n            }\n        }\n    }\n    _drawText(text, textWidth, y, context) {\n        const width = this._currentMeasure.width;\n        let x = 0;\n        switch (this._textHorizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x = 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x = width - textWidth;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x = (width - textWidth) / 2;\n                break;\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        if (this.outlineWidth) {\n            context.strokeText(text, this._currentMeasure.left + x, y);\n        }\n        context.fillText(text, this._currentMeasure.left + x, y);\n        if (this._underline) {\n            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);\n        }\n        if (this._lineThrough) {\n            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);\n        }\n    }\n    _drawLine(xFrom, yFrom, xTo, yTo, context) {\n        context.beginPath();\n        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\n        context.moveTo(xFrom, yFrom);\n        context.lineTo(xTo, yTo);\n        if (this.outlineWidth && this.applyOutlineToUnderline) {\n            context.stroke();\n            context.fill();\n        }\n        else {\n            const currentStroke = context.strokeStyle;\n            context.strokeStyle = context.fillStyle;\n            context.stroke();\n            context.strokeStyle = currentStroke;\n        }\n        context.closePath();\n    }\n    /**\n     * @internal\n     */\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        // Render lines\n        this._renderLines(context);\n        context.restore();\n    }\n    _applyStates(context) {\n        super._applyStates(context);\n        if (this.outlineWidth) {\n            context.lineWidth = this.outlineWidth;\n            context.strokeStyle = this.outlineColor;\n            context.lineJoin = \"miter\";\n            context.miterLimit = 2;\n        }\n    }\n    _breakLines(refWidth, refHeight, context) {\n        this._linesTemp.length = 0;\n        const _lines = this.text.split(\"\\n\");\n        if (this._textWrapping === TextWrapping.Ellipsis) {\n            for (const _line of _lines) {\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\n            }\n        }\n        else if (this._textWrapping === TextWrapping.WordWrap) {\n            for (const _line of _lines) {\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\n            }\n        }\n        else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\n            for (const _line of _lines) {\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight, context));\n            }\n        }\n        else {\n            for (const _line of _lines) {\n                this._linesTemp.push(this._parseLine(_line, context));\n            }\n        }\n        return this._linesTemp;\n    }\n    _parseLine(line = \"\", context) {\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\n    }\n    //Calculate how many characters approximately we need to remove\n    _getCharsToRemove(lineWidth, width, lineLength) {\n        const diff = lineWidth > width ? lineWidth - width : 0;\n        // This isn't exact unless the font is monospaced\n        const charWidth = lineWidth / lineLength;\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\n        return removeChars;\n    }\n    _parseLineEllipsis(line = \"\", width, context) {\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n        // unicode support. split('') does not work with unicode!\n        // make sure Array.from is available\n        const characters = Array.from && Array.from(line);\n        if (!characters) {\n            // no array.from, use the old method\n            while (line.length > 2 && lineWidth > width) {\n                line = line.slice(0, -removeChars);\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n            }\n            // Add on the end\n            line += \"…\";\n        }\n        else {\n            while (characters.length && lineWidth > width) {\n                characters.splice(characters.length - removeChars, removeChars);\n                line = `${characters.join(\"\")}…`;\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\n            }\n        }\n        return { text: line, width: lineWidth };\n    }\n    _getTextMetricsWidth(textMetrics) {\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\n        }\n        return textMetrics.width;\n    }\n    _parseLineWordWrap(line = \"\", width, context) {\n        const lines = [];\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\n        for (let n = 0; n < words.length; n++) {\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\n            if (testWidth > width && n > 0) {\n                lines.push({ text: line, width: lineWidth });\n                line = words[n];\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\n            }\n            else {\n                lineWidth = testWidth;\n                line = testLine;\n            }\n        }\n        lines.push({ text: line, width: lineWidth });\n        return lines;\n    }\n    _parseLineWordWrapEllipsis(line = \"\", width, height, context) {\n        const lines = this._parseLineWordWrap(line, width, context);\n        for (let n = 1; n <= lines.length; n++) {\n            const currentHeight = this._computeHeightForLinesOf(n);\n            if (currentHeight > height && n > 1) {\n                const lastLine = lines[n - 2];\n                const currentLine = lines[n - 1];\n                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);\n                const linesToRemove = lines.length - n + 1;\n                for (let i = 0; i < linesToRemove; i++) {\n                    lines.pop();\n                }\n                return lines;\n            }\n        }\n        return lines;\n    }\n    _renderLines(context) {\n        if (!this._fontOffset || !this._lines) {\n            return;\n        }\n        const height = this._currentMeasure.height;\n        let rootY = 0;\n        switch (this._textVerticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                rootY = this._fontOffset.ascent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\n                break;\n        }\n        rootY += this._currentMeasure.top;\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\n                if (this._lineSpacing.isPixel) {\n                    rootY += this._lineSpacing.getValue(this._host);\n                }\n                else {\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n                }\n            }\n            this._drawText(line.text, line.width, rootY, context);\n            rootY += this._fontOffset.height;\n        }\n    }\n    _computeHeightForLinesOf(lineCount) {\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\n            let lineSpacing = 0;\n            if (this._lineSpacing.isPixel) {\n                lineSpacing = this._lineSpacing.getValue(this._host);\n            }\n            else {\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n            }\n            newHeight += (lineCount - 1) * lineSpacing;\n        }\n        return newHeight;\n    }\n    /**\n     * Given a width constraint applied on the text block, find the expected height\n     * @returns expected height\n     */\n    computeExpectedHeight() {\n        var _a;\n        if (this.text && this.widthInPixels) {\n            // Should abstract platform instead of using LastCreatedEngine\n            const context = (_a = EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.createCanvas(0, 0).getContext(\"2d\");\n            if (context) {\n                this._applyStates(context);\n                if (!this._fontOffset) {\n                    this._fontOffset = Control._GetFontOffset(context.font);\n                }\n                const lines = this._lines\n                    ? this._lines\n                    : this._breakLines(this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels, this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels, context);\n                return this._computeHeightForLinesOf(lines.length);\n            }\n        }\n        return 0;\n    }\n    dispose() {\n        super.dispose();\n        this.onTextChangedObservable.clear();\n    }\n}\n__decorate([\n    serialize()\n], TextBlock.prototype, \"resizeToFit\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textWrapping\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"text\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textHorizontalAlignment\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"textVerticalAlignment\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"lineSpacing\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"outlineWidth\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"underline\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"lineThrough\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"applyOutlineToUnderline\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"outlineColor\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"wordDivider\", null);\n__decorate([\n    serialize()\n], TextBlock.prototype, \"forceResizeWidth\", null);\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\n//# sourceMappingURL=textBlock.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/**\n * Class used to create 2D images\n */\nexport class Image extends Control {\n    /**\n     * Gets a boolean indicating that the content is loaded\n     */\n    get isLoaded() {\n        return this._loaded;\n    }\n    isReady() {\n        return this.isLoaded;\n    }\n    /**\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\n     * Beware using this as this will consume more memory as the image has to be stored twice\n     */\n    get detectPointerOnOpaqueOnly() {\n        return this._detectPointerOnOpaqueOnly;\n    }\n    set detectPointerOnOpaqueOnly(value) {\n        if (this._detectPointerOnOpaqueOnly === value) {\n            return;\n        }\n        this._detectPointerOnOpaqueOnly = value;\n    }\n    /**\n     * Gets or sets the left value for slicing (9-patch)\n     */\n    get sliceLeft() {\n        return this._sliceLeft;\n    }\n    set sliceLeft(value) {\n        if (this._sliceLeft === value) {\n            return;\n        }\n        this._sliceLeft = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the right value for slicing (9-patch)\n     */\n    get sliceRight() {\n        return this._sliceRight;\n    }\n    set sliceRight(value) {\n        if (this._sliceRight === value) {\n            return;\n        }\n        this._sliceRight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the top value for slicing (9-patch)\n     */\n    get sliceTop() {\n        return this._sliceTop;\n    }\n    set sliceTop(value) {\n        if (this._sliceTop === value) {\n            return;\n        }\n        this._sliceTop = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the bottom value for slicing (9-patch)\n     */\n    get sliceBottom() {\n        return this._sliceBottom;\n    }\n    set sliceBottom(value) {\n        if (this._sliceBottom === value) {\n            return;\n        }\n        this._sliceBottom = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the left coordinate in the source image\n     */\n    get sourceLeft() {\n        return this._sourceLeft;\n    }\n    set sourceLeft(value) {\n        if (this._sourceLeft === value) {\n            return;\n        }\n        this._sourceLeft = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the top coordinate in the source image\n     */\n    get sourceTop() {\n        return this._sourceTop;\n    }\n    set sourceTop(value) {\n        if (this._sourceTop === value) {\n            return;\n        }\n        this._sourceTop = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the width to capture in the source image\n     */\n    get sourceWidth() {\n        return this._sourceWidth;\n    }\n    set sourceWidth(value) {\n        if (this._sourceWidth === value) {\n            return;\n        }\n        this._sourceWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the height to capture in the source image\n     */\n    get sourceHeight() {\n        return this._sourceHeight;\n    }\n    set sourceHeight(value) {\n        if (this._sourceHeight === value) {\n            return;\n        }\n        this._sourceHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets the image width\n     */\n    get imageWidth() {\n        return this._imageWidth;\n    }\n    /**\n     * Gets the image height\n     */\n    get imageHeight() {\n        return this._imageHeight;\n    }\n    /**\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\n     */\n    get populateNinePatchSlicesFromImage() {\n        return this._populateNinePatchSlicesFromImage;\n    }\n    set populateNinePatchSlicesFromImage(value) {\n        if (this._populateNinePatchSlicesFromImage === value) {\n            return;\n        }\n        this._populateNinePatchSlicesFromImage = value;\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\n            this._extractNinePatchSliceDataFromImage();\n        }\n    }\n    /** Indicates if the format of the image is SVG */\n    get isSVG() {\n        return this._isSVG;\n    }\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\n    get svgAttributesComputationCompleted() {\n        return this._svgAttributesComputationCompleted;\n    }\n    /**\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get autoScale() {\n        return this._autoScale;\n    }\n    set autoScale(value) {\n        if (this._autoScale === value) {\n            return;\n        }\n        this._autoScale = value;\n        if (value && this._loaded) {\n            this.synchronizeSizeWithContent();\n        }\n    }\n    /** Gets or sets the stretching mode used by the image */\n    get stretch() {\n        return this._stretch;\n    }\n    set stretch(value) {\n        if (this._stretch === value) {\n            return;\n        }\n        this._stretch = value;\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    _rotate90(n, preserveProperties = false) {\n        var _a, _b;\n        const width = this._domImage.width;\n        const height = this._domImage.height;\n        // Should abstract platform instead of using LastCreatedEngine\n        const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        const canvas = engine.createCanvas(height, width);\n        const context = canvas.getContext(\"2d\");\n        context.translate(canvas.width / 2, canvas.height / 2);\n        context.rotate((n * Math.PI) / 2);\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\n        const dataUrl = canvas.toDataURL(\"image/jpg\");\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\n        if (preserveProperties) {\n            rotatedImage._stretch = this._stretch;\n            rotatedImage._autoScale = this._autoScale;\n            rotatedImage._cellId = this._cellId;\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\n        }\n        this._handleRotationForSVGImage(this, rotatedImage, n);\n        this._imageDataCache.data = null;\n        return rotatedImage;\n    }\n    _handleRotationForSVGImage(srcImage, dstImage, n) {\n        if (!srcImage._isSVG) {\n            return;\n        }\n        if (srcImage._svgAttributesComputationCompleted) {\n            this._rotate90SourceProperties(srcImage, dstImage, n);\n            this._markAsDirty();\n        }\n        else {\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\n                this._rotate90SourceProperties(srcImage, dstImage, n);\n                this._markAsDirty();\n            });\n        }\n    }\n    _rotate90SourceProperties(srcImage, dstImage, n) {\n        let srcLeft = srcImage.sourceLeft, srcTop = srcImage.sourceTop, srcWidth = srcImage.domImage.width, srcHeight = srcImage.domImage.height;\n        let dstLeft = srcLeft, dstTop = srcTop, dstWidth = srcImage.sourceWidth, dstHeight = srcImage.sourceHeight;\n        if (n != 0) {\n            const mult = n < 0 ? -1 : 1;\n            n = n % 4;\n            for (let i = 0; i < Math.abs(n); ++i) {\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\n                if (n < 0) {\n                    dstTop -= dstHeight;\n                }\n                else {\n                    dstLeft -= dstWidth;\n                }\n                srcLeft = dstLeft;\n                srcTop = dstTop;\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\n            }\n        }\n        dstImage.sourceLeft = dstLeft;\n        dstImage.sourceTop = dstTop;\n        dstImage.sourceWidth = dstWidth;\n        dstImage.sourceHeight = dstHeight;\n    }\n    _extractNinePatchSliceDataFromImage() {\n        var _a, _b;\n        const width = this._domImage.width;\n        const height = this._domImage.height;\n        if (!this._workingCanvas) {\n            const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n            if (!engine) {\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\n            }\n            this._workingCanvas = engine.createCanvas(width, height);\n        }\n        const canvas = this._workingCanvas;\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(this._domImage, 0, 0, width, height);\n        const imageData = context.getImageData(0, 0, width, height);\n        // Left and right\n        this._sliceLeft = -1;\n        this._sliceRight = -1;\n        for (let x = 0; x < width; x++) {\n            const alpha = imageData.data[x * 4 + 3];\n            if (alpha > 127 && this._sliceLeft === -1) {\n                this._sliceLeft = x;\n                continue;\n            }\n            if (alpha < 127 && this._sliceLeft > -1) {\n                this._sliceRight = x;\n                break;\n            }\n        }\n        // top and bottom\n        this._sliceTop = -1;\n        this._sliceBottom = -1;\n        for (let y = 0; y < height; y++) {\n            const alpha = imageData.data[y * width * 4 + 3];\n            if (alpha > 127 && this._sliceTop === -1) {\n                this._sliceTop = y;\n                continue;\n            }\n            if (alpha < 127 && this._sliceTop > -1) {\n                this._sliceBottom = y;\n                break;\n            }\n        }\n    }\n    /**\n     * Gets or sets the internal DOM image used to render the control\n     */\n    set domImage(value) {\n        this._domImage = value;\n        this._loaded = false;\n        this._imageDataCache.data = null;\n        if (this._domImage.width) {\n            this._onImageLoaded();\n        }\n        else {\n            this._domImage.onload = () => {\n                this._onImageLoaded();\n            };\n        }\n    }\n    get domImage() {\n        return this._domImage;\n    }\n    _onImageLoaded() {\n        this._imageDataCache.data = null;\n        this._imageWidth = this._domImage.width;\n        this._imageHeight = this._domImage.height;\n        this._loaded = true;\n        if (this._populateNinePatchSlicesFromImage) {\n            this._extractNinePatchSliceDataFromImage();\n        }\n        if (this._autoScale) {\n            this.synchronizeSizeWithContent();\n        }\n        this.onImageLoadedObservable.notifyObservers(this);\n        this._markAsDirty();\n    }\n    /**\n     * Gets the image source url\n     */\n    get source() {\n        return this._source;\n    }\n    /**\n     * Resets the internal Image Element cache. Can reduce memory usage.\n     */\n    static ResetImageCache() {\n        Image.SourceImgCache.clear();\n    }\n    _removeCacheUsage(source) {\n        const value = source && Image.SourceImgCache.get(source);\n        if (value) {\n            value.timesUsed -= 1;\n            // Since the image isn't being used anymore, we can clean it from the cache\n            if (value.timesUsed === 0) {\n                Image.SourceImgCache.delete(source);\n            }\n        }\n    }\n    /**\n     * Gets or sets image source url\n     */\n    set source(value) {\n        var _a, _b;\n        if (this._source === value) {\n            return;\n        }\n        this._removeCacheUsage(this._source);\n        this._loaded = false;\n        this._source = value;\n        this._imageDataCache.data = null;\n        if (value) {\n            value = this._svgCheck(value);\n        }\n        // Should abstract platform instead of using LastCreatedEngine\n        const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        if (value && Image.SourceImgCache.has(value)) {\n            const cachedData = Image.SourceImgCache.get(value);\n            this._domImage = cachedData.img;\n            cachedData.timesUsed += 1;\n            if (cachedData.loaded) {\n                this._onImageLoaded();\n            }\n            else {\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\n            }\n            return;\n        }\n        this._domImage = engine.createCanvasImage();\n        if (value) {\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\n        }\n        this._domImage.onload = () => {\n            if (value) {\n                const cachedData = Image.SourceImgCache.get(value);\n                if (cachedData) {\n                    cachedData.loaded = true;\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\n                        waitingCallback();\n                    }\n                    cachedData.waitingForLoadCallback.length = 0;\n                    return;\n                }\n            }\n            this._onImageLoaded();\n        };\n        if (value) {\n            Tools.SetCorsBehavior(value, this._domImage);\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\n            this._domImage.src = value;\n        }\n    }\n    /**\n     * Checks for svg document with icon id present\n     * @param value\n     */\n    _svgCheck(value) {\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\n            this._isSVG = true;\n            const svgsrc = value.split(\"#\")[0];\n            const elemid = value.split(\"#\")[1];\n            // check if object alr exist in document\n            const svgExist = document.body.querySelector('object[data=\"' + svgsrc + '\"]');\n            if (svgExist) {\n                const svgDoc = svgExist.contentDocument;\n                // get viewbox width and height, get svg document width and height in px\n                if (svgDoc && svgDoc.documentElement) {\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\n                    const elem = svgDoc.getElementById(elemid);\n                    if (elem && vb && docwidth && docheight) {\n                        this._getSVGAttribs(svgExist, elemid);\n                        return value;\n                    }\n                }\n                // wait for object to load\n                svgExist.addEventListener(\"load\", () => {\n                    this._getSVGAttribs(svgExist, elemid);\n                });\n            }\n            else {\n                // create document object\n                const svgImage = document.createElement(\"object\");\n                svgImage.data = svgsrc;\n                svgImage.type = \"image/svg+xml\";\n                svgImage.width = \"0%\";\n                svgImage.height = \"0%\";\n                document.body.appendChild(svgImage);\n                // when the object has loaded, get the element attribs\n                svgImage.onload = () => {\n                    const svgobj = document.body.querySelector('object[data=\"' + svgsrc + '\"]');\n                    if (svgobj) {\n                        this._getSVGAttribs(svgobj, elemid);\n                    }\n                };\n            }\n            return svgsrc;\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\n     * given external svg file and icon id\n     * @param svgsrc\n     * @param elemid\n     */\n    _getSVGAttribs(svgsrc, elemid) {\n        const svgDoc = svgsrc.contentDocument;\n        // get viewbox width and height, get svg document width and height in px\n        if (svgDoc && svgDoc.documentElement) {\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\n            // get element bbox and matrix transform\n            const elem = svgDoc.getElementById(elemid);\n            if (vb && docwidth && docheight && elem) {\n                const vb_width = Number(vb.split(\" \")[2]);\n                const vb_height = Number(vb.split(\" \")[3]);\n                const elem_bbox = elem.getBBox();\n                let elem_matrix_a = 1;\n                let elem_matrix_d = 1;\n                let elem_matrix_e = 0;\n                let elem_matrix_f = 0;\n                const mainMatrix = elem.transform.baseVal.consolidate().matrix;\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\n                    elem_matrix_a = mainMatrix.a;\n                    elem_matrix_d = mainMatrix.d;\n                    elem_matrix_e = mainMatrix.e;\n                    elem_matrix_f = mainMatrix.f;\n                }\n                // compute source coordinates and dimensions\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\n                this._svgAttributesComputationCompleted = true;\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\n            }\n        }\n    }\n    /**\n     * Gets or sets the cell width to use when animation sheet is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellWidth() {\n        return this._cellWidth;\n    }\n    set cellWidth(value) {\n        if (this._cellWidth === value) {\n            return;\n        }\n        this._cellWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the cell height to use when animation sheet is enabled\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellHeight() {\n        return this._cellHeight;\n    }\n    set cellHeight(value) {\n        if (this._cellHeight === value) {\n            return;\n        }\n        this._cellHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\n     */\n    get cellId() {\n        return this._cellId;\n    }\n    set cellId(value) {\n        if (this._cellId === value) {\n            return;\n        }\n        this._cellId = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new Image\n     * @param name defines the control name\n     * @param url defines the image url\n     */\n    constructor(name, url = null) {\n        super(name);\n        this.name = name;\n        this._workingCanvas = null;\n        this._loaded = false;\n        this._stretch = Image.STRETCH_FILL;\n        this._autoScale = false;\n        this._sourceLeft = 0;\n        this._sourceTop = 0;\n        this._sourceWidth = 0;\n        this._sourceHeight = 0;\n        this._svgAttributesComputationCompleted = false;\n        this._isSVG = false;\n        this._cellWidth = 0;\n        this._cellHeight = 0;\n        this._cellId = -1;\n        this._populateNinePatchSlicesFromImage = false;\n        this._imageDataCache = { data: null, key: \"\" };\n        /**\n         * Observable notified when the content is loaded\n         */\n        this.onImageLoadedObservable = new Observable();\n        /**\n         * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\n         */\n        this.onSVGAttributesComputedObservable = new Observable();\n        this.source = url;\n    }\n    /**\n     * Tests if a given coordinates belong to the current control\n     * @param x defines x coordinate to test\n     * @param y defines y coordinate to test\n     * @returns true if the coordinates are inside the control\n     */\n    contains(x, y) {\n        if (!super.contains(x, y)) {\n            return false;\n        }\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\n            return true;\n        }\n        const width = this._currentMeasure.width | 0;\n        const height = this._currentMeasure.height | 0;\n        const key = width + \"_\" + height;\n        let imageData = this._imageDataCache.data;\n        if (!imageData || this._imageDataCache.key !== key) {\n            const canvas = this._workingCanvas;\n            const context = canvas.getContext(\"2d\");\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\n            this._imageDataCache.key = key;\n        }\n        x = (x - this._currentMeasure.left) | 0;\n        y = (y - this._currentMeasure.top) | 0;\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\n        return pickedPixel > 0;\n    }\n    _getTypeName() {\n        return \"Image\";\n    }\n    /** Force the control to synchronize with its content */\n    synchronizeSizeWithContent() {\n        if (!this._loaded) {\n            return;\n        }\n        this.width = this._domImage.width + \"px\";\n        this.height = this._domImage.height + \"px\";\n    }\n    _processMeasures(parentMeasure, context) {\n        if (this._loaded) {\n            switch (this._stretch) {\n                case Image.STRETCH_NONE:\n                    break;\n                case Image.STRETCH_FILL:\n                    break;\n                case Image.STRETCH_UNIFORM:\n                    break;\n                case Image.STRETCH_NINE_PATCH:\n                    break;\n                case Image.STRETCH_EXTEND:\n                    if (this._autoScale) {\n                        this.synchronizeSizeWithContent();\n                    }\n                    if (this.parent && this.parent.parent) {\n                        // Will update root size if root is not the top root\n                        this.parent.adaptWidthToChildren = true;\n                        this.parent.adaptHeightToChildren = true;\n                    }\n                    break;\n            }\n        }\n        super._processMeasures(parentMeasure, context);\n    }\n    _prepareWorkingCanvasForOpaqueDetection() {\n        var _a, _b;\n        if (!this._detectPointerOnOpaqueOnly) {\n            return;\n        }\n        const width = this._currentMeasure.width;\n        const height = this._currentMeasure.height;\n        if (!this._workingCanvas) {\n            const engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || EngineStore.LastCreatedEngine;\n            if (!engine) {\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\n            }\n            this._workingCanvas = engine.createCanvas(width, height);\n        }\n        const canvas = this._workingCanvas;\n        const context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, width, height);\n    }\n    _drawImage(context, sx, sy, sw, sh, tx, ty, tw, th) {\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\n        if (!this._detectPointerOnOpaqueOnly) {\n            return;\n        }\n        const canvas = this._workingCanvas;\n        context = canvas.getContext(\"2d\");\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\n    }\n    _draw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        let x, y, width, height;\n        if (this.cellId == -1) {\n            x = this._sourceLeft;\n            y = this._sourceTop;\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\n        }\n        else {\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\n            const column = (this.cellId / rowCount) >> 0;\n            const row = this.cellId % rowCount;\n            x = this.cellWidth * row;\n            y = this.cellHeight * column;\n            width = this.cellWidth;\n            height = this.cellHeight;\n        }\n        this._prepareWorkingCanvasForOpaqueDetection();\n        this._applyStates(context);\n        if (this._loaded) {\n            switch (this._stretch) {\n                case Image.STRETCH_NONE:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_FILL:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_UNIFORM: {\n                    const hRatio = this._currentMeasure.width / width;\n                    const vRatio = this._currentMeasure.height / height;\n                    const ratio = Math.min(hRatio, vRatio);\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\n                    break;\n                }\n                case Image.STRETCH_EXTEND:\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                    break;\n                case Image.STRETCH_NINE_PATCH:\n                    this._renderNinePatch(context);\n                    break;\n            }\n        }\n        context.restore();\n    }\n    _renderNinePatch(context) {\n        const leftWidth = this._sliceLeft;\n        const topHeight = this._sliceTop;\n        const bottomHeight = this._imageHeight - this._sliceBottom;\n        const rightWidth = this._imageWidth - this._sliceRight;\n        const centerWidth = this._sliceRight - this._sliceLeft;\n        const centerHeight = this._sliceBottom - this._sliceTop;\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\n        //Top Left\n        this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\n        //Top\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\n        this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\n        //Top Right\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\n        this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\n        //Left\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\n        this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\n        // Center\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\n        //Right\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\n        this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\n        //Bottom Left\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\n        this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\n        //Bottom\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\n        this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\n        //Bottom Right\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\n        this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\n    }\n    dispose() {\n        super.dispose();\n        this.onImageLoadedObservable.clear();\n        this.onSVGAttributesComputedObservable.clear();\n        this._removeCacheUsage(this._source);\n    }\n}\n/**\n * Cache of images to avoid loading the same image multiple times\n */\nImage.SourceImgCache = new Map();\n// Static\n/** STRETCH_NONE */\nImage.STRETCH_NONE = 0;\n/** STRETCH_FILL */\nImage.STRETCH_FILL = 1;\n/** STRETCH_UNIFORM */\nImage.STRETCH_UNIFORM = 2;\n/** STRETCH_EXTEND */\nImage.STRETCH_EXTEND = 3;\n/** NINE_PATCH */\nImage.STRETCH_NINE_PATCH = 4;\n__decorate([\n    serialize()\n], Image.prototype, \"detectPointerOnOpaqueOnly\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceLeft\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceRight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceTop\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sliceBottom\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceLeft\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceTop\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceWidth\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"sourceHeight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"populateNinePatchSlicesFromImage\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"autoScale\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"stretch\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"source\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellWidth\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellHeight\", null);\n__decorate([\n    serialize()\n], Image.prototype, \"cellId\", null);\nRegisterClass(\"BABYLON.GUI.Image\", Image);\n//# sourceMappingURL=image.js.map","import { Rectangle } from \"./rectangle.js\";\nimport { Control } from \"./control.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { Image } from \"./image.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create 2D buttons\n */\nexport class Button extends Rectangle {\n    /**\n     * Returns the image part of the button (if any)\n     */\n    get image() {\n        return this._image;\n    }\n    /**\n     * Returns the TextBlock part of the button (if any)\n     */\n    get textBlock() {\n        return this._textBlock;\n    }\n    /**\n     * Creates a new Button\n     * @param name defines the name of the button\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        /**\n         * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\n         */\n        this.delegatePickingToChildren = false;\n        this.thickness = 1;\n        this.isPointerBlocker = true;\n        let alphaStore = null;\n        this.pointerEnterAnimation = () => {\n            alphaStore = this.alpha;\n            this.alpha -= 0.1;\n        };\n        this.pointerOutAnimation = () => {\n            if (alphaStore !== null) {\n                this.alpha = alphaStore;\n            }\n        };\n        this.pointerDownAnimation = () => {\n            this.scaleX -= 0.05;\n            this.scaleY -= 0.05;\n        };\n        this.pointerUpAnimation = () => {\n            this.scaleX += 0.05;\n            this.scaleY += 0.05;\n        };\n    }\n    _getTypeName() {\n        return \"Button\";\n    }\n    // While being a container, the button behaves like a control.\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\n            return false;\n        }\n        if (!super.contains(x, y)) {\n            return false;\n        }\n        if (this.delegatePickingToChildren) {\n            let contains = false;\n            for (let index = this._children.length - 1; index >= 0; index--) {\n                const child = this._children[index];\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\n                    contains = true;\n                    break;\n                }\n            }\n            if (!contains) {\n                return false;\n            }\n        }\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerEnter(target, pi) {\n        if (!super._onPointerEnter(target, pi)) {\n            return false;\n        }\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\n            this.pointerEnterAnimation();\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerOut(target, pi, force = false) {\n        if (!this.isReadOnly && this.pointerOutAnimation) {\n            this.pointerOutAnimation();\n        }\n        super._onPointerOut(target, pi, force);\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (!this.isReadOnly && this.pointerDownAnimation) {\n            this.pointerDownAnimation();\n        }\n        return true;\n    }\n    _getRectangleFill(context) {\n        if (this.isEnabled) {\n            return this._getBackgroundColor(context);\n        }\n        else {\n            return this._disabledColor;\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n        if (!this.isReadOnly && this.pointerUpAnimation) {\n            this.pointerUpAnimation();\n        }\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n    }\n    /**\n     * Serializes the current button\n     * @param serializationObject defines the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        if (this._textBlock) {\n            serializationObject.textBlockName = this._textBlock.name;\n        }\n        if (this._image) {\n            serializationObject.imageName = this._image.name;\n        }\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        super._parseFromContent(serializedObject, host);\n        if (serializedObject.textBlockName) {\n            this._textBlock = this.getChildByName(serializedObject.textBlockName);\n        }\n        if (serializedObject.imageName) {\n            this._image = this.getChildByName(serializedObject.imageName);\n        }\n    }\n    // Statics\n    /**\n     * Creates a new button made with an image and a text\n     * @param name defines the name of the button\n     * @param text defines the text of the button\n     * @param imageUrl defines the url of the image\n     * @returns a new Button\n     */\n    static CreateImageButton(name, text, imageUrl) {\n        const result = new this(name);\n        // Adding text\n        const textBlock = new TextBlock(name + \"_button\", text);\n        textBlock.textWrapping = true;\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        textBlock.paddingLeft = \"20%\";\n        result.addControl(textBlock);\n        // Adding image\n        const iconImage = new Image(name + \"_icon\", imageUrl);\n        iconImage.width = \"20%\";\n        iconImage.stretch = Image.STRETCH_UNIFORM;\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        result.addControl(iconImage);\n        // Store\n        result._image = iconImage;\n        result._textBlock = textBlock;\n        return result;\n    }\n    /**\n     * Creates a new button made with an image\n     * @param name defines the name of the button\n     * @param imageUrl defines the url of the image\n     * @returns a new Button\n     */\n    static CreateImageOnlyButton(name, imageUrl) {\n        const result = new this(name);\n        // Adding image\n        const iconImage = new Image(name + \"_icon\", imageUrl);\n        iconImage.stretch = Image.STRETCH_FILL;\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        result.addControl(iconImage);\n        // Store\n        result._image = iconImage;\n        return result;\n    }\n    /**\n     * Creates a new button made with a text\n     * @param name defines the name of the button\n     * @param text defines the text of the button\n     * @returns a new Button\n     */\n    static CreateSimpleButton(name, text) {\n        const result = new this(name);\n        // Adding text\n        const textBlock = new TextBlock(name + \"_button\", text);\n        textBlock.textWrapping = true;\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        result.addControl(textBlock);\n        // Store\n        result._textBlock = textBlock;\n        return result;\n    }\n    /**\n     * Creates a new button made with an image and a centered text\n     * @param name defines the name of the button\n     * @param text defines the text of the button\n     * @param imageUrl defines the url of the image\n     * @returns a new Button\n     */\n    static CreateImageWithCenterTextButton(name, text, imageUrl) {\n        const result = new this(name);\n        // Adding image\n        const iconImage = new Image(name + \"_icon\", imageUrl);\n        iconImage.stretch = Image.STRETCH_FILL;\n        result.addControl(iconImage);\n        // Adding text\n        const textBlock = new TextBlock(name + \"_button\", text);\n        textBlock.textWrapping = true;\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        result.addControl(textBlock);\n        // Store\n        result._image = iconImage;\n        result._textBlock = textBlock;\n        return result;\n    }\n}\nRegisterClass(\"BABYLON.GUI.Button\", Button);\n//# sourceMappingURL=button.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { TextWrapping } from \"./textBlock.js\";\n/**\n * Class used to create a 2D stack panel container\n */\nexport class StackPanel extends Container {\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\n    get isVertical() {\n        return this._isVertical;\n    }\n    set isVertical(value) {\n        if (this._isVertical === value) {\n            return;\n        }\n        this._isVertical = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the spacing (in pixels) between each child.\n     */\n    get spacing() {\n        return this._spacing;\n    }\n    set spacing(value) {\n        if (this._spacing === value) {\n            return;\n        }\n        this._spacing = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets panel width.\n     * This value should not be set when in horizontal mode as it will be computed automatically\n     */\n    set width(value) {\n        if (!this._doNotTrackManualChanges) {\n            this._manualWidth = true;\n        }\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    get width() {\n        return this._width.toString(this._host);\n    }\n    /**\n     * Gets or sets panel height.\n     * This value should not be set when in vertical mode as it will be computed automatically\n     */\n    set height(value) {\n        if (!this._doNotTrackManualChanges) {\n            this._manualHeight = true;\n        }\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    get height() {\n        return this._height.toString(this._host);\n    }\n    /**\n     * Creates a new StackPanel\n     * @param name defines control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._isVertical = true;\n        this._manualWidth = false;\n        this._manualHeight = false;\n        this._doNotTrackManualChanges = false;\n        this._spacing = 0;\n        /**\n         * Gets or sets a boolean indicating that layout warnings should be ignored\n         */\n        this.ignoreLayoutWarnings = false;\n    }\n    _getTypeName() {\n        return \"StackPanel\";\n    }\n    /**\n     * @internal\n     */\n    _preMeasure(parentMeasure, context) {\n        for (const child of this._children) {\n            if (this._isVertical) {\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n            }\n            else {\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            }\n        }\n        super._preMeasure(parentMeasure, context);\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.copyFrom(parentMeasure);\n        this._measureForChildren.left = this._currentMeasure.left;\n        this._measureForChildren.top = this._currentMeasure.top;\n        if (!this.isVertical || this._manualWidth) {\n            this._measureForChildren.width = this._currentMeasure.width;\n        }\n        if (this.isVertical || this._manualHeight) {\n            this._measureForChildren.height = this._currentMeasure.height;\n        }\n    }\n    _postMeasure() {\n        let stackWidth = 0;\n        let stackHeight = 0;\n        const childrenCount = this._children.length;\n        for (let index = 0; index < childrenCount; index++) {\n            const child = this._children[index];\n            if (!child.isVisible || child.notRenderable) {\n                continue;\n            }\n            if (this._isVertical) {\n                if (child.top !== stackHeight + \"px\") {\n                    child.top = stackHeight + \"px\";\n                    this._rebuildLayout = true;\n                    child._top.ignoreAdaptiveScaling = true;\n                }\n                if (child._height.isPercentage && !child._automaticSize) {\n                    if (!this.ignoreLayoutWarnings) {\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\n                    }\n                }\n                else {\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n                }\n            }\n            else {\n                if (child.left !== stackWidth + \"px\") {\n                    child.left = stackWidth + \"px\";\n                    this._rebuildLayout = true;\n                    child._left.ignoreAdaptiveScaling = true;\n                }\n                if (child._width.isPercentage &&\n                    !child._automaticSize &&\n                    child.getClassName() === \"TextBlock\" &&\n                    child.textWrapping !== TextWrapping.Clip &&\n                    !child.forceResizeWidth) {\n                    if (!this.ignoreLayoutWarnings) {\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\n                    }\n                }\n                else {\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\n                }\n            }\n        }\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\n        this._doNotTrackManualChanges = true;\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\n        // User can now define their own height and width for stack panel.\n        let panelWidthChanged = false;\n        let panelHeightChanged = false;\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\n            // do not specify height if strictly defined by user\n            const previousHeight = this.height;\n            this.height = stackHeight + \"px\";\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\n        }\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\n            // do not specify width if strictly defined by user\n            const previousWidth = this.width;\n            this.width = stackWidth + \"px\";\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\n        }\n        if (panelHeightChanged) {\n            this._height.ignoreAdaptiveScaling = true;\n        }\n        if (panelWidthChanged) {\n            this._width.ignoreAdaptiveScaling = true;\n        }\n        this._doNotTrackManualChanges = false;\n        if (panelWidthChanged || panelHeightChanged) {\n            this._rebuildLayout = true;\n        }\n        super._postMeasure();\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.manualWidth = this._manualWidth;\n        serializationObject.manualHeight = this._manualHeight;\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        this._manualWidth = serializedObject.manualWidth;\n        this._manualHeight = serializedObject.manualHeight;\n        super._parseFromContent(serializedObject, host);\n    }\n}\n__decorate([\n    serialize()\n], StackPanel.prototype, \"ignoreLayoutWarnings\", void 0);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"isVertical\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"spacing\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"width\", null);\n__decorate([\n    serialize()\n], StackPanel.prototype, \"height\", null);\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\n//# sourceMappingURL=stackPanel.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Control } from \"./control.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to represent a 2D checkbox\n */\nexport class Checkbox extends Control {\n    /** Gets or sets border thickness  */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the ratio between overall size and check size */\n    get checkSizeRatio() {\n        return this._checkSizeRatio;\n    }\n    set checkSizeRatio(value) {\n        value = Math.max(Math.min(1, value), 0);\n        if (this._checkSizeRatio === value) {\n            return;\n        }\n        this._checkSizeRatio = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\n    get isChecked() {\n        return this._isChecked;\n    }\n    set isChecked(value) {\n        if (this._isChecked === value) {\n            return;\n        }\n        this._isChecked = value;\n        this._markAsDirty();\n        this.onIsCheckedChangedObservable.notifyObservers(value);\n    }\n    /**\n     * Creates a new CheckBox\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._isChecked = false;\n        this._background = \"black\";\n        this._checkSizeRatio = 0.8;\n        this._thickness = 1;\n        /**\n         * Observable raised when isChecked property changes\n         */\n        this.onIsCheckedChangedObservable = new Observable();\n        this.isPointerBlocker = true;\n    }\n    _getTypeName() {\n        return \"Checkbox\";\n    }\n    /**\n     * @internal\n     */\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        const actualWidth = this._currentMeasure.width - this._thickness;\n        const actualHeight = this._currentMeasure.height - this._thickness;\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        if (this._isChecked) {\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\n            const offsetWidth = actualWidth * this._checkSizeRatio;\n            const offsetHeight = actualHeight * this._checkSizeRatio;\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2, offsetWidth, offsetHeight);\n        }\n        context.strokeStyle = this.color;\n        context.lineWidth = this._thickness;\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\n        context.restore();\n    }\n    // Events\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (!this.isReadOnly) {\n            this.isChecked = !this.isChecked;\n        }\n        return true;\n    }\n    /**\n     * Utility function to easily create a checkbox with a header\n     * @param title defines the label to use for the header\n     * @param onValueChanged defines the callback to call when value changes\n     * @returns a StackPanel containing the checkbox and a textBlock\n     */\n    static AddCheckBoxWithHeader(title, onValueChanged) {\n        const panel = new StackPanel();\n        panel.isVertical = false;\n        panel.height = \"30px\";\n        const checkbox = new Checkbox();\n        checkbox.width = \"20px\";\n        checkbox.height = \"20px\";\n        checkbox.isChecked = true;\n        checkbox.color = \"green\";\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\n        panel.addControl(checkbox);\n        const header = new TextBlock();\n        header.text = title;\n        header.width = \"180px\";\n        header.paddingLeft = \"5px\";\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        header.color = \"white\";\n        panel.addControl(header);\n        return panel;\n    }\n}\n__decorate([\n    serialize()\n], Checkbox.prototype, \"thickness\", null);\n__decorate([\n    serialize()\n], Checkbox.prototype, \"checkSizeRatio\", null);\n__decorate([\n    serialize()\n], Checkbox.prototype, \"background\", null);\n__decorate([\n    serialize()\n], Checkbox.prototype, \"isChecked\", null);\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\n//# sourceMappingURL=checkbox.js.map","/** @internal */\nexport class TextWrapper {\n    get text() {\n        return this._characters ? this._characters.join(\"\") : this._text;\n    }\n    set text(txt) {\n        this._text = txt;\n        this._characters = Array.from && Array.from(txt);\n    }\n    get length() {\n        return this._characters ? this._characters.length : this._text.length;\n    }\n    removePart(idxStart, idxEnd, insertTxt) {\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\n        if (this._characters) {\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\n        }\n    }\n    charAt(idx) {\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\n    }\n    substr(from, length) {\n        if (this._characters) {\n            if (isNaN(from)) {\n                from = 0;\n            }\n            else if (from >= 0) {\n                from = Math.min(from, this._characters.length);\n            }\n            else {\n                from = this._characters.length + Math.max(from, -this._characters.length);\n            }\n            if (length === undefined) {\n                length = this._characters.length - from;\n            }\n            else if (isNaN(length)) {\n                length = 0;\n            }\n            else if (length < 0) {\n                length = 0;\n            }\n            const temp = [];\n            while (--length >= 0) {\n                temp[length] = this._characters[from + length];\n            }\n            return temp.join(\"\");\n        }\n        return this._text.substr(from, length);\n    }\n    substring(from, to) {\n        if (this._characters) {\n            if (isNaN(from)) {\n                from = 0;\n            }\n            else if (from > this._characters.length) {\n                from = this._characters.length;\n            }\n            else if (from < 0) {\n                from = 0;\n            }\n            if (to === undefined) {\n                to = this._characters.length;\n            }\n            else if (isNaN(to)) {\n                to = 0;\n            }\n            else if (to > this._characters.length) {\n                to = this._characters.length;\n            }\n            else if (to < 0) {\n                to = 0;\n            }\n            const temp = [];\n            let idx = 0;\n            while (from < to) {\n                temp[idx++] = this._characters[from++];\n            }\n            return temp.join(\"\");\n        }\n        return this._text.substring(from, to);\n    }\n    isWord(index) {\n        const rWord = /\\w/g;\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\n    }\n}\n//# sourceMappingURL=textWrapper.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ClipboardEventTypes } from \"@babylonjs/core/Events/clipboardEvents.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { Control } from \"./control.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { TextWrapper } from \"./textWrapper.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control {\n    /** Gets or sets the maximum width allowed by the control */\n    get maxWidth() {\n        return this._maxWidth.toString(this._host);\n    }\n    /** Gets the maximum width allowed by the control in pixels */\n    get maxWidthInPixels() {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set maxWidth(value) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    get highligherOpacity() {\n        return this._highligherOpacity;\n    }\n    set highligherOpacity(value) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    get onFocusSelectAll() {\n        return this._onFocusSelectAll;\n    }\n    set onFocusSelectAll(value) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the text hightlight color */\n    get textHighlightColor() {\n        return this._textHighlightColor;\n    }\n    set textHighlightColor(value) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets control margin */\n    get margin() {\n        return this._margin.toString(this._host);\n    }\n    /** Gets control margin in pixels */\n    get marginInPixels() {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set margin(value) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    get autoStretchWidth() {\n        return this._autoStretchWidth;\n    }\n    set autoStretchWidth(value) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets border thickness */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the background color when focused */\n    get focusedBackground() {\n        return this._focusedBackground;\n    }\n    set focusedBackground(value) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the background color when focused */\n    get focusedColor() {\n        return this._focusedColor;\n    }\n    set focusedColor(value) {\n        if (this._focusedColor === value) {\n            return;\n        }\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the placeholder color */\n    get placeholderColor() {\n        return this._placeholderColor;\n    }\n    set placeholderColor(value) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the text displayed when the control is empty */\n    get placeholderText() {\n        return this._placeholderText;\n    }\n    set placeholderText(value) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the dead key. 0 to disable. */\n    get deadKey() {\n        return this._deadKey;\n    }\n    set deadKey(flag) {\n        this._deadKey = flag;\n    }\n    /** Gets or sets the highlight text */\n    get highlightedText() {\n        return this._highlightedText;\n    }\n    set highlightedText(text) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n    /** Gets or sets if the current key should be added */\n    get addKey() {\n        return this._addKey;\n    }\n    set addKey(flag) {\n        this._addKey = flag;\n    }\n    /** Gets or sets the value of the current key being entered */\n    get currentKey() {\n        return this._currentKey;\n    }\n    set currentKey(key) {\n        this._currentKey = key;\n    }\n    /** Gets or sets the text displayed in the control */\n    get text() {\n        return this._textWrapper.text;\n    }\n    set text(value) {\n        const valueAsString = value.toString(); // Forcing convertion\n        if (!this._textWrapper) {\n            this._textWrapper = new TextWrapper();\n        }\n        if (this._textWrapper.text === valueAsString) {\n            return;\n        }\n        this._textWrapper.text = valueAsString;\n        this._textHasChanged();\n    }\n    _textHasChanged() {\n        this._markAsDirty();\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n    /** Gets or sets control width */\n    get width() {\n        return this._width.toString(this._host);\n    }\n    set width(value) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n        this.autoStretchWidth = false;\n    }\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(name, text = \"\") {\n        super(name);\n        this.name = name;\n        this._placeholderText = \"\";\n        this._background = \"#222222\";\n        this._focusedBackground = \"#000000\";\n        this._focusedColor = \"white\";\n        this._placeholderColor = \"gray\";\n        this._thickness = 1;\n        this._margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n        this._autoStretchWidth = true;\n        this._maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        this._isFocused = false;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._deadKey = false;\n        this._addKey = true;\n        this._currentKey = \"\";\n        this._isTextHighlightOn = false;\n        this._textHighlightColor = \"#d5e0ff\";\n        this._highligherOpacity = 0.4;\n        this._highlightedText = \"\";\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = 0;\n        this._cursorIndex = -1;\n        this._onFocusSelectAll = false;\n        this._isPointerDown = false;\n        /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n        this.promptMessage = \"Please enter text:\";\n        /** Force disable prompt on mobile device */\n        this.disableMobilePrompt = false;\n        /** Observable raised when the text changes */\n        this.onTextChangedObservable = new Observable();\n        /** Observable raised just before an entered character is to be added */\n        this.onBeforeKeyAddObservable = new Observable();\n        /** Observable raised when the control gets the focus */\n        this.onFocusObservable = new Observable();\n        /** Observable raised when the control loses the focus */\n        this.onBlurObservable = new Observable();\n        /**Observable raised when the text is highlighted */\n        this.onTextHighlightObservable = new Observable();\n        /**Observable raised when copy event is triggered */\n        this.onTextCopyObservable = new Observable();\n        /** Observable raised when cut event is triggered */\n        this.onTextCutObservable = new Observable();\n        /** Observable raised when paste event is triggered */\n        this.onTextPasteObservable = new Observable();\n        /** Observable raised when a key event was processed */\n        this.onKeyboardEventProcessedObservable = new Observable();\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n    /** @internal */\n    onBlur() {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n        this.onBlurObservable.notifyObservers(this);\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        const scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n    /** @internal */\n    onFocus() {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n        this.onFocusObservable.notifyObservers(this);\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\n            const value = prompt(this.promptMessage);\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n        this._host.registerClipboardEvents();\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default:\n                    return;\n            }\n        });\n        const scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n    }\n    /**\n     * Function to focus an inputText programmatically\n     */\n    focus() {\n        this._host.moveFocusToControl(this);\n    }\n    /**\n     * Function to unfocus an inputText programmatically\n     */\n    blur() {\n        this._host.focusedControl = null;\n    }\n    _getTypeName() {\n        return \"InputText\";\n    }\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    keepsFocusWith() {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n    /**\n     * @internal\n     */\n    processKey(keyCode, key, evt) {\n        var _a;\n        if (this.isReadOnly) {\n            return;\n        }\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\n                    //delete the highlighted text\n                    if (this.isTextHighlightOn) {\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n                        this._textHasChanged();\n                        this.isTextHighlightOn = false;\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\n                    }\n                    else {\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\n                            this._textHasChanged();\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this.isTextHighlightOn) {\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n                    this._textHasChanged();\n                    this.isTextHighlightOn = false;\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\n                    this._textHasChanged();\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this.isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this.isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._textWrapper.length;\n                this._blinkIsEven = false;\n                this.isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._textWrapper.length) {\n                    this._cursorOffset = this._textWrapper.length;\n                }\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this.isTextHighlightOn) {\n                            if (this._textWrapper.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\n                        this._cursorOffset = this._textWrapper.length;\n                        this.isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this.isTextHighlightOn) {\n                        this.isTextHighlightOn = true;\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                    }\n                    else {\n                        this.isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this.isTextHighlightOn) {\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n                    this.isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this._textWrapper.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this.isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this.isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._textWrapper.length;\n                        this.isTextHighlightOn = true;\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n                    if (!this.isTextHighlightOn) {\n                        this.isTextHighlightOn = true;\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                    }\n                    else {\n                        this.isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this.isTextHighlightOn) {\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\n                    this.isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this.isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n        }\n        if (keyCode === 32) {\n            key = (_a = evt === null || evt === void 0 ? void 0 : evt.key) !== null && _a !== void 0 ? _a : \" \";\n        }\n        this._deadKey = key === \"Dead\";\n        // Printable characters\n        if (key &&\n            (keyCode === -1 || // Direct access\n                keyCode === 32 || // Space\n                keyCode === 34 || // \"    add support for single and double quotes\n                keyCode === 39 || // '\n                (keyCode > 47 && keyCode < 64) || // Numbers\n                (keyCode > 64 && keyCode < 91) || // Letters\n                (keyCode > 159 && keyCode < 193) || // Special characters\n                (keyCode > 218 && keyCode < 223) || // Special characters\n                (keyCode > 95 && keyCode < 112))) {\n            // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey && !this._deadKey) {\n                if (this.isTextHighlightOn) {\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\n                    this._textHasChanged();\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\n                    this.isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += this._deadKey && (evt === null || evt === void 0 ? void 0 : evt.key) ? evt.key : key;\n                }\n                else {\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\n                    this._textHasChanged();\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _updateValueFromCursorIndex(offset) {\n        //update the cursor\n        this._blinkIsEven = false;\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        }\n        else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\n            }\n            else {\n                this.isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this.isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _processDblClick(evt) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n        this.isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @internal */\n    _selectAllText() {\n        this._blinkIsEven = true;\n        this.isTextHighlightOn = true;\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._textWrapper.length;\n        this._cursorOffset = this._textWrapper.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    processKeyboard(evt) {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n    /**\n     * @internal\n     */\n    _onCopyText(ev) {\n        this.isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch (_a) { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /**\n     * @internal\n     */\n    _onCutText(ev) {\n        if (!this._highlightedText) {\n            return;\n        }\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\n        this._textHasChanged();\n        this.isTextHighlightOn = false;\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch (_a) { } //pass\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /**\n     * @internal\n     */\n    _onPasteText(ev) {\n        let data = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\n        this._textHasChanged();\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        }\n        else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        if (!this._fontOffset || this._wasDirty) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n        // Text\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n        let text = this._beforeRenderText(this._textWrapper);\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\n            text = new TextWrapper();\n            text.text = this._placeholderText;\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n        this._textWidth = context.measureText(text.text).width;\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\n        }\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n        if (this._isFocused && this._textWidth > availableWidth) {\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        }\n        else {\n            this._scrollLeft = clipTextLeft;\n        }\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\n        // Cursor\n        if (this._isFocused) {\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                const rightPosition = this._scrollLeft + this._textWidth;\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                let currentSize = 0;\n                this._cursorOffset = 0;\n                let previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n            // Render cursor\n            if (!this._blinkIsEven) {\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += clipTextLeft - cursorLeft;\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                }\n                else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this.isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n            //show the highlighted text\n            if (this.isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            }\n            else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n            context.lineWidth = this._thickness;\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n        context.restore();\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        this._clickedCoordinate = coordinates.x;\n        this.isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        this._focusedBy = pi.event.pointerType;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n        return true;\n    }\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick) {\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n    _beforeRenderText(textWrapper) {\n        return textWrapper;\n    }\n    /** @internal */\n    set isTextHighlightOn(value) {\n        if (this._isTextHighlightOn === value) {\n            return;\n        }\n        if (value) {\n            this.onTextHighlightObservable.notifyObservers(this);\n        }\n        this._isTextHighlightOn = value;\n    }\n    /** @internal */\n    get isTextHighlightOn() {\n        return this._isTextHighlightOn;\n    }\n    dispose() {\n        super.dispose();\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n__decorate([\n    serialize()\n], InputText.prototype, \"promptMessage\", void 0);\n__decorate([\n    serialize()\n], InputText.prototype, \"disableMobilePrompt\", void 0);\n__decorate([\n    serialize()\n], InputText.prototype, \"maxWidth\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"highligherOpacity\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"onFocusSelectAll\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"textHighlightColor\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"margin\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"autoStretchWidth\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"thickness\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"focusedBackground\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"focusedColor\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"background\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"placeholderColor\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"placeholderText\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"deadKey\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"text\", null);\n__decorate([\n    serialize()\n], InputText.prototype, \"width\", null);\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\n//# sourceMappingURL=inputText.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { Control } from \"./control.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create a 2D grid container\n */\nexport class Grid extends Container {\n    /**\n     * Sets/Gets a boolean indicating that control content must be clipped\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    set clipContent(value) {\n        this._clipContent = value;\n        // This value has to be replicated on all of the container cells\n        for (const key in this._cells) {\n            this._cells[key].clipContent = value;\n        }\n    }\n    get clipContent() {\n        return this._clipContent;\n    }\n    /**\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\n     */\n    set clipChildren(value) {\n        this._clipChildren = value;\n        // This value has to be replicated on all of the container cells\n        for (const key in this._cells) {\n            this._cells[key].clipChildren = value;\n        }\n    }\n    get clipChildren() {\n        return this._clipChildren;\n    }\n    /**\n     * Gets the number of columns\n     */\n    get columnCount() {\n        return this._columnDefinitions.length;\n    }\n    /**\n     * Gets the number of rows\n     */\n    get rowCount() {\n        return this._rowDefinitions.length;\n    }\n    /** Gets the list of children */\n    get children() {\n        return this._childControls;\n    }\n    /** Gets the list of cells (e.g. the containers) */\n    get cells() {\n        return this._cells;\n    }\n    /**\n     * Gets the definition of a specific row\n     * @param index defines the index of the row\n     * @returns the row definition\n     */\n    getRowDefinition(index) {\n        if (index < 0 || index >= this._rowDefinitions.length) {\n            return null;\n        }\n        return this._rowDefinitions[index];\n    }\n    /**\n     * Gets the definition of a specific column\n     * @param index defines the index of the column\n     * @returns the column definition\n     */\n    getColumnDefinition(index) {\n        if (index < 0 || index >= this._columnDefinitions.length) {\n            return null;\n        }\n        return this._columnDefinitions[index];\n    }\n    /**\n     * Adds a new row to the grid\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\n     * @returns the current grid\n     */\n    addRowDefinition(height, isPixel = false) {\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty()));\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Adds a new column to the grid\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\n     * @returns the current grid\n     */\n    addColumnDefinition(width, isPixel = false) {\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty()));\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Update a row definition\n     * @param index defines the index of the row to update\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\n     * @returns the current grid\n     */\n    setRowDefinition(index, height, isPixel = false) {\n        if (index < 0 || index >= this._rowDefinitions.length) {\n            return this;\n        }\n        const current = this._rowDefinitions[index];\n        if (current && current.isPixel === isPixel && current.value === height) {\n            return this;\n        }\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty());\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Update a column definition\n     * @param index defines the index of the column to update\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\n     * @returns the current grid\n     */\n    setColumnDefinition(index, width, isPixel = false) {\n        if (index < 0 || index >= this._columnDefinitions.length) {\n            return this;\n        }\n        const current = this._columnDefinitions[index];\n        if (current && current.isPixel === isPixel && current.value === width) {\n            return this;\n        }\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty());\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Gets the list of children stored in a specific cell\n     * @param row defines the row to check\n     * @param column defines the column to check\n     * @returns the list of controls\n     */\n    getChildrenAt(row, column) {\n        const cell = this._cells[`${row}:${column}`];\n        if (!cell) {\n            return null;\n        }\n        return cell.children;\n    }\n    /**\n     * Gets a string representing the child cell info (row x column)\n     * @param child defines the control to get info from\n     * @returns a string containing the child cell info (row x column)\n     */\n    getChildCellInfo(child) {\n        return child._tag;\n    }\n    _removeCell(cell, key) {\n        if (!cell) {\n            return;\n        }\n        super.removeControl(cell);\n        for (const control of cell.children) {\n            const childIndex = this._childControls.indexOf(control);\n            if (childIndex !== -1) {\n                this._childControls.splice(childIndex, 1);\n            }\n        }\n        delete this._cells[key];\n    }\n    _offsetCell(previousKey, key) {\n        if (!this._cells[key]) {\n            return;\n        }\n        this._cells[previousKey] = this._cells[key];\n        for (const control of this._cells[previousKey].children) {\n            control._tag = previousKey;\n        }\n        delete this._cells[key];\n    }\n    /**\n     * Remove a column definition at specified index\n     * @param index defines the index of the column to remove\n     * @returns the current grid\n     */\n    removeColumnDefinition(index) {\n        if (index < 0 || index >= this._columnDefinitions.length) {\n            return this;\n        }\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\n            const key = `${x}:${index}`;\n            const cell = this._cells[key];\n            this._removeCell(cell, key);\n        }\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\n                const previousKey = `${x}:${y - 1}`;\n                const key = `${x}:${y}`;\n                this._offsetCell(previousKey, key);\n            }\n        }\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\n        this._columnDefinitions.splice(index, 1);\n        this._columnDefinitionObservers.splice(index, 1);\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Remove a row definition at specified index\n     * @param index defines the index of the row to remove\n     * @returns the current grid\n     */\n    removeRowDefinition(index) {\n        if (index < 0 || index >= this._rowDefinitions.length) {\n            return this;\n        }\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\n            const key = `${index}:${y}`;\n            const cell = this._cells[key];\n            this._removeCell(cell, key);\n        }\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\n                const previousKey = `${x - 1}:${y}`;\n                const key = `${x}:${y}`;\n                this._offsetCell(previousKey, key);\n            }\n        }\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\n        this._rowDefinitions.splice(index, 1);\n        this._rowDefinitionObservers.splice(index, 1);\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Adds a new control to the current grid\n     * @param control defines the control to add\n     * @param row defines the row where to add the control (0 by default)\n     * @param column defines the column where to add the control (0 by default)\n     * @returns the current grid\n     */\n    addControl(control, row = 0, column = 0) {\n        if (this._rowDefinitions.length === 0) {\n            // Add default row definition\n            this.addRowDefinition(1, false);\n        }\n        if (this._columnDefinitions.length === 0) {\n            // Add default column definition\n            this.addColumnDefinition(1, false);\n        }\n        if (this._childControls.indexOf(control) !== -1) {\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\n            return this;\n        }\n        const x = Math.min(row, this._rowDefinitions.length - 1);\n        const y = Math.min(column, this._columnDefinitions.length - 1);\n        const key = `${x}:${y}`;\n        let goodContainer = this._cells[key];\n        if (!goodContainer) {\n            goodContainer = new Container(key);\n            this._cells[key] = goodContainer;\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n            goodContainer.clipContent = this.clipContent;\n            goodContainer.clipChildren = this.clipChildren;\n            super.addControl(goodContainer);\n        }\n        goodContainer.addControl(control);\n        this._childControls.push(control);\n        control._tag = key;\n        control.parent = this;\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Removes a control from the current container\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        const index = this._childControls.indexOf(control);\n        if (index !== -1) {\n            this._childControls.splice(index, 1);\n        }\n        const cell = this._cells[control._tag];\n        if (cell) {\n            cell.removeControl(control);\n            control._tag = null;\n        }\n        this._markAsDirty();\n        return this;\n    }\n    /**\n     * Creates a new Grid\n     * @param name defines control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._rowDefinitions = new Array();\n        this._rowDefinitionObservers = [];\n        this._columnDefinitions = new Array();\n        this._columnDefinitionObservers = [];\n        this._cells = {};\n        this._childControls = new Array();\n    }\n    _getTypeName() {\n        return \"Grid\";\n    }\n    _getGridDefinitions(definitionCallback) {\n        const widths = [];\n        const heights = [];\n        const lefts = [];\n        const tops = [];\n        let availableWidth = this._currentMeasure.width;\n        let globalWidthPercentage = 0;\n        let availableHeight = this._currentMeasure.height;\n        let globalHeightPercentage = 0;\n        // Heights\n        let index = 0;\n        for (const rowDefinition of this._rowDefinitions) {\n            if (rowDefinition.isPixel) {\n                const height = rowDefinition.getValue(this._host);\n                availableHeight -= height;\n                heights[index] = height;\n            }\n            else {\n                globalHeightPercentage += rowDefinition.value;\n            }\n            index++;\n        }\n        let top = 0;\n        index = 0;\n        for (const rowDefinition of this._rowDefinitions) {\n            tops.push(top);\n            if (!rowDefinition.isPixel) {\n                const height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);\n                top += height;\n                heights[index] = height;\n            }\n            else {\n                top += rowDefinition.getValue(this._host);\n            }\n            index++;\n        }\n        // Widths\n        index = 0;\n        for (const columnDefinition of this._columnDefinitions) {\n            if (columnDefinition.isPixel) {\n                const width = columnDefinition.getValue(this._host);\n                availableWidth -= width;\n                widths[index] = width;\n            }\n            else {\n                globalWidthPercentage += columnDefinition.value;\n            }\n            index++;\n        }\n        let left = 0;\n        index = 0;\n        for (const columnDefinition of this._columnDefinitions) {\n            lefts.push(left);\n            if (!columnDefinition.isPixel) {\n                const width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);\n                left += width;\n                widths[index] = width;\n            }\n            else {\n                left += columnDefinition.getValue(this._host);\n            }\n            index++;\n        }\n        definitionCallback(lefts, tops, widths, heights);\n    }\n    _additionalProcessing(parentMeasure, context) {\n        this._getGridDefinitions((lefts, tops, widths, heights) => {\n            // Setting child sizes\n            for (const key in this._cells) {\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\n                    continue;\n                }\n                const split = key.split(\":\");\n                const x = parseInt(split[0]);\n                const y = parseInt(split[1]);\n                const cell = this._cells[key];\n                cell.leftInPixels = lefts[y];\n                cell.topInPixels = tops[x];\n                cell.widthInPixels = widths[y];\n                cell.heightInPixels = heights[x];\n                cell._left.ignoreAdaptiveScaling = true;\n                cell._top.ignoreAdaptiveScaling = true;\n                cell._width.ignoreAdaptiveScaling = true;\n                cell._height.ignoreAdaptiveScaling = true;\n            }\n        });\n        super._additionalProcessing(parentMeasure, context);\n    }\n    _flagDescendantsAsMatrixDirty() {\n        for (const key in this._cells) {\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\n                continue;\n            }\n            const child = this._cells[key];\n            child._markMatrixAsDirty();\n        }\n    }\n    _renderHighlightSpecific(context) {\n        super._renderHighlightSpecific(context);\n        this._getGridDefinitions((lefts, tops, widths, heights) => {\n            // Columns\n            for (let index = 0; index < lefts.length; index++) {\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\n                context.beginPath();\n                context.moveTo(left, this._currentMeasure.top);\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\n                context.stroke();\n            }\n            // Rows\n            for (let index = 0; index < tops.length; index++) {\n                const top = this._currentMeasure.top + tops[index] + heights[index];\n                context.beginPath();\n                context.moveTo(this._currentMeasure.left, top);\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\n                context.stroke();\n            }\n        });\n        context.restore();\n    }\n    /** Releases associated resources */\n    dispose() {\n        super.dispose();\n        for (const control of this._childControls) {\n            control.dispose();\n        }\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\n        }\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\n        }\n        this._rowDefinitionObservers.length = 0;\n        this._rowDefinitions.length = 0;\n        this._columnDefinitionObservers.length = 0;\n        this._columnDefinitions.length = 0;\n        this._cells = {};\n        this._childControls.length = 0;\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        serializationObject.columnCount = this.columnCount;\n        serializationObject.rowCount = this.rowCount;\n        serializationObject.columns = [];\n        serializationObject.rows = [];\n        serializationObject.tags = [];\n        for (let i = 0; i < this.columnCount; ++i) {\n            const cd = this.getColumnDefinition(i);\n            const childSerializationObject = { value: cd === null || cd === void 0 ? void 0 : cd.getValue(this.host), unit: cd === null || cd === void 0 ? void 0 : cd.unit };\n            serializationObject.columns.push(childSerializationObject);\n        }\n        for (let i = 0; i < this.rowCount; ++i) {\n            const rd = this.getRowDefinition(i);\n            const childSerializationObject = { value: rd === null || rd === void 0 ? void 0 : rd.getValue(this.host), unit: rd === null || rd === void 0 ? void 0 : rd.unit };\n            serializationObject.rows.push(childSerializationObject);\n        }\n        this.children.forEach((child) => {\n            serializationObject.tags.push(child._tag);\n        });\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        super._parseFromContent(serializedObject, host);\n        const children = [];\n        this.children.forEach((child) => {\n            children.push(child);\n        });\n        this.removeRowDefinition(0);\n        this.removeColumnDefinition(0);\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\n            const columnValue = serializedObject.columns[i].value;\n            const unit = serializedObject.columns[i].unit;\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\n        }\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\n            const rowValue = serializedObject.rows[i].value;\n            const unit = serializedObject.rows[i].unit;\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\n        }\n        for (let i = 0; i < children.length; ++i) {\n            const cellInfo = serializedObject.tags[i];\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\n            if (isNaN(rowNumber)) {\n                rowNumber = 0;\n            }\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\n            if (isNaN(columnNumber)) {\n                columnNumber = 0;\n            }\n            this.addControl(children[i], rowNumber, columnNumber);\n        }\n    }\n}\n__decorate([\n    serialize()\n], Grid.prototype, \"clipContent\", null);\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\n//# sourceMappingURL=grid.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Control } from \"./control.js\";\nimport { InputText } from \"./inputText.js\";\nimport { Rectangle } from \"./rectangle.js\";\nimport { Button } from \"./button.js\";\nimport { Grid } from \"./grid.js\";\nimport { TextBlock } from \"../controls/textBlock.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    /** Gets or sets the color of the color picker */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value.equals(value)) {\n            return;\n        }\n        this._value.copyFrom(value);\n        this._value.toHSVToRef(this._tmpColor);\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n        this._markAsDirty();\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n    /**\n     * Gets or sets control width\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get width() {\n        return this._width.toString(this._host);\n    }\n    set width(value) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n        if (this._width.fromString(value)) {\n            if (this._width.getValue(this._host) === 0) {\n                value = \"1px\";\n                this._width.fromString(value);\n            }\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets control height\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\n     */\n    get height() {\n        return this._height.toString(this._host);\n    }\n    /** Gets or sets control height */\n    set height(value) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            if (this._height.getValue(this._host) === 0) {\n                value = \"1px\";\n                this._height.fromString(value);\n            }\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets control size */\n    get size() {\n        return this.width;\n    }\n    set size(value) {\n        this.width = value;\n    }\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._value = Color3.Red();\n        this._tmpColor = new Color3();\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n        this._squareLeft = 0;\n        this._squareTop = 0;\n        this._squareSize = 0;\n        this._h = 360;\n        this._s = 1;\n        this._v = 1;\n        this._lastPointerDownId = -1;\n        /**\n         * Observable raised when the value changes\n         */\n        this.onValueChangedObservable = new Observable();\n        // Events\n        this._pointerIsDown = false;\n        this.value = new Color3(0.88, 0.1, 0.1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n    _getTypeName() {\n        return \"ColorPicker\";\n    }\n    /**\n     * @internal\n     */\n    _preMeasure(parentMeasure) {\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        }\n        else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n    _updateSquareProps() {\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\n        const wheelThickness = radius * 0.2;\n        const innerDiameter = (radius - wheelThickness) * 2;\n        const squareSize = innerDiameter / Math.sqrt(2);\n        const offset = radius - squareSize * 0.5;\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n    _drawGradientSquare(hueValue, left, top, width, height, context) {\n        const lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, \"#fff\");\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n        const lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\n        lgv.addColorStop(1, \"#000\");\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n    _drawCircle(centerX, centerY, radius, context) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = \"#333333\";\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = \"#ffffff\";\n        context.stroke();\n    }\n    _createColorWheelCanvas(radius, thickness) {\n        // Shoudl abstract platform instead of using LastCreatedEngine\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\n        }\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\n        const context = canvas.getContext(\"2d\");\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\n        const data = image.data;\n        const color = this._tmpColor;\n        const maxDistSq = radius * radius;\n        const innerRadius = radius - thickness;\n        const minDistSq = innerRadius * innerRadius;\n        for (let x = -radius; x < radius; x++) {\n            for (let y = -radius; y < radius; y++) {\n                const distSq = x * x + y * y;\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n                const dist = Math.sqrt(distSq);\n                const ang = Math.atan2(y, x);\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n                //apply less alpha to bigger color pickers\n                let alphaAmount = 0.2;\n                const maxAlpha = 0.2;\n                const minAlpha = 0.04;\n                const lowerRadius = 50;\n                const upperRadius = 150;\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                }\n                else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                }\n                else {\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                }\n                else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\n                }\n                else {\n                    data[index + 3] = 255;\n                }\n            }\n        }\n        context.putImageData(image, 0, 0);\n        return canvas;\n    }\n    /**\n     * @internal\n     */\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\n        const wheelThickness = radius * 0.2;\n        const left = this._currentMeasure.left;\n        const top = this._currentMeasure.top;\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n        this._updateSquareProps();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n        context.drawImage(this._colorWheelCanvas, left, top);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\n        let cx = this._squareLeft + this._squareSize * this._s;\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\n        this._drawCircle(cx, cy, radius * 0.04, context);\n        const dist = radius - wheelThickness * 0.5;\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\n        context.restore();\n    }\n    _updateValueFromPointer(x, y) {\n        if (this._pointerStartedOnWheel) {\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\n            const centerX = radius + this._currentMeasure.left;\n            const centerY = radius + this._currentMeasure.top;\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\n        this.value = this._tmpColor;\n    }\n    _isPointOnSquare(x, y) {\n        this._updateSquareProps();\n        const left = this._squareLeft;\n        const top = this._squareTop;\n        const size = this._squareSize;\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\n            return true;\n        }\n        return false;\n    }\n    _isPointOnWheel(x, y) {\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\n        const centerX = radius + this._currentMeasure.left;\n        const centerY = radius + this._currentMeasure.top;\n        const wheelThickness = radius * 0.2;\n        const innerRadius = radius - wheelThickness;\n        const radiusSq = radius * radius;\n        const innerRadiusSq = innerRadius * innerRadius;\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distSq = dx * dx + dy * dy;\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n        return false;\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        this._pointerIsDown = true;\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n        const x = this._transformedPosition.x;\n        const y = this._transformedPosition.y;\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        }\n        else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n        this._lastPointerDownId = pointerId;\n        return true;\n    }\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\n        if (pointerId != this._lastPointerDownId) {\n            return;\n        }\n        if (!this.isReadOnly) {\n            // Invert transform\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n            const x = this._transformedPosition.x;\n            const y = this._transformedPosition.y;\n            if (this._pointerIsDown) {\n                this._updateValueFromPointer(x, y);\n            }\n        }\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n        this._pointerIsDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n    }\n    _onCanvasBlur() {\n        this._forcePointerUp();\n        super._onCanvasBlur();\n    }\n    /**\n     * This function expands the color picker by creating a color picker dialog with manual\n     * color value input and the ability to save colors into an array to be used later in\n     * subsequent launches of the dialogue.\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\n     * @param options.pickerWidth\n     * @param options.pickerHeight\n     * @param options.headerHeight\n     * @param options.lastColor\n     * @param options.swatchLimit\n     * @param options.numSwatchesPerLine\n     * @param options.savedColors\n     * @returns picked color as a hex string and the saved colors array as hex strings.\n     */\n    static ShowPickerDialogAsync(advancedTexture, options) {\n        return new Promise((resolve) => {\n            // Default options\n            options.pickerWidth = options.pickerWidth || \"640px\";\n            options.pickerHeight = options.pickerHeight || \"400px\";\n            options.headerHeight = options.headerHeight || \"35px\";\n            options.lastColor = options.lastColor || \"#000000\";\n            options.swatchLimit = options.swatchLimit || 20;\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\n            // Window size settings\n            const drawerMaxRows = options.swatchLimit / options.numSwatchesPerLine;\n            const rawSwatchSize = parseFloat(options.pickerWidth) / options.numSwatchesPerLine;\n            const gutterSize = Math.floor(rawSwatchSize * 0.25);\n            const colGutters = gutterSize * (options.numSwatchesPerLine + 1);\n            const swatchSize = Math.floor((parseFloat(options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\n            const drawerMaxSize = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\n            const containerSize = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\n            // Button Colors\n            const buttonColor = \"#c0c0c0\";\n            const buttonBackgroundColor = \"#535353\";\n            const buttonBackgroundHoverColor = \"#414141\";\n            const buttonBackgroundClickColor = \"515151\";\n            const buttonDisabledColor = \"#555555\";\n            const buttonDisabledBackgroundColor = \"#454545\";\n            const currentSwatchesOutlineColor = \"#404040\";\n            const luminanceLimitColor = Color3.FromHexString(\"#dddddd\");\n            const luminanceLimit = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\n            const iconColorDark = \"#aaaaaa\";\n            const iconColorLight = \"#ffffff\";\n            // Button settings\n            let buttonFontSize;\n            let butEdit;\n            // Input Text Colors\n            const inputFieldLabels = [\"R\", \"G\", \"B\"];\n            const inputTextBackgroundColor = \"#454545\";\n            const inputTextColor = \"#f0f0f0\";\n            // This int is used for naming swatches and serves as the index for calling them from the list\n            let swatchNumber;\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\n            let swatchDrawer;\n            let editSwatchMode = false;\n            // Color InputText fields that will be updated upon value change\n            let butSave;\n            let lastVal;\n            let activeField;\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\n            const dialogContainer = new Grid();\n            dialogContainer.name = \"Dialog Container\";\n            dialogContainer.width = options.pickerWidth;\n            if (options.savedColors) {\n                dialogContainer.height = containerSize;\n                const topRow = parseInt(options.pickerHeight) / parseInt(containerSize);\n                dialogContainer.addRowDefinition(topRow, false);\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\n            }\n            else {\n                dialogContainer.height = options.pickerHeight;\n                dialogContainer.addRowDefinition(1.0, false);\n            }\n            advancedTexture.addControl(dialogContainer);\n            // Swatch drawer which contains all saved color buttons\n            if (options.savedColors) {\n                swatchDrawer = new Grid();\n                swatchDrawer.name = \"Swatch Drawer\";\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n                swatchDrawer.background = buttonBackgroundColor;\n                swatchDrawer.width = options.pickerWidth;\n                const initialRows = options.savedColors.length / options.numSwatchesPerLine;\n                let gutterCount;\n                if (initialRows == 0) {\n                    gutterCount = 0;\n                }\n                else {\n                    gutterCount = initialRows + 1;\n                }\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addRowDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addRowDefinition(gutterSize, true);\n                    }\n                }\n                for (let i = 0; i < options.numSwatchesPerLine * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\n                    }\n                }\n                dialogContainer.addControl(swatchDrawer, 1, 0);\n            }\n            // Picker container\n            const pickerPanel = new Grid();\n            pickerPanel.name = \"Picker Panel\";\n            pickerPanel.height = options.pickerHeight;\n            const panelHead = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\n            const pickerPanelRows = [panelHead, 1.0 - panelHead];\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\n            dialogContainer.addControl(pickerPanel, 0, 0);\n            // Picker container header\n            const header = new Rectangle();\n            header.name = \"Dialogue Header Bar\";\n            header.background = \"#cccccc\";\n            header.thickness = 0;\n            pickerPanel.addControl(header, 0, 0);\n            // Header close button\n            const closeButton = Button.CreateSimpleButton(\"closeButton\", \"a\");\n            closeButton.fontFamily = \"coreglyphs\";\n            const headerColor3 = Color3.FromHexString(header.background);\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\n            closeButton.color = closeIconColor.toHexString();\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight) * 0.6);\n            closeButton.textBlock.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\n            closeButton.height = closeButton.width = options.headerHeight;\n            closeButton.background = header.background;\n            closeButton.thickness = 0;\n            closeButton.pointerDownAnimation = () => { };\n            closeButton.pointerUpAnimation = () => {\n                closeButton.background = header.background;\n            };\n            closeButton.pointerEnterAnimation = () => {\n                closeButton.color = header.background;\n                closeButton.background = \"red\";\n            };\n            closeButton.pointerOutAnimation = () => {\n                closeButton.color = closeIconColor.toHexString();\n                closeButton.background = header.background;\n            };\n            closeButton.onPointerClickObservable.add(() => {\n                closePicker(currentSwatch.background);\n            });\n            pickerPanel.addControl(closeButton, 0, 0);\n            // Dialog container body\n            const dialogBody = new Grid();\n            dialogBody.name = \"Dialogue Body\";\n            dialogBody.background = buttonBackgroundColor;\n            const dialogBodyCols = [0.4375, 0.5625];\n            dialogBody.addRowDefinition(1.0, false);\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\n            pickerPanel.addControl(dialogBody, 1, 0);\n            // Picker grid\n            const pickerGrid = new Grid();\n            pickerGrid.name = \"Picker Grid\";\n            pickerGrid.addRowDefinition(0.85, false);\n            pickerGrid.addRowDefinition(0.15, false);\n            dialogBody.addControl(pickerGrid, 0, 0);\n            //  Picker control\n            const picker = new ColorPicker();\n            picker.name = \"GUI Color Picker\";\n            if (options.pickerHeight < options.pickerWidth) {\n                picker.width = 0.89;\n            }\n            else {\n                picker.height = 0.89;\n            }\n            picker.value = Color3.FromHexString(options.lastColor);\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            picker.onPointerDownObservable.add(() => {\n                activeField = picker.name;\n                lastVal = \"\";\n                editSwatches(false);\n            });\n            picker.onValueChangedObservable.add(function (value) {\n                // value is a color3\n                if (activeField == picker.name) {\n                    updateValues(value, picker.name);\n                }\n            });\n            pickerGrid.addControl(picker, 0, 0);\n            // Picker body right quarant\n            const pickerBodyRight = new Grid();\n            pickerBodyRight.name = \"Dialogue Right Half\";\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            const pickerBodyRightRows = [0.514, 0.486];\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\n            dialogBody.addControl(pickerBodyRight, 1, 1);\n            // Picker container swatches and buttons\n            const pickerSwatchesButtons = new Grid();\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\n            const pickerButtonsCol = [0.417, 0.583];\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\n            // Picker Swatches quadrant\n            const pickerSwatches = new Grid();\n            pickerSwatches.name = \"New and Current Swatches\";\n            const pickeSwatchesRows = [0.04, 0.16, 0.64, 0.16];\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\n            // Active swatches\n            const activeSwatches = new Grid();\n            activeSwatches.name = \"Active Swatches\";\n            activeSwatches.width = 0.67;\n            activeSwatches.addRowDefinition(0.5, false);\n            activeSwatches.addRowDefinition(0.5, false);\n            pickerSwatches.addControl(activeSwatches, 2, 0);\n            const labelWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\n            const labelHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\n            let labelTextSize;\n            if (options.pickerWidth > options.pickerHeight) {\n                labelTextSize = labelHeight;\n            }\n            else {\n                labelTextSize = labelWidth;\n            }\n            // New color swatch and previous color button\n            const newText = new TextBlock();\n            newText.text = \"new\";\n            newText.name = \"New Color Label\";\n            newText.color = buttonColor;\n            newText.fontSize = labelTextSize;\n            pickerSwatches.addControl(newText, 1, 0);\n            const newSwatch = new Rectangle();\n            newSwatch.name = \"New Color Swatch\";\n            newSwatch.background = options.lastColor;\n            newSwatch.thickness = 0;\n            activeSwatches.addControl(newSwatch, 0, 0);\n            const currentSwatch = Button.CreateSimpleButton(\"currentSwatch\", \"\");\n            currentSwatch.background = options.lastColor;\n            currentSwatch.thickness = 0;\n            currentSwatch.onPointerClickObservable.add(() => {\n                const revertColor = Color3.FromHexString(currentSwatch.background);\n                updateValues(revertColor, currentSwatch.name);\n                editSwatches(false);\n            });\n            currentSwatch.pointerDownAnimation = () => { };\n            currentSwatch.pointerUpAnimation = () => { };\n            currentSwatch.pointerEnterAnimation = () => { };\n            currentSwatch.pointerOutAnimation = () => { };\n            activeSwatches.addControl(currentSwatch, 1, 0);\n            const swatchOutline = new Rectangle();\n            swatchOutline.name = \"Swatch Outline\";\n            swatchOutline.width = 0.67;\n            swatchOutline.thickness = 2;\n            swatchOutline.color = currentSwatchesOutlineColor;\n            swatchOutline.isHitTestVisible = false;\n            pickerSwatches.addControl(swatchOutline, 2, 0);\n            const currentText = new TextBlock();\n            currentText.name = \"Current Color Label\";\n            currentText.text = \"current\";\n            currentText.color = buttonColor;\n            currentText.fontSize = labelTextSize;\n            pickerSwatches.addControl(currentText, 3, 0);\n            // Buttons grid\n            const buttonGrid = new Grid();\n            buttonGrid.name = \"Button Grid\";\n            buttonGrid.height = 0.8;\n            const buttonGridRows = 1 / 3;\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\n            // Determine pixel width and height for all buttons from overall panel dimensions\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\n            const buttonHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7).toString() + \"px\";\n            // Determine button type size\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\n            }\n            else {\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\n            }\n            // Panel Buttons\n            const butOK = Button.CreateSimpleButton(\"butOK\", \"OK\");\n            butOK.width = buttonWidth;\n            butOK.height = buttonHeight;\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butOK.thickness = 2;\n            butOK.color = buttonColor;\n            butOK.fontSize = buttonFontSize;\n            butOK.background = buttonBackgroundColor;\n            butOK.onPointerEnterObservable.add(() => {\n                butOK.background = buttonBackgroundHoverColor;\n            });\n            butOK.onPointerOutObservable.add(() => {\n                butOK.background = buttonBackgroundColor;\n            });\n            butOK.pointerDownAnimation = () => {\n                butOK.background = buttonBackgroundClickColor;\n            };\n            butOK.pointerUpAnimation = () => {\n                butOK.background = buttonBackgroundHoverColor;\n            };\n            butOK.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(newSwatch.background);\n            });\n            buttonGrid.addControl(butOK, 0, 0);\n            const butCancel = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\n            butCancel.width = buttonWidth;\n            butCancel.height = buttonHeight;\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butCancel.thickness = 2;\n            butCancel.color = buttonColor;\n            butCancel.fontSize = buttonFontSize;\n            butCancel.background = buttonBackgroundColor;\n            butCancel.onPointerEnterObservable.add(() => {\n                butCancel.background = buttonBackgroundHoverColor;\n            });\n            butCancel.onPointerOutObservable.add(() => {\n                butCancel.background = buttonBackgroundColor;\n            });\n            butCancel.pointerDownAnimation = () => {\n                butCancel.background = buttonBackgroundClickColor;\n            };\n            butCancel.pointerUpAnimation = () => {\n                butCancel.background = buttonBackgroundHoverColor;\n            };\n            butCancel.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(currentSwatch.background);\n            });\n            buttonGrid.addControl(butCancel, 1, 0);\n            if (options.savedColors) {\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\n                butSave.width = buttonWidth;\n                butSave.height = buttonHeight;\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                butSave.thickness = 2;\n                butSave.fontSize = buttonFontSize;\n                if (options.savedColors.length < options.swatchLimit) {\n                    butSave.color = buttonColor;\n                    butSave.background = buttonBackgroundColor;\n                }\n                else {\n                    disableButton(butSave, true);\n                }\n                butSave.onPointerEnterObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                });\n                butSave.onPointerOutObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit) {\n                            butSave.background = buttonBackgroundColor;\n                        }\n                    }\n                });\n                butSave.pointerDownAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit) {\n                            butSave.background = buttonBackgroundClickColor;\n                        }\n                    }\n                };\n                butSave.pointerUpAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                };\n                butSave.onPointerClickObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length == 0) {\n                            setEditButtonVisibility(true);\n                        }\n                        if (options.savedColors.length < options.swatchLimit) {\n                            updateSwatches(newSwatch.background, butSave);\n                        }\n                        editSwatches(false);\n                    }\n                });\n                if (options.savedColors.length > 0) {\n                    setEditButtonVisibility(true);\n                }\n                buttonGrid.addControl(butSave, 2, 0);\n            }\n            // Picker color values input\n            const pickerColorValues = new Grid();\n            pickerColorValues.name = \"Dialog Lower Right\";\n            pickerColorValues.addRowDefinition(0.02, false);\n            pickerColorValues.addRowDefinition(0.63, false);\n            pickerColorValues.addRowDefinition(0.21, false);\n            pickerColorValues.addRowDefinition(0.14, false);\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\n            // RGB values text boxes\n            const currentColor = Color3.FromHexString(options.lastColor);\n            const rgbValuesQuadrant = new Grid();\n            rgbValuesQuadrant.name = \"RGB Values\";\n            rgbValuesQuadrant.width = 0.82;\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\n            for (let i = 0; i < inputFieldLabels.length; i++) {\n                const labelText = new TextBlock();\n                labelText.text = inputFieldLabels[i];\n                labelText.color = buttonColor;\n                labelText.fontSize = buttonFontSize;\n                rgbValuesQuadrant.addControl(labelText, i, 0);\n            }\n            // Input fields for RGB values\n            const rValInt = new InputText();\n            rValInt.width = 0.83;\n            rValInt.height = 0.72;\n            rValInt.name = \"rIntField\";\n            rValInt.fontSize = buttonFontSize;\n            rValInt.text = (currentColor.r * 255).toString();\n            rValInt.color = inputTextColor;\n            rValInt.background = inputTextBackgroundColor;\n            rValInt.onFocusObservable.add(() => {\n                activeField = rValInt.name;\n                lastVal = rValInt.text;\n                editSwatches(false);\n            });\n            rValInt.onBlurObservable.add(() => {\n                if (rValInt.text == \"\") {\n                    rValInt.text = \"0\";\n                }\n                updateInt(rValInt, \"r\");\n                if (activeField == rValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            rValInt.onTextChangedObservable.add(() => {\n                if (activeField == rValInt.name) {\n                    updateInt(rValInt, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\n            const gValInt = new InputText();\n            gValInt.width = 0.83;\n            gValInt.height = 0.72;\n            gValInt.name = \"gIntField\";\n            gValInt.fontSize = buttonFontSize;\n            gValInt.text = (currentColor.g * 255).toString();\n            gValInt.color = inputTextColor;\n            gValInt.background = inputTextBackgroundColor;\n            gValInt.onFocusObservable.add(() => {\n                activeField = gValInt.name;\n                lastVal = gValInt.text;\n                editSwatches(false);\n            });\n            gValInt.onBlurObservable.add(() => {\n                if (gValInt.text == \"\") {\n                    gValInt.text = \"0\";\n                }\n                updateInt(gValInt, \"g\");\n                if (activeField == gValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            gValInt.onTextChangedObservable.add(() => {\n                if (activeField == gValInt.name) {\n                    updateInt(gValInt, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\n            const bValInt = new InputText();\n            bValInt.width = 0.83;\n            bValInt.height = 0.72;\n            bValInt.name = \"bIntField\";\n            bValInt.fontSize = buttonFontSize;\n            bValInt.text = (currentColor.b * 255).toString();\n            bValInt.color = inputTextColor;\n            bValInt.background = inputTextBackgroundColor;\n            bValInt.onFocusObservable.add(() => {\n                activeField = bValInt.name;\n                lastVal = bValInt.text;\n                editSwatches(false);\n            });\n            bValInt.onBlurObservable.add(() => {\n                if (bValInt.text == \"\") {\n                    bValInt.text = \"0\";\n                }\n                updateInt(bValInt, \"b\");\n                if (activeField == bValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            bValInt.onTextChangedObservable.add(() => {\n                if (activeField == bValInt.name) {\n                    updateInt(bValInt, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\n            const rValDec = new InputText();\n            rValDec.width = 0.95;\n            rValDec.height = 0.72;\n            rValDec.name = \"rDecField\";\n            rValDec.fontSize = buttonFontSize;\n            rValDec.text = currentColor.r.toString();\n            rValDec.color = inputTextColor;\n            rValDec.background = inputTextBackgroundColor;\n            rValDec.onFocusObservable.add(() => {\n                activeField = rValDec.name;\n                lastVal = rValDec.text;\n                editSwatches(false);\n            });\n            rValDec.onBlurObservable.add(() => {\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\n                    rValDec.text = \"0\";\n                    updateFloat(rValDec, \"r\");\n                }\n                if (activeField == rValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            rValDec.onTextChangedObservable.add(() => {\n                if (activeField == rValDec.name) {\n                    updateFloat(rValDec, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\n            const gValDec = new InputText();\n            gValDec.width = 0.95;\n            gValDec.height = 0.72;\n            gValDec.name = \"gDecField\";\n            gValDec.fontSize = buttonFontSize;\n            gValDec.text = currentColor.g.toString();\n            gValDec.color = inputTextColor;\n            gValDec.background = inputTextBackgroundColor;\n            gValDec.onFocusObservable.add(() => {\n                activeField = gValDec.name;\n                lastVal = gValDec.text;\n                editSwatches(false);\n            });\n            gValDec.onBlurObservable.add(() => {\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\n                    gValDec.text = \"0\";\n                    updateFloat(gValDec, \"g\");\n                }\n                if (activeField == gValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            gValDec.onTextChangedObservable.add(() => {\n                if (activeField == gValDec.name) {\n                    updateFloat(gValDec, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\n            const bValDec = new InputText();\n            bValDec.width = 0.95;\n            bValDec.height = 0.72;\n            bValDec.name = \"bDecField\";\n            bValDec.fontSize = buttonFontSize;\n            bValDec.text = currentColor.b.toString();\n            bValDec.color = inputTextColor;\n            bValDec.background = inputTextBackgroundColor;\n            bValDec.onFocusObservable.add(() => {\n                activeField = bValDec.name;\n                lastVal = bValDec.text;\n                editSwatches(false);\n            });\n            bValDec.onBlurObservable.add(() => {\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\n                    bValDec.text = \"0\";\n                    updateFloat(bValDec, \"b\");\n                }\n                if (activeField == bValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            bValDec.onTextChangedObservable.add(() => {\n                if (activeField == bValDec.name) {\n                    updateFloat(bValDec, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\n            // Hex value input\n            const hexValueQuadrant = new Grid();\n            hexValueQuadrant.name = \"Hex Value\";\n            hexValueQuadrant.width = 0.82;\n            hexValueQuadrant.addRowDefinition(1.0, false);\n            hexValueQuadrant.addColumnDefinition(0.1, false);\n            hexValueQuadrant.addColumnDefinition(0.9, false);\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\n            const labelText = new TextBlock();\n            labelText.text = \"#\";\n            labelText.color = buttonColor;\n            labelText.fontSize = buttonFontSize;\n            hexValueQuadrant.addControl(labelText, 0, 0);\n            const hexVal = new InputText();\n            hexVal.width = 0.96;\n            hexVal.height = 0.72;\n            hexVal.name = \"hexField\";\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            hexVal.fontSize = buttonFontSize;\n            const minusPound = options.lastColor.split(\"#\");\n            hexVal.text = minusPound[1];\n            hexVal.color = inputTextColor;\n            hexVal.background = inputTextBackgroundColor;\n            hexVal.onFocusObservable.add(() => {\n                activeField = hexVal.name;\n                lastVal = hexVal.text;\n                editSwatches(false);\n            });\n            hexVal.onBlurObservable.add(() => {\n                if (hexVal.text.length == 3) {\n                    const val = hexVal.text.split(\"\");\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                }\n                if (hexVal.text == \"\") {\n                    hexVal.text = \"000000\";\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\n                }\n                if (activeField == hexVal.name) {\n                    activeField = \"\";\n                }\n            });\n            hexVal.onTextChangedObservable.add(() => {\n                let newHexValue = hexVal.text;\n                const checkHex = /[^0-9A-F]/i.test(newHexValue);\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\n                    hexVal.text = lastVal;\n                }\n                else {\n                    if (hexVal.text.length < 6) {\n                        const leadingZero = 6 - hexVal.text.length;\n                        for (let i = 0; i < leadingZero; i++) {\n                            newHexValue = \"0\" + newHexValue;\n                        }\n                    }\n                    if (hexVal.text.length == 3) {\n                        const val = hexVal.text.split(\"\");\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                    }\n                    newHexValue = \"#\" + newHexValue;\n                    if (activeField == hexVal.name) {\n                        lastVal = hexVal.text;\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\n                    }\n                }\n            });\n            hexValueQuadrant.addControl(hexVal, 0, 1);\n            if (options.savedColors && options.savedColors.length > 0) {\n                updateSwatches(\"\", butSave);\n            }\n            /**\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\n             * are will receive no update. This is to prevent the input from the user being overwritten.\n             * @param value\n             * @param inputField\n             */\n            function updateValues(value, inputField) {\n                activeField = inputField;\n                const pickedColor = value.toHexString();\n                newSwatch.background = pickedColor;\n                if (rValInt.name != activeField) {\n                    rValInt.text = Math.floor(value.r * 255).toString();\n                }\n                if (gValInt.name != activeField) {\n                    gValInt.text = Math.floor(value.g * 255).toString();\n                }\n                if (bValInt.name != activeField) {\n                    bValInt.text = Math.floor(value.b * 255).toString();\n                }\n                if (rValDec.name != activeField) {\n                    rValDec.text = value.r.toString();\n                }\n                if (gValDec.name != activeField) {\n                    gValDec.text = value.g.toString();\n                }\n                if (bValDec.name != activeField) {\n                    bValDec.text = value.b.toString();\n                }\n                if (hexVal.name != activeField) {\n                    const minusPound = pickedColor.split(\"#\");\n                    hexVal.text = minusPound[1];\n                }\n                if (picker.name != activeField) {\n                    picker.value = value;\n                }\n            }\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateInt(field, channel) {\n                let newValue = field.text;\n                const checkVal = /[^0-9]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\") {\n                        if (Math.floor(parseInt(newValue)) < 0) {\n                            newValue = \"0\";\n                        }\n                        else if (Math.floor(parseInt(newValue)) > 255) {\n                            newValue = \"255\";\n                        }\n                        else if (isNaN(parseInt(newValue))) {\n                            newValue = \"0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\") {\n                    newValue = parseInt(newValue).toString();\n                    field.text = newValue;\n                    const newSwatchRGB = Color3.FromHexString(newSwatch.background);\n                    if (activeField == field.name) {\n                        if (channel == \"r\") {\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\n                        }\n                        else if (channel == \"g\") {\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\n                        }\n                        else {\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\n                        }\n                    }\n                }\n            }\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateFloat(field, channel) {\n                let newValue = field.text;\n                const checkVal = /[^0-9.]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                        if (parseFloat(newValue) < 0.0) {\n                            newValue = \"0.0\";\n                        }\n                        else if (parseFloat(newValue) > 1.0) {\n                            newValue = \"1.0\";\n                        }\n                        else if (isNaN(parseFloat(newValue))) {\n                            newValue = \"0.0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                    newValue = parseFloat(newValue).toString();\n                    field.text = newValue;\n                }\n                else {\n                    newValue = \"0.0\";\n                }\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\n                if (activeField == field.name) {\n                    if (channel == \"r\") {\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\n                    }\n                    else if (channel == \"g\") {\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\n                    }\n                    else {\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\n                    }\n                }\n            }\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\n            function deleteSwatch(index) {\n                if (options.savedColors) {\n                    options.savedColors.splice(index, 1);\n                }\n                if (options.savedColors && options.savedColors.length == 0) {\n                    setEditButtonVisibility(false);\n                    editSwatchMode = false;\n                }\n            }\n            // Creates and styles an individual swatch when updateSwatches is called.\n            function createSwatch() {\n                if (options.savedColors && options.savedColors[swatchNumber]) {\n                    let icon;\n                    if (editSwatchMode) {\n                        icon = \"b\";\n                    }\n                    else {\n                        icon = \"\";\n                    }\n                    const swatch = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\n                    swatch.fontFamily = \"coreglyphs\";\n                    const swatchColor = Color3.FromHexString(options.savedColors[swatchNumber]);\n                    const swatchLuminence = swatchColor.r + swatchColor.g + swatchColor.b;\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\n                    if (swatchLuminence > luminanceLimit) {\n                        swatch.color = iconColorDark;\n                    }\n                    else {\n                        swatch.color = iconColorLight;\n                    }\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\n                    swatch.textBlock.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\n                    swatch.background = options.savedColors[swatchNumber];\n                    swatch.thickness = 2;\n                    const metadata = swatchNumber;\n                    swatch.pointerDownAnimation = () => {\n                        swatch.thickness = 4;\n                    };\n                    swatch.pointerUpAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerEnterAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerOutAnimation = () => {\n                        swatch.thickness = 2;\n                    };\n                    swatch.onPointerClickObservable.add(() => {\n                        if (!editSwatchMode) {\n                            if (options.savedColors) {\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name);\n                            }\n                        }\n                        else {\n                            deleteSwatch(metadata);\n                            updateSwatches(\"\", butSave);\n                        }\n                    });\n                    return swatch;\n                }\n                else {\n                    return null;\n                }\n            }\n            // Mode switch to render button text and close symbols on swatch controls\n            function editSwatches(mode) {\n                if (mode !== undefined) {\n                    editSwatchMode = mode;\n                }\n                let thisButton;\n                if (editSwatchMode) {\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\n                        thisButton = swatchDrawer.children[i];\n                        thisButton.textBlock.text = \"b\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock.text = \"Done\";\n                    }\n                }\n                else {\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\n                        thisButton = swatchDrawer.children[i];\n                        thisButton.textBlock.text = \"\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock.text = \"Edit\";\n                    }\n                }\n            }\n            /**\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\n             * saved colors there are and how many can be stored per row.\n             * @param color\n             * @param button\n             */\n            function updateSwatches(color, button) {\n                if (options.savedColors) {\n                    if (color != \"\") {\n                        options.savedColors.push(color);\n                    }\n                    swatchNumber = 0;\n                    swatchDrawer.clearControls();\n                    const rowCount = Math.ceil(options.savedColors.length / options.numSwatchesPerLine);\n                    let gutterCount;\n                    if (rowCount == 0) {\n                        gutterCount = 0;\n                    }\n                    else {\n                        gutterCount = rowCount + 1;\n                    }\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\n                        const currentRows = swatchDrawer.rowCount;\n                        for (let i = 0; i < currentRows; i++) {\n                            swatchDrawer.removeRowDefinition(0);\n                        }\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\n                            if (i % 2) {\n                                swatchDrawer.addRowDefinition(swatchSize, true);\n                            }\n                            else {\n                                swatchDrawer.addRowDefinition(gutterSize, true);\n                            }\n                        }\n                    }\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\n                        let totalButtonsThisRow;\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine) {\n                            totalButtonsThisRow = options.numSwatchesPerLine;\n                        }\n                        else {\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine;\n                        }\n                        const buttonIterations = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine);\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\n                            if (x > options.numSwatchesPerLine) {\n                                continue;\n                            }\n                            const swatch = createSwatch();\n                            if (swatch != null) {\n                                swatchDrawer.addControl(swatch, y, w);\n                                w += 2;\n                                swatchNumber++;\n                            }\n                            else {\n                                continue;\n                            }\n                        }\n                    }\n                    if (options.savedColors.length >= options.swatchLimit) {\n                        disableButton(button, true);\n                    }\n                    else {\n                        disableButton(button, false);\n                    }\n                }\n            }\n            // Shows or hides edit swatches button depending on if there are saved swatches\n            function setEditButtonVisibility(enableButton) {\n                if (enableButton) {\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\n                    butEdit.width = buttonWidth;\n                    butEdit.height = buttonHeight;\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n                    butEdit.thickness = 2;\n                    butEdit.color = buttonColor;\n                    butEdit.fontSize = buttonFontSize;\n                    butEdit.background = buttonBackgroundColor;\n                    butEdit.onPointerEnterObservable.add(() => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    });\n                    butEdit.onPointerOutObservable.add(() => {\n                        butEdit.background = buttonBackgroundColor;\n                    });\n                    butEdit.pointerDownAnimation = () => {\n                        butEdit.background = buttonBackgroundClickColor;\n                    };\n                    butEdit.pointerUpAnimation = () => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    };\n                    butEdit.onPointerClickObservable.add(() => {\n                        if (editSwatchMode) {\n                            editSwatchMode = false;\n                        }\n                        else {\n                            editSwatchMode = true;\n                        }\n                        editSwatches();\n                    });\n                    pickerGrid.addControl(butEdit, 1, 0);\n                }\n                else {\n                    pickerGrid.removeControl(butEdit);\n                }\n            }\n            // Called when the user hits the limit of saved colors in the drawer.\n            function disableButton(button, disabled) {\n                if (disabled) {\n                    button.color = buttonDisabledColor;\n                    button.background = buttonDisabledBackgroundColor;\n                }\n                else {\n                    button.color = buttonColor;\n                    button.background = buttonBackgroundColor;\n                }\n            }\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\n            function closePicker(color) {\n                if (options.savedColors && options.savedColors.length > 0) {\n                    resolve({\n                        savedColors: options.savedColors,\n                        pickedColor: color,\n                    });\n                }\n                else {\n                    resolve({\n                        pickedColor: color,\n                    });\n                }\n                advancedTexture.removeControl(dialogContainer);\n            }\n        });\n    }\n}\nColorPicker._Epsilon = 0.000001;\n__decorate([\n    serialize()\n], ColorPicker.prototype, \"value\", null);\n__decorate([\n    serialize()\n], ColorPicker.prototype, \"width\", null);\n__decorate([\n    serialize()\n], ColorPicker.prototype, \"height\", null);\n__decorate([\n    serialize()\n], ColorPicker.prototype, \"size\", null);\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\n//# sourceMappingURL=colorpicker.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Container } from \"./container.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to create 2D ellipse containers */\nexport class Ellipse extends Container {\n    /** Gets or sets border thickness */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new Ellipse\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._thickness = 1;\n    }\n    _getTypeName() {\n        return \"Ellipse\";\n    }\n    _localDraw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\n        if (this._backgroundGradient || this._background) {\n            context.fillStyle = this._getBackgroundColor(context);\n            context.fill();\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        if (this._thickness) {\n            if (this.color) {\n                context.strokeStyle = this.color;\n            }\n            context.lineWidth = this._thickness;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._measureForChildren.width -= 2 * this._thickness;\n        this._measureForChildren.height -= 2 * this._thickness;\n        this._measureForChildren.left += this._thickness;\n        this._measureForChildren.top += this._thickness;\n    }\n    _clipForChildren(context) {\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\n        context.clip();\n    }\n    _renderHighlightSpecific(context) {\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._highlightLineWidth / 2, this._currentMeasure.height / 2 - this._highlightLineWidth / 2, context);\n        context.stroke();\n    }\n}\n__decorate([\n    serialize()\n], Ellipse.prototype, \"thickness\", null);\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\n//# sourceMappingURL=ellipse.js.map","import { Button } from \"./button.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\n/**\n * Class used to create a focusable button that can easily handle keyboard events\n * @since 5.0.0\n */\nexport class FocusableButton extends Button {\n    constructor(name) {\n        super(name);\n        this.name = name;\n        /** Highlight color when button is focused */\n        this.focusedColor = null;\n        this._isFocused = false;\n        this._unfocusedColor = null;\n        /** Observable raised when the control gets the focus */\n        this.onFocusObservable = new Observable();\n        /** Observable raised when the control loses the focus */\n        this.onBlurObservable = new Observable();\n        /** Observable raised when a key event was processed */\n        this.onKeyboardEventProcessedObservable = new Observable();\n        this._unfocusedColor = this.color;\n    }\n    /** @internal */\n    onBlur() {\n        if (this._isFocused) {\n            this._isFocused = false;\n            if (this.focusedColor && this._unfocusedColor != null) {\n                // Set color back to saved unfocused color\n                this.color = this._unfocusedColor;\n            }\n            this.onBlurObservable.notifyObservers(this);\n        }\n    }\n    /** @internal */\n    onFocus() {\n        this._isFocused = true;\n        if (this.focusedColor) {\n            // Save the unfocused color\n            this._unfocusedColor = this.color;\n            this.color = this.focusedColor;\n        }\n        this.onFocusObservable.notifyObservers(this);\n    }\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    keepsFocusWith() {\n        return null;\n    }\n    /**\n     * Function to focus a button programmatically\n     */\n    focus() {\n        this._host.moveFocusToControl(this);\n    }\n    /**\n     * Function to unfocus a button programmatically\n     */\n    blur() {\n        this._host.focusedControl = null;\n    }\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    processKeyboard(evt) {\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!this.isReadOnly) {\n            // Clicking on button should focus\n            this.focus();\n        }\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n    }\n    /** @internal */\n    displose() {\n        super.dispose();\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\n//# sourceMappingURL=focusableButton.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Control } from \"./control.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { InputText } from \"./inputText.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create input text control\n */\nexport class InputTextArea extends InputText {\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    get outlineWidth() {\n        return this._outlineWidth;\n    }\n    /**\n     * Gets or sets outlineWidth of the text to display\n     */\n    set outlineWidth(value) {\n        if (this._outlineWidth === value) {\n            return;\n        }\n        this._outlineWidth = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    get outlineColor() {\n        return this._outlineColor;\n    }\n    /**\n     * Gets or sets outlineColor of the text to display\n     */\n    set outlineColor(value) {\n        if (this._outlineColor === value) {\n            return;\n        }\n        this._outlineColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\n    get autoStretchHeight() {\n        return this._autoStretchHeight;\n    }\n    set autoStretchHeight(value) {\n        if (this._autoStretchHeight === value) {\n            return;\n        }\n        this._autoStretchHeight = value;\n        this._markAsDirty();\n    }\n    set height(value) {\n        this._fixedRatioMasterIsWidth = false;\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n        if (this._height.fromString(value)) {\n            this._markAsDirty();\n        }\n        this._autoStretchHeight = false;\n    }\n    get maxHeight() {\n        return this._maxHeight.toString(this._host);\n    }\n    /** Gets the maximum width allowed by the control in pixels */\n    get maxHeightInPixels() {\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\n    }\n    set maxHeight(value) {\n        if (this._maxHeight.toString(this._host) === value) {\n            return;\n        }\n        if (this._maxHeight.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Creates a new InputTextArea\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(name, text = \"\") {\n        super(name);\n        this.name = name;\n        this._textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._lineSpacing = new ValueAndUnit(0);\n        this._outlineWidth = 0;\n        this._outlineColor = \"white\";\n        this._maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n        /**\n         * An event triggered after the text was broken up into lines\n         */\n        this.onLinesReadyObservable = new Observable();\n        this.text = text;\n        this.isPointerBlocker = true;\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\n        this._highlightCursorInfo = {\n            initialStartIndex: -1,\n            initialRelativeStartIndex: -1,\n            initialLineIndex: -1,\n        };\n        this._cursorInfo = {\n            globalStartIndex: 0,\n            globalEndIndex: 0,\n            relativeEndIndex: 0,\n            relativeStartIndex: 0,\n            currentLineIndex: 0,\n        };\n    }\n    _getTypeName() {\n        return \"InputTextArea\";\n    }\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    processKeyboard(evt) {\n        // process pressed key\n        this.alternativeProcessKey(evt.code, evt.key, evt);\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n    /**\n     * Process the last keyboard input\n     *\n     * @param code The ascii input number\n     * @param key The key string representation\n     * @param evt The keyboard event emits with input\n     * @internal\n     */\n    alternativeProcessKey(code, key, evt) {\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\n            return;\n        }\n        // Specific cases\n        switch (code) {\n            case \"KeyA\": // A - select all\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._selectAllText();\n                    evt.preventDefault();\n                    return;\n                }\n                break;\n            case \"Period\": //SLASH\n                if (evt && evt.shiftKey) {\n                    evt.preventDefault();\n                }\n                break;\n            case \"Backspace\": // BACKSPACE\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                    this._cursorInfo.globalStartIndex--;\n                }\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._textHasChanged();\n                break;\n            case \"Delete\": // DELETE\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\n                }\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._textHasChanged();\n                break;\n            case \"Enter\": // RETURN\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\n                this._cursorInfo.globalStartIndex++;\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._textHasChanged();\n                return;\n            case \"End\": // END\n                this._cursorInfo.globalStartIndex = this.text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case \"Home\": // HOME\n                this._cursorInfo.globalStartIndex = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case \"ArrowLeft\": // LEFT\n                this._markAsDirty();\n                if (evt && evt.shiftKey) {\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\n                    }\n                    // store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                        this._cursorInfo.globalStartIndex--;\n                        this._isTextHighlightOn = true;\n                    }\n                    else {\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\n                            this._cursorInfo.globalEndIndex--;\n                        }\n                        else {\n                            this._cursorInfo.globalStartIndex--;\n                        }\n                    }\n                    this._blinkIsEven = true;\n                    evt.preventDefault();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                }\n                else if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    // ctr + <-\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\n                    evt.preventDefault();\n                }\n                else if (this._cursorInfo.globalStartIndex > 0) {\n                    this._cursorInfo.globalStartIndex--;\n                }\n                // update the cursor\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                return;\n            case \"ArrowRight\": // RIGHT\n                this._markAsDirty();\n                if (evt && evt.shiftKey) {\n                    // shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\n                        this._cursorInfo.globalEndIndex += rightDelta;\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\n                    }\n                    // store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                        this._cursorInfo.globalEndIndex++;\n                        this._isTextHighlightOn = true;\n                    }\n                    else {\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\n                            this._cursorInfo.globalStartIndex++;\n                        }\n                        else {\n                            this._cursorInfo.globalEndIndex++;\n                        }\n                    }\n                    this._blinkIsEven = true;\n                    evt.preventDefault();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\n                }\n                else if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    //ctr + ->\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\n                    this._cursorInfo.globalStartIndex += rightDelta;\n                }\n                else if (this._cursorInfo.globalStartIndex < this.text.length) {\n                    this._cursorInfo.globalStartIndex++;\n                }\n                // update the cursor\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                return;\n            case \"ArrowUp\": // UP\n                // update the cursor\n                this._blinkIsEven = false;\n                if (evt) {\n                    if (evt.shiftKey) {\n                        if (!this._isTextHighlightOn) {\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\n                        }\n                        this._isTextHighlightOn = true;\n                        this._blinkIsEven = true;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    evt.preventDefault();\n                }\n                if (this._cursorInfo.currentLineIndex === 0) {\n                    // First line\n                    this._cursorInfo.globalStartIndex = 0;\n                }\n                else {\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\n                    let tmpIndex = 0;\n                    let relativeIndex = 0;\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\n                        tmpIndex = this._cursorInfo.globalStartIndex;\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\n                    }\n                    else {\n                        tmpIndex = this._cursorInfo.globalEndIndex;\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\n                    }\n                    const currentText = currentLine.text.substr(0, relativeIndex);\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\n                    let upperWidth = 0;\n                    let previousWidth = 0;\n                    tmpIndex -= relativeIndex; // Start of current line\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\n                    let upperLineRelativeIndex = 0;\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\n                        tmpIndex++;\n                        upperLineRelativeIndex++;\n                        previousWidth = Math.abs(currentWidth - upperWidth);\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\n                    }\n                    // Find closest move\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\n                        tmpIndex--;\n                    }\n                    if (!this._isTextHighlightOn) {\n                        this._cursorInfo.globalStartIndex = tmpIndex;\n                    }\n                    else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\n                        this._cursorInfo.globalStartIndex = tmpIndex;\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\n                    }\n                    else {\n                        this._cursorInfo.globalEndIndex = tmpIndex;\n                    }\n                }\n                this._markAsDirty();\n                return;\n            case \"ArrowDown\": // DOWN\n                // update the cursor\n                this._blinkIsEven = false;\n                if (evt) {\n                    if (evt.shiftKey) {\n                        if (!this._isTextHighlightOn) {\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\n                        }\n                        this._isTextHighlightOn = true;\n                        this._blinkIsEven = true;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    evt.preventDefault();\n                }\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\n                    // Last line\n                    this._cursorInfo.globalStartIndex = this.text.length;\n                }\n                else {\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\n                    let tmpIndex = 0;\n                    let relativeIndex = 0;\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\n                        tmpIndex = this._cursorInfo.globalStartIndex;\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\n                    }\n                    else {\n                        tmpIndex = this._cursorInfo.globalEndIndex;\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\n                    }\n                    const currentText = currentLine.text.substr(0, relativeIndex);\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\n                    let underWidth = 0;\n                    let previousWidth = 0;\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\n                    let underLineRelativeIndex = 0;\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\n                        tmpIndex++;\n                        underLineRelativeIndex++;\n                        previousWidth = Math.abs(currentWidth - underWidth);\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\n                    }\n                    // Find closest move\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\n                        tmpIndex--;\n                    }\n                    if (!this._isTextHighlightOn) {\n                        this._cursorInfo.globalStartIndex = tmpIndex;\n                    }\n                    else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\n                        this._cursorInfo.globalStartIndex = tmpIndex;\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\n                        }\n                    }\n                    else {\n                        this._cursorInfo.globalEndIndex = tmpIndex;\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\n                    }\n                }\n                this._markAsDirty();\n                return;\n        }\n        // Printable characters\n        if ((key === null || key === void 0 ? void 0 : key.length) === 1) {\n            evt === null || evt === void 0 ? void 0 : evt.preventDefault();\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                this._isTextHighlightOn = false;\n                this._blinkIsEven = false;\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\n                this._cursorInfo.globalStartIndex += key.length;\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                this._textHasChanged();\n            }\n        }\n    }\n    _parseLineWordWrap(line = \"\", width, context) {\n        const lines = [];\n        const words = line.split(\" \");\n        let lineWidth = 0;\n        for (let n = 0; n < words.length; n++) {\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\n            const metrics = context.measureText(testLine);\n            const testWidth = metrics.width;\n            if (testWidth > width) {\n                if (n > 0) {\n                    // Avoid first word duplication if of too long\n                    lineWidth = context.measureText(line).width;\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\n                }\n                line = words[n];\n                let flushedLine = \"\";\n                line.split(\"\").map((char) => {\n                    if (context.measureText(flushedLine + char).width > width) {\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\\n\" });\n                        flushedLine = \"\";\n                    }\n                    flushedLine += char;\n                });\n                line = flushedLine;\n                // Measure remaining characters\n                lineWidth = context.measureText(line).width;\n            }\n            else {\n                lineWidth = testWidth;\n                line = testLine;\n            }\n        }\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\n        return lines;\n    }\n    _breakLines(refWidth, context) {\n        const lines = [];\n        const _lines = this.text.split(\"\\n\");\n        if (this.clipContent) {\n            for (const _line of _lines) {\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\n            }\n        }\n        else {\n            for (const _line of _lines) {\n                lines.push(this._parseLine(_line, context));\n            }\n        }\n        lines[lines.length - 1].lineEnding = \"\\n\";\n        return lines;\n    }\n    _parseLine(line = \"\", context) {\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\n    }\n    /**\n     * Processing of child right before the parent measurement update\n     *\n     * @param parentMeasure The parent measure\n     * @param context The rendering canvas\n     * @internal\n     */\n    _preMeasure(parentMeasure, context) {\n        if (!this._fontOffset || this._wasDirty) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n        let text = this._beforeRenderText(this._textWrapper).text;\n        // placeholder conditions and color setting\n        if (!this._isFocused && !this.text && this._placeholderText) {\n            text = this._placeholderText;\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n        // measures the textlength -> this.measure.width\n        this._textWidth = context.measureText(text).width;\n        // we double up the margin width\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            const tmpLines = text.split(\"\\n\");\n            const longerString = tmpLines.reduce((acc, val) => {\n                const valueLength = context.measureText(val).width;\n                const accLength = context.measureText(acc).width;\n                return valueLength > accLength ? val : acc;\n            }, \"\");\n            const longerStringWidth = context.measureText(longerString).width;\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\n            this.autoStretchWidth = true;\n        }\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n        // Prepare lines\n        this._lines = this._breakLines(this._availableWidth, context);\n        // can we find a cleaner implementation here?\n        this._contextForBreakLines = context;\n        if (this._autoStretchHeight) {\n            const textHeight = this._lines.length * this._fontOffset.height;\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\n            this._autoStretchHeight = true;\n        }\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\n        if (this._isFocused) {\n            this._cursorInfo.currentLineIndex = 0;\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\n            let tmpLength = 0;\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\n                tmpLength += lineLength;\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\n                    this._cursorInfo.currentLineIndex++;\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\n                }\n            }\n        }\n    }\n    _computeScroll() {\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        }\n        else {\n            this._scrollLeft = this._clipTextLeft;\n        }\n        if (this._isFocused && !this._autoStretchHeight) {\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\n            const textTop = this._clipTextTop - selectedHeight;\n            if (!this._scrollTop) {\n                this._scrollTop = textTop;\n            }\n        }\n        else {\n            this._scrollTop = this._clipTextTop;\n        }\n    }\n    /**\n     * Processing of child after the parent measurement update\n     *\n     * @internal\n     */\n    _additionalProcessing() {\n        // Flush the highlighted text each frame\n        this.highlightedText = \"\";\n        this.onLinesReadyObservable.notifyObservers(this);\n    }\n    _drawText(text, textWidth, y, context) {\n        const width = this._currentMeasure.width;\n        let x = this._scrollLeft;\n        switch (this._textHorizontalAlignment) {\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                x += 0;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                x += width - textWidth;\n                break;\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                x += (width - textWidth) / 2;\n                break;\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        if (this.outlineWidth) {\n            context.strokeText(text, this._currentMeasure.left + x, y);\n        }\n        context.fillText(text, x, y);\n    }\n    /**\n     * Copy the text in the clipboard\n     *\n     * @param ev The clipboard event\n     * @internal\n     */\n    _onCopyText(ev) {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch (_a) { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /**\n     * Cut the text and copy it in the clipboard\n     *\n     * @param ev The clipboard event\n     * @internal\n     */\n    _onCutText(ev) {\n        if (!this._highlightedText) {\n            return;\n        }\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch (_a) { } //pass\n        this._host.clipboardData = this._highlightedText;\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\n        this._textHasChanged();\n    }\n    /**\n     * Paste the copied text from the clipboard\n     *\n     * @param ev The clipboard event\n     * @internal\n     */\n    _onPasteText(ev) {\n        let data = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        this._isTextHighlightOn = false;\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\n        this._cursorInfo.globalStartIndex += deltaIndex;\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n        this._textHasChanged();\n    }\n    _draw(context) {\n        var _a, _b;\n        this._computeScroll();\n        this._scrollLeft = (_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0;\n        this._scrollTop = (_b = this._scrollTop) !== null && _b !== void 0 ? _b : 0;\n        context.save();\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        }\n        else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        // sets the color of the rectangle (border if background available)\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n        const height = this._currentMeasure.height;\n        const width = this._currentMeasure.width;\n        let rootY = 0;\n        switch (this._textVerticalAlignment) {\n            case Control.VERTICAL_ALIGNMENT_TOP:\n                rootY = this._fontOffset.ascent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\n                break;\n            case Control.VERTICAL_ALIGNMENT_CENTER:\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\n                break;\n        }\n        context.save();\n        context.beginPath();\n        context.fillStyle = this.fontStyle;\n        // here we define the visible reactangle to clip it in next line\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\n        context.clip();\n        // Text\n        rootY += this._scrollTop;\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\n                if (this._lineSpacing.isPixel) {\n                    rootY += this._lineSpacing.getValue(this._host);\n                }\n                else {\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\n                }\n            }\n            this._drawText(line.text, line.width, rootY, context);\n            rootY += this._fontOffset.height;\n        }\n        context.restore();\n        // Cursor\n        if (this._isFocused) {\n            // Render cursor\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\n                if (cursorLeft < this._clipTextLeft) {\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\n                    cursorLeft = this._clipTextLeft;\n                    this._markAsDirty();\n                }\n                else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\n                    this._markAsDirty();\n                }\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\n                if (cursorTop < this._clipTextTop) {\n                    this._scrollTop += this._clipTextTop - cursorTop;\n                    cursorTop = this._clipTextTop;\n                    this._markAsDirty();\n                }\n                else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\n                }\n            }\n            this._resetBlinking();\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\n                    const line = this._lines[i];\n                    let highlightRootX = this._scrollLeft;\n                    switch (this._textHorizontalAlignment) {\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\n                            highlightRootX += 0;\n                            break;\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\n                            highlightRootX += width - line.width;\n                            break;\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\n                            highlightRootX += (width - line.width) / 2;\n                            break;\n                    }\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\n                    const selectedText = line.text.substring(begin, end);\n                    const hightlightWidth = context.measureText(selectedText).width;\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\n                    highlightRootY += this._fontOffset.height;\n                }\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\n                    this._resetBlinking();\n                }\n            }\n        }\n        context.restore();\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            }\n            else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n            context.lineWidth = this._thickness;\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n    }\n    _resetBlinking() {\n        clearTimeout(this._blinkTimeout);\n        this._blinkTimeout = setTimeout(() => {\n            this._blinkIsEven = !this._blinkIsEven;\n            this._markAsDirty();\n        }, 500);\n    }\n    _applyStates(context) {\n        super._applyStates(context);\n        if (this.outlineWidth) {\n            context.lineWidth = this.outlineWidth;\n            context.strokeStyle = this.outlineColor;\n        }\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        this._clickedCoordinateX = coordinates.x;\n        this._clickedCoordinateY = coordinates.y;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n        return true;\n    }\n    // for textselection\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\n            return;\n        }\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinateX = coordinates.x;\n            this._clickedCoordinateY = coordinates.y;\n            if (!this._isTextHighlightOn) {\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\n                this._isTextHighlightOn = true;\n            }\n            this._markAsDirty();\n        }\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n    /**\n     * Apply the correct position of cursor according to current modification\n     */\n    _updateCursorPosition() {\n        var _a;\n        if (!this._isFocused) {\n            return;\n        }\n        if (this._clickedCoordinateX && this._clickedCoordinateY) {\n            if (!this._isTextHighlightOn) {\n                this._cursorInfo = {\n                    globalStartIndex: 0,\n                    globalEndIndex: 0,\n                    relativeStartIndex: 0,\n                    relativeEndIndex: 0,\n                    currentLineIndex: 0,\n                };\n            }\n            let globalIndex = 0;\n            let relativeIndex = 0;\n            const lastClickedCoordinateY = this._clickedCoordinateY - this._scrollTop;\n            const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\n            this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\n            let currentSize = 0;\n            const relativeXPosition = this._clickedCoordinateX - ((_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0);\n            let previousDist = 0;\n            for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\n                const line = this._lines[index];\n                globalIndex += line.text.length + line.lineEnding.length;\n            }\n            while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\n                relativeIndex++;\n                previousDist = Math.abs(relativeXPosition - currentSize);\n                currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\n            }\n            // Find closest move\n            if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\n                relativeIndex--;\n            }\n            globalIndex += relativeIndex;\n            if (!this._isTextHighlightOn) {\n                this._cursorInfo.globalStartIndex = globalIndex;\n                this._cursorInfo.relativeStartIndex = relativeIndex;\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\n            }\n            else {\n                if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\n                    this._cursorInfo.globalStartIndex = globalIndex;\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\n                    this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\n                    this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\n                }\n                else {\n                    this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\n                    this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\n                    this._cursorInfo.globalEndIndex = globalIndex;\n                    this._cursorInfo.relativeEndIndex = relativeIndex;\n                }\n            }\n            // Avoid the caret during highlighting\n            this._blinkIsEven = this._isTextHighlightOn;\n            this._clickedCoordinateX = null;\n            this._clickedCoordinateY = null;\n        }\n        else {\n            // Standard behavior same as Current line is at least above the initial highlight index\n            this._cursorInfo.relativeStartIndex = 0;\n            this._cursorInfo.currentLineIndex = 0;\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\n            let tmpLength = 0;\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\n                tmpLength += lineLength;\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\n                    this._cursorInfo.currentLineIndex++;\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\n                }\n            }\n            this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\n            if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\n                // Current line is at least below the initial highlight index\n                while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\n                    tmpLength += lineLength;\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\n                        this._cursorInfo.currentLineIndex++;\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\n                    }\n                }\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\n            }\n            else if (!this._isTextHighlightOn) {\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\n            }\n        }\n    }\n    /**\n     * Update all values of cursor information based on cursorIndex value\n     *\n     * @param offset The index to take care of\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _updateValueFromCursorIndex(offset) {\n        // Override to avoid parent behavior during _onPointerMove\n    }\n    /**\n     * Select the word immediatly under the cursor on double click\n     *\n     * @param _evt Pointer informations of double click\n     * @internal\n     */\n    _processDblClick(_evt) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        let moveLeft, moveRight;\n        do {\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\n            moveRight =\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\n        } while (moveLeft || moveRight);\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = true;\n        this._markAsDirty();\n    }\n    /** @internal */\n    _selectAllText() {\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = true;\n        this._highlightCursorInfo = {\n            initialStartIndex: 0,\n            initialRelativeStartIndex: 0,\n            initialLineIndex: 0,\n        };\n        this._cursorInfo = {\n            globalStartIndex: 0,\n            globalEndIndex: this._textWrapper.length,\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\n            relativeStartIndex: 0,\n            currentLineIndex: this._lines.length - 1,\n        };\n        this._markAsDirty();\n    }\n    dipose() {\n        super.dispose();\n        this.onLinesReadyObservable.clear();\n    }\n}\n__decorate([\n    serialize()\n], InputTextArea.prototype, \"autoStretchHeight\", null);\n__decorate([\n    serialize()\n], InputTextArea.prototype, \"maxHeight\", null);\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\n//# sourceMappingURL=inputTextArea.js.map","import { InputText } from \"./inputText.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { TextWrapper } from \"./textWrapper.js\";\n/**\n * Class used to create a password control\n */\nexport class InputPassword extends InputText {\n    _getTypeName() {\n        return \"InputPassword\";\n    }\n    _beforeRenderText(textWrapper) {\n        const pwdTextWrapper = new TextWrapper();\n        let txt = \"\";\n        for (let i = 0; i < textWrapper.length; i++) {\n            txt += \"\\u2022\";\n        }\n        pwdTextWrapper.text = txt;\n        return pwdTextWrapper;\n    }\n}\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\n//# sourceMappingURL=inputPassword.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Vector3, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Control } from \"./control.js\";\nimport { ValueAndUnit } from \"../valueAndUnit.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to render 2D lines */\nexport class Line extends Control {\n    /** Gets or sets the dash pattern */\n    get dash() {\n        return this._dash;\n    }\n    set dash(value) {\n        if (this._dash === value) {\n            return;\n        }\n        this._dash = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the control connected with the line end */\n    get connectedControl() {\n        return this._connectedControl;\n    }\n    set connectedControl(value) {\n        if (this._connectedControl === value) {\n            return;\n        }\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\n            this._connectedControlDirtyObserver = null;\n        }\n        if (value) {\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\n        }\n        this._connectedControl = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets start coordinates on X axis */\n    get x1() {\n        return this._x1.toString(this._host);\n    }\n    set x1(value) {\n        if (this._x1.toString(this._host) === value) {\n            return;\n        }\n        if (this._x1.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets start coordinates on Y axis */\n    get y1() {\n        return this._y1.toString(this._host);\n    }\n    set y1(value) {\n        if (this._y1.toString(this._host) === value) {\n            return;\n        }\n        if (this._y1.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets end coordinates on X axis */\n    get x2() {\n        return this._x2.toString(this._host);\n    }\n    set x2(value) {\n        if (this._x2.toString(this._host) === value) {\n            return;\n        }\n        if (this._x2.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets end coordinates on Y axis */\n    get y2() {\n        return this._y2.toString(this._host);\n    }\n    set y2(value) {\n        if (this._y2.toString(this._host) === value) {\n            return;\n        }\n        if (this._y2.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets line width */\n    get lineWidth() {\n        return this._lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._lineWidth === value) {\n            return;\n        }\n        this._lineWidth = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets horizontal alignment */\n    set horizontalAlignment(value) {\n        return;\n    }\n    /** Gets or sets vertical alignment */\n    set verticalAlignment(value) {\n        return;\n    }\n    /** @internal */\n    get _effectiveX2() {\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\n    }\n    /** @internal */\n    get _effectiveY2() {\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\n    }\n    /**\n     * Creates a new Line\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._lineWidth = 1;\n        /** @internal */\n        this._x1 = new ValueAndUnit(0);\n        /** @internal */\n        this._y1 = new ValueAndUnit(0);\n        /** @internal */\n        this._x2 = new ValueAndUnit(0);\n        /** @internal */\n        this._y2 = new ValueAndUnit(0);\n        this._dash = new Array();\n        this._automaticSize = true;\n        this.isHitTestVisible = false;\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n    }\n    _getTypeName() {\n        return \"Line\";\n    }\n    _draw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        this._applyStates(context);\n        context.strokeStyle = this._getColor(context);\n        context.lineWidth = this._lineWidth;\n        context.setLineDash(this._dash);\n        context.beginPath();\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\n        context.stroke();\n        context.restore();\n    }\n    _measure() {\n        // Width / Height\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\n    }\n    _computeAlignment(parentMeasure) {\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\n    }\n    /**\n     * Move one end of the line given 3D cartesian coordinates.\n     * @param position Targeted world position\n     * @param scene Scene\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\n     */\n    moveToVector3(position, scene, end = false) {\n        if (!this._host || this.parent !== this._host._rootContainer) {\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\n            return;\n        }\n        const globalViewport = this._host._getGlobalViewport();\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\n        this._moveToProjectedPosition(projectedPosition, end);\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n            this.notRenderable = true;\n            return;\n        }\n        this.notRenderable = false;\n    }\n    /**\n     * Move one end of the line to a position in screen absolute space.\n     * @param projectedPosition Position in screen absolute space (X, Y)\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\n     */\n    _moveToProjectedPosition(projectedPosition, end = false) {\n        const x = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\n        const y = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\n        if (end) {\n            this.x2 = x;\n            this.y2 = y;\n            this._x2.ignoreAdaptiveScaling = true;\n            this._y2.ignoreAdaptiveScaling = true;\n        }\n        else {\n            this.x1 = x;\n            this.y1 = y;\n            this._x1.ignoreAdaptiveScaling = true;\n            this._y1.ignoreAdaptiveScaling = true;\n        }\n    }\n}\n__decorate([\n    serialize()\n], Line.prototype, \"dash\", null);\n__decorate([\n    serialize()\n], Line.prototype, \"x1\", null);\n__decorate([\n    serialize()\n], Line.prototype, \"y1\", null);\n__decorate([\n    serialize()\n], Line.prototype, \"x2\", null);\n__decorate([\n    serialize()\n], Line.prototype, \"y2\", null);\n__decorate([\n    serialize()\n], Line.prototype, \"lineWidth\", null);\nRegisterClass(\"BABYLON.GUI.Line\", Line);\n//# sourceMappingURL=line.js.map","import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Class used to store a point for a MultiLine object.\n * The point can be pure 2D coordinates, a mesh or a control\n */\nexport class MultiLinePoint {\n    /**\n     * Creates a new MultiLinePoint\n     * @param multiLine defines the source MultiLine object\n     */\n    constructor(multiLine) {\n        this._multiLine = multiLine;\n        this._x = new ValueAndUnit(0);\n        this._y = new ValueAndUnit(0);\n        this._point = new Vector3(0, 0, 0);\n    }\n    /** Gets or sets x coordinate */\n    get x() {\n        return this._x.toString(this._multiLine._host);\n    }\n    set x(value) {\n        if (this._x.toString(this._multiLine._host) === value) {\n            return;\n        }\n        if (this._x.fromString(value)) {\n            this._multiLine._markAsDirty();\n        }\n    }\n    /** Gets or sets y coordinate */\n    get y() {\n        return this._y.toString(this._multiLine._host);\n    }\n    set y(value) {\n        if (this._y.toString(this._multiLine._host) === value) {\n            return;\n        }\n        if (this._y.fromString(value)) {\n            this._multiLine._markAsDirty();\n        }\n    }\n    /** Gets or sets the control associated with this point */\n    get control() {\n        return this._control;\n    }\n    set control(value) {\n        if (this._control === value) {\n            return;\n        }\n        if (this._control && this._controlObserver) {\n            this._control.onDirtyObservable.remove(this._controlObserver);\n            this._controlObserver = null;\n        }\n        this._control = value;\n        if (this._control) {\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\n        }\n        this._multiLine._markAsDirty();\n    }\n    /** Gets or sets the mesh associated with this point */\n    get mesh() {\n        return this._mesh;\n    }\n    set mesh(value) {\n        if (this._mesh === value) {\n            return;\n        }\n        if (this._mesh && this._meshObserver) {\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\n        }\n        this._mesh = value;\n        if (this._mesh) {\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\n        }\n        this._multiLine._markAsDirty();\n    }\n    /** Resets links */\n    resetLinks() {\n        this.control = null;\n        this.mesh = null;\n    }\n    /**\n     * Gets a translation vector with Z component\n     * @returns the translation vector\n     */\n    translate() {\n        this._point = this._translatePoint();\n        return this._point;\n    }\n    _translatePoint() {\n        if (this._mesh != null) {\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\n        }\n        else if (this._control != null) {\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\n        }\n        else {\n            const host = this._multiLine._host;\n            const xValue = this._x.getValueInPixel(host, Number(host._canvas.width));\n            const yValue = this._y.getValueInPixel(host, Number(host._canvas.height));\n            return new Vector3(xValue, yValue, 1 - Epsilon);\n        }\n    }\n    /** Release associated resources */\n    dispose() {\n        this.resetLinks();\n    }\n}\n//# sourceMappingURL=multiLinePoint.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh.js\";\nimport { Control } from \"./control.js\";\nimport { MultiLinePoint } from \"../multiLinePoint.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create multi line control\n */\nexport class MultiLine extends Control {\n    /**\n     * Creates a new MultiLine\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._lineWidth = 1;\n        /** Function called when a point is updated */\n        this.onPointUpdate = () => {\n            this._markAsDirty();\n        };\n        this._automaticSize = true;\n        this.isHitTestVisible = false;\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._dash = [];\n        this._points = [];\n    }\n    /** Gets or sets dash pattern */\n    get dash() {\n        return this._dash;\n    }\n    set dash(value) {\n        if (this._dash === value) {\n            return;\n        }\n        this._dash = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets point stored at specified index\n     * @param index defines the index to look for\n     * @returns the requested point if found\n     */\n    getAt(index) {\n        if (!this._points[index]) {\n            this._points[index] = new MultiLinePoint(this);\n        }\n        return this._points[index];\n    }\n    /**\n     * Adds new points to the point collection\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\n     * @returns the list of created MultiLinePoint\n     */\n    add(...items) {\n        return items.map((item) => this.push(item));\n    }\n    /**\n     * Adds a new point to the point collection\n     * @param item defines the item (mesh, control or 2d coordinates) to add\n     * @returns the created MultiLinePoint\n     */\n    push(item) {\n        const point = this.getAt(this._points.length);\n        if (item == null) {\n            return point;\n        }\n        if (item instanceof AbstractMesh) {\n            point.mesh = item;\n        }\n        else if (item instanceof Control) {\n            point.control = item;\n        }\n        else if (item.x != null && item.y != null) {\n            point.x = item.x;\n            point.y = item.y;\n        }\n        return point;\n    }\n    /**\n     * Remove a specific value or point from the active point collection\n     * @param value defines the value or point to remove\n     */\n    remove(value) {\n        let index;\n        if (value instanceof MultiLinePoint) {\n            index = this._points.indexOf(value);\n            if (index === -1) {\n                return;\n            }\n        }\n        else {\n            index = value;\n        }\n        const point = this._points[index];\n        if (!point) {\n            return;\n        }\n        point.dispose();\n        this._points.splice(index, 1);\n    }\n    /**\n     * Resets this object to initial state (no point)\n     */\n    reset() {\n        while (this._points.length > 0) {\n            this.remove(this._points.length - 1);\n        }\n    }\n    /**\n     * Resets all links\n     */\n    resetLinks() {\n        this._points.forEach((point) => {\n            if (point != null) {\n                point.resetLinks();\n            }\n        });\n    }\n    /** Gets or sets line width */\n    get lineWidth() {\n        return this._lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._lineWidth === value) {\n            return;\n        }\n        this._lineWidth = value;\n        this._markAsDirty();\n    }\n    set horizontalAlignment(value) {\n        return;\n    }\n    set verticalAlignment(value) {\n        return;\n    }\n    _getTypeName() {\n        return \"MultiLine\";\n    }\n    _draw(context) {\n        context.save();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        this._applyStates(context);\n        context.strokeStyle = this.color;\n        context.lineWidth = this._lineWidth;\n        context.setLineDash(this._dash);\n        context.beginPath();\n        let first = true; //first index is not necessarily 0\n        let previousPoint;\n        this._points.forEach((point) => {\n            if (!point) {\n                return;\n            }\n            if (first) {\n                context.moveTo(point._point.x, point._point.y);\n                first = false;\n            }\n            else {\n                if (point._point.z < 1 && previousPoint.z < 1) {\n                    context.lineTo(point._point.x, point._point.y);\n                }\n                else {\n                    context.moveTo(point._point.x, point._point.y);\n                }\n            }\n            previousPoint = point._point;\n        });\n        context.stroke();\n        context.restore();\n    }\n    _additionalProcessing() {\n        this._minX = null;\n        this._minY = null;\n        this._maxX = null;\n        this._maxY = null;\n        this._points.forEach((point) => {\n            if (!point) {\n                return;\n            }\n            point.translate();\n            if (this._minX == null || point._point.x < this._minX) {\n                this._minX = point._point.x;\n            }\n            if (this._minY == null || point._point.y < this._minY) {\n                this._minY = point._point.y;\n            }\n            if (this._maxX == null || point._point.x > this._maxX) {\n                this._maxX = point._point.x;\n            }\n            if (this._maxY == null || point._point.y > this._maxY) {\n                this._maxY = point._point.y;\n            }\n        });\n        if (this._minX == null) {\n            this._minX = 0;\n        }\n        if (this._minY == null) {\n            this._minY = 0;\n        }\n        if (this._maxX == null) {\n            this._maxX = 0;\n        }\n        if (this._maxY == null) {\n            this._maxY = 0;\n        }\n    }\n    _measure() {\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\n            return;\n        }\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\n    }\n    _computeAlignment() {\n        if (this._minX == null || this._minY == null) {\n            return;\n        }\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\n    }\n    dispose() {\n        this.reset();\n        super.dispose();\n    }\n}\n__decorate([\n    serialize()\n], MultiLine.prototype, \"dash\", null);\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\n//# sourceMappingURL=multiLine.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Control } from \"./control.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create radio button controls\n */\nexport class RadioButton extends Control {\n    /** Gets or sets border thickness */\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (this._thickness === value) {\n            return;\n        }\n        this._thickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating the ratio between overall size and check size */\n    get checkSizeRatio() {\n        return this._checkSizeRatio;\n    }\n    set checkSizeRatio(value) {\n        value = Math.max(Math.min(1, value), 0);\n        if (this._checkSizeRatio === value) {\n            return;\n        }\n        this._checkSizeRatio = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\n    get isChecked() {\n        return this._isChecked;\n    }\n    set isChecked(value) {\n        if (this._isChecked === value) {\n            return;\n        }\n        this._isChecked = value;\n        this._markAsDirty();\n        this.onIsCheckedChangedObservable.notifyObservers(value);\n        if (this._isChecked && this._host) {\n            // Update all controls from same group\n            this._host.executeOnAllControls((control) => {\n                if (control === this) {\n                    return;\n                }\n                if (control.group === undefined) {\n                    return;\n                }\n                const childRadio = control;\n                if (childRadio.group === this.group) {\n                    childRadio.isChecked = false;\n                }\n            });\n        }\n    }\n    /**\n     * Creates a new RadioButton\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._isChecked = false;\n        this._background = \"black\";\n        this._checkSizeRatio = 0.8;\n        this._thickness = 1;\n        /** Gets or sets group name */\n        this.group = \"\";\n        /** Observable raised when isChecked is changed */\n        this.onIsCheckedChangedObservable = new Observable();\n        this.isPointerBlocker = true;\n    }\n    _getTypeName() {\n        return \"RadioButton\";\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        const actualWidth = this._currentMeasure.width - this._thickness;\n        const actualHeight = this._currentMeasure.height - this._thickness;\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        // Outer\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n        context.fill();\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        context.strokeStyle = this.color;\n        context.lineWidth = this._thickness;\n        context.stroke();\n        // Inner\n        if (this._isChecked) {\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\n            const offsetWidth = actualWidth * this._checkSizeRatio;\n            const offseHeight = actualHeight * this._checkSizeRatio;\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\n            context.fill();\n        }\n        context.restore();\n    }\n    // Events\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        if (!this.isChecked) {\n            this.isChecked = true;\n        }\n        return true;\n    }\n    /**\n     * Utility function to easily create a radio button with a header\n     * @param title defines the label to use for the header\n     * @param group defines the group to use for the radio button\n     * @param isChecked defines the initial state of the radio button\n     * @param onValueChanged defines the callback to call when value changes\n     * @returns a StackPanel containing the radio button and a textBlock\n     */\n    static AddRadioButtonWithHeader(title, group, isChecked, onValueChanged) {\n        const panel = new StackPanel();\n        panel.isVertical = false;\n        panel.height = \"30px\";\n        const radio = new RadioButton();\n        radio.width = \"20px\";\n        radio.height = \"20px\";\n        radio.isChecked = isChecked;\n        radio.color = \"green\";\n        radio.group = group;\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\n        panel.addControl(radio);\n        const header = new TextBlock();\n        header.text = title;\n        header.width = \"180px\";\n        header.paddingLeft = \"5px\";\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        header.color = \"white\";\n        panel.addControl(header);\n        return panel;\n    }\n}\n__decorate([\n    serialize()\n], RadioButton.prototype, \"thickness\", null);\n__decorate([\n    serialize()\n], RadioButton.prototype, \"group\", void 0);\n__decorate([\n    serialize()\n], RadioButton.prototype, \"checkSizeRatio\", null);\n__decorate([\n    serialize()\n], RadioButton.prototype, \"background\", null);\n__decorate([\n    serialize()\n], RadioButton.prototype, \"isChecked\", null);\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\n//# sourceMappingURL=radioButton.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Control } from \"../control.js\";\nimport { ValueAndUnit } from \"../../valueAndUnit.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create slider controls\n */\nexport class BaseSlider extends Control {\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\n    get displayThumb() {\n        return this._displayThumb;\n    }\n    set displayThumb(value) {\n        if (this._displayThumb === value) {\n            return;\n        }\n        this._displayThumb = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a step to apply to values (0 by default) */\n    get step() {\n        return this._step;\n    }\n    set step(value) {\n        if (this._step === value) {\n            return;\n        }\n        this._step = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\n    get barOffset() {\n        return this._barOffset.toString(this._host);\n    }\n    /** Gets main bar offset in pixels*/\n    get barOffsetInPixels() {\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set barOffset(value) {\n        if (this._barOffset.toString(this._host) === value) {\n            return;\n        }\n        if (this._barOffset.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets thumb width */\n    get thumbWidth() {\n        return this._thumbWidth.toString(this._host);\n    }\n    /** Gets thumb width in pixels */\n    get thumbWidthInPixels() {\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n    set thumbWidth(value) {\n        if (this._thumbWidth.toString(this._host) === value) {\n            return;\n        }\n        if (this._thumbWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n    /** Gets or sets minimum value */\n    get minimum() {\n        return this._minimum;\n    }\n    set minimum(value) {\n        if (this._minimum === value) {\n            return;\n        }\n        this._minimum = value;\n        this._markAsDirty();\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\n    }\n    /** Gets or sets maximum value */\n    get maximum() {\n        return this._maximum;\n    }\n    set maximum(value) {\n        if (this._maximum === value) {\n            return;\n        }\n        this._maximum = value;\n        this._markAsDirty();\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\n    }\n    /** Gets or sets current value */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\n        if (this._value === value) {\n            return;\n        }\n        this._value = value;\n        this._markAsDirty();\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\n    get isVertical() {\n        return this._isVertical;\n    }\n    set isVertical(value) {\n        if (this._isVertical === value) {\n            return;\n        }\n        this._isVertical = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\n    get isThumbClamped() {\n        return this._isThumbClamped;\n    }\n    set isThumbClamped(value) {\n        if (this._isThumbClamped === value) {\n            return;\n        }\n        this._isThumbClamped = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new BaseSlider\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\n        this._minimum = 0;\n        this._maximum = 100;\n        this._value = 50;\n        this._isVertical = false;\n        this._barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\n        this._isThumbClamped = false;\n        this._displayThumb = true;\n        this._step = 0;\n        this._lastPointerDownId = -1;\n        // Shared rendering info\n        this._effectiveBarOffset = 0;\n        /** Observable raised when the slider value changes */\n        this.onValueChangedObservable = new Observable();\n        // Events\n        this._pointerIsDown = false;\n        this.isPointerBlocker = true;\n    }\n    _getTypeName() {\n        return \"BaseSlider\";\n    }\n    _getThumbPosition() {\n        if (this.isVertical) {\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\n        }\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\n    }\n    _getThumbThickness(type) {\n        let thumbThickness = 0;\n        switch (type) {\n            case \"circle\":\n                if (this._thumbWidth.isPixel) {\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\n                }\n                else {\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n                }\n                break;\n            case \"rectangle\":\n                if (this._thumbWidth.isPixel) {\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\n                }\n                else {\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n                }\n        }\n        return thumbThickness;\n    }\n    _prepareRenderingData(type) {\n        // Main bar\n        this._effectiveBarOffset = 0;\n        this._renderLeft = this._currentMeasure.left;\n        this._renderTop = this._currentMeasure.top;\n        this._renderWidth = this._currentMeasure.width;\n        this._renderHeight = this._currentMeasure.height;\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\n        this._effectiveThumbThickness = this._getThumbThickness(type);\n        if (this.displayThumb) {\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\n        }\n        //throw error when height is less than width for vertical slider\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\n            console.error(\"Height should be greater than width\");\n            return;\n        }\n        if (this._barOffset.isPixel) {\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\n        }\n        else {\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\n        }\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\n        if (this.isVertical) {\n            this._renderLeft += this._effectiveBarOffset;\n            if (!this.isThumbClamped && this.displayThumb) {\n                this._renderTop += this._effectiveThumbThickness / 2;\n            }\n            this._renderHeight = this._backgroundBoxLength;\n            this._renderWidth = this._backgroundBoxThickness;\n        }\n        else {\n            this._renderTop += this._effectiveBarOffset;\n            if (!this.isThumbClamped && this.displayThumb) {\n                this._renderLeft += this._effectiveThumbThickness / 2;\n            }\n            this._renderHeight = this._backgroundBoxThickness;\n            this._renderWidth = this._backgroundBoxLength;\n        }\n    }\n    /**\n     * @internal\n     */\n    _updateValueFromPointer(x, y) {\n        if (this.rotation != 0) {\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n            x = this._transformedPosition.x;\n            y = this._transformedPosition.y;\n        }\n        let value;\n        if (this._isVertical) {\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\n        }\n        else {\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\n        }\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        this._pointerIsDown = true;\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\n        this._host._capturingControl[pointerId] = this;\n        this._lastPointerDownId = pointerId;\n        return true;\n    }\n    _onPointerMove(target, coordinates, pointerId, pi) {\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\n        if (pointerId != this._lastPointerDownId) {\n            return;\n        }\n        if (this._pointerIsDown && !this.isReadOnly) {\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\n        }\n        super._onPointerMove(target, coordinates, pointerId, pi);\n    }\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick) {\n        this._pointerIsDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n    _onCanvasBlur() {\n        this._forcePointerUp();\n        super._onCanvasBlur();\n    }\n}\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"displayThumb\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"step\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"barOffset\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"thumbWidth\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"minimum\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"maximum\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"value\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"isVertical\", null);\n__decorate([\n    serialize()\n], BaseSlider.prototype, \"isThumbClamped\", null);\n//# sourceMappingURL=baseSlider.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\n/**\n * Class used to create slider controls\n */\nexport class Slider extends BaseSlider {\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\n    get displayValueBar() {\n        return this._displayValueBar;\n    }\n    set displayValueBar(value) {\n        if (this._displayValueBar === value) {\n            return;\n        }\n        this._displayValueBar = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets border color */\n    get borderColor() {\n        return this._borderColor;\n    }\n    set borderColor(value) {\n        if (this._borderColor === value) {\n            return;\n        }\n        this._borderColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background gradient */\n    get backgroundGradient() {\n        return this._backgroundGradient;\n    }\n    set backgroundGradient(value) {\n        if (this._backgroundGradient === value) {\n            return;\n        }\n        this._backgroundGradient = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets thumb's color */\n    get thumbColor() {\n        return this._thumbColor;\n    }\n    set thumbColor(value) {\n        if (this._thumbColor === value) {\n            return;\n        }\n        this._thumbColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\n    get isThumbCircle() {\n        return this._isThumbCircle;\n    }\n    set isThumbCircle(value) {\n        if (this._isThumbCircle === value) {\n            return;\n        }\n        this._isThumbCircle = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new Slider\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._background = \"black\";\n        this._borderColor = \"white\";\n        this._thumbColor = \"\";\n        this._isThumbCircle = false;\n        this._displayValueBar = true;\n        this._backgroundGradient = null;\n    }\n    _getTypeName() {\n        return \"Slider\";\n    }\n    _getBackgroundColor(context) {\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\n        let left = this._renderLeft;\n        let top = this._renderTop;\n        const width = this._renderWidth;\n        const height = this._renderHeight;\n        let radius = 0;\n        if (this.isThumbClamped && this.isThumbCircle) {\n            if (this.isVertical) {\n                top += this._effectiveThumbThickness / 2;\n            }\n            else {\n                left += this._effectiveThumbThickness / 2;\n            }\n            radius = this._backgroundBoxThickness / 2;\n        }\n        else {\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n        const thumbPosition = this._getThumbPosition();\n        context.fillStyle = this._getBackgroundColor(context);\n        if (this.isVertical) {\n            if (this.isThumbClamped) {\n                if (this.isThumbCircle) {\n                    context.beginPath();\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\n                    context.fill();\n                    context.fillRect(left, top, width, height);\n                }\n                else {\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\n                }\n            }\n            else {\n                context.fillRect(left, top, width, height);\n            }\n        }\n        else {\n            if (this.isThumbClamped) {\n                if (this.isThumbCircle) {\n                    context.beginPath();\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n                    context.fill();\n                    context.fillRect(left, top, width, height);\n                }\n                else {\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\n                }\n            }\n            else {\n                context.fillRect(left, top, width, height);\n            }\n        }\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n        // Value bar\n        context.fillStyle = this._getColor(context);\n        if (this._displayValueBar) {\n            if (this.isVertical) {\n                if (this.isThumbClamped) {\n                    if (this.isThumbCircle) {\n                        context.beginPath();\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\n                        context.fill();\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\n                    }\n                    else {\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\n                    }\n                }\n                else {\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\n                }\n            }\n            else {\n                if (this.isThumbClamped) {\n                    if (this.isThumbCircle) {\n                        context.beginPath();\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n                        context.fill();\n                        context.fillRect(left, top, thumbPosition, height);\n                    }\n                    else {\n                        context.fillRect(left, top, thumbPosition, height);\n                    }\n                }\n                else {\n                    context.fillRect(left, top, thumbPosition, height);\n                }\n            }\n        }\n        // Thumb\n        context.fillStyle = this._thumbColor || this._getColor(context);\n        if (this.displayThumb) {\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n            if (this._isThumbCircle) {\n                context.beginPath();\n                if (this.isVertical) {\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\n                }\n                else {\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\n                }\n                context.fill();\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                    context.shadowBlur = 0;\n                    context.shadowOffsetX = 0;\n                    context.shadowOffsetY = 0;\n                }\n                context.strokeStyle = this._borderColor;\n                context.stroke();\n            }\n            else {\n                if (this.isVertical) {\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n                }\n                else {\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n                }\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                    context.shadowBlur = 0;\n                    context.shadowOffsetX = 0;\n                    context.shadowOffsetY = 0;\n                }\n                context.strokeStyle = this._borderColor;\n                if (this.isVertical) {\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n                }\n                else {\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n                }\n            }\n        }\n        context.restore();\n    }\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        if (this.backgroundGradient) {\n            serializationObject.backgroundGradient = {};\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n        }\n    }\n    /** @internal */\n    _parseFromContent(serializedObject, host) {\n        super._parseFromContent(serializedObject, host);\n        if (serializedObject.backgroundGradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\n            this.backgroundGradient = new className();\n            this.backgroundGradient.parse(serializedObject.backgroundGradient);\n        }\n    }\n}\n__decorate([\n    serialize()\n], Slider.prototype, \"displayValueBar\", null);\n__decorate([\n    serialize()\n], Slider.prototype, \"borderColor\", null);\n__decorate([\n    serialize()\n], Slider.prototype, \"background\", null);\n__decorate([\n    serialize()\n], Slider.prototype, \"thumbColor\", null);\n__decorate([\n    serialize()\n], Slider.prototype, \"isThumbCircle\", null);\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\n//# sourceMappingURL=slider.js.map","import { Rectangle } from \"./rectangle.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { Control } from \"./control.js\";\nimport { TextBlock } from \"./textBlock.js\";\nimport { Checkbox } from \"./checkbox.js\";\nimport { RadioButton } from \"./radioButton.js\";\nimport { Slider } from \"./sliders/slider.js\";\nimport { Container } from \"./container.js\";\n/** Class used to create a RadioGroup\n * which contains groups of radio buttons\n */\nexport class SelectorGroup {\n    /**\n     * Creates a new SelectorGroup\n     * @param name of group, used as a group heading\n     */\n    constructor(\n    /** name of SelectorGroup */\n    name) {\n        this.name = name;\n        this._groupPanel = new StackPanel();\n        this._selectors = new Array();\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._groupHeader = this._addGroupHeader(name);\n    }\n    /** Gets the groupPanel of the SelectorGroup  */\n    get groupPanel() {\n        return this._groupPanel;\n    }\n    /** Gets the selectors array */\n    get selectors() {\n        return this._selectors;\n    }\n    /** Gets and sets the group header */\n    get header() {\n        return this._groupHeader.text;\n    }\n    set header(label) {\n        if (this._groupHeader.text === \"label\") {\n            return;\n        }\n        this._groupHeader.text = label;\n    }\n    /**\n     * @internal\n     */\n    _addGroupHeader(text) {\n        const groupHeading = new TextBlock(\"groupHead\", text);\n        groupHeading.width = 0.9;\n        groupHeading.height = \"30px\";\n        groupHeading.textWrapping = true;\n        groupHeading.color = \"black\";\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        groupHeading.left = \"2px\";\n        this._groupPanel.addControl(groupHeading);\n        return groupHeading;\n    }\n    /**\n     * @internal\n     */\n    _getSelector(selectorNb) {\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\n            return;\n        }\n        return this._selectors[selectorNb];\n    }\n    /** Removes the selector at the given position\n     * @param selectorNb the position of the selector within the group\n     */\n    removeSelector(selectorNb) {\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\n            return;\n        }\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\n        this._selectors.splice(selectorNb, 1);\n    }\n}\n/** Class used to create a CheckboxGroup\n * which contains groups of checkbox buttons\n */\nexport class CheckboxGroup extends SelectorGroup {\n    /** Adds a checkbox as a control\n     * @param text is the label for the selector\n     * @param func is the function called when the Selector is checked\n     * @param checked is true when Selector is checked\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addCheckbox(text, func = (s) => { }, checked = false) {\n        checked = checked || false;\n        const button = new Checkbox();\n        button.width = \"20px\";\n        button.height = \"20px\";\n        button.color = \"#364249\";\n        button.background = \"#CCCCCC\";\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        button.onIsCheckedChangedObservable.add(function (state) {\n            func(state);\n        });\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\n        _selector.height = \"30px\";\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        _selector.left = \"4px\";\n        this.groupPanel.addControl(_selector);\n        this.selectors.push(_selector);\n        button.isChecked = checked;\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n            button.color = this.groupPanel.parent.parent.buttonColor;\n            button.background = this.groupPanel.parent.parent.buttonBackground;\n        }\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabel(selectorNb, label) {\n        this.selectors[selectorNb].children[1].text = label;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabelColor(selectorNb, color) {\n        this.selectors[selectorNb].children[1].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonColor(selectorNb, color) {\n        this.selectors[selectorNb].children[0].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonBackground(selectorNb, color) {\n        this.selectors[selectorNb].children[0].background = color;\n    }\n}\n/** Class used to create a RadioGroup\n * which contains groups of radio buttons\n */\nexport class RadioGroup extends SelectorGroup {\n    constructor() {\n        super(...arguments);\n        this._selectNb = 0;\n    }\n    /** Adds a radio button as a control\n     * @param label is the label for the selector\n     * @param func is the function called when the Selector is checked\n     * @param checked is true when Selector is checked\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addRadio(label, func = (n) => { }, checked = false) {\n        const nb = this._selectNb++;\n        const button = new RadioButton();\n        button.name = label;\n        button.width = \"20px\";\n        button.height = \"20px\";\n        button.color = \"#364249\";\n        button.background = \"#CCCCCC\";\n        button.group = this.name;\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        button.onIsCheckedChangedObservable.add(function (state) {\n            if (state) {\n                func(nb);\n            }\n        });\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\n        _selector.height = \"30px\";\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        _selector.left = \"4px\";\n        this.groupPanel.addControl(_selector);\n        this.selectors.push(_selector);\n        button.isChecked = checked;\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n            button.color = this.groupPanel.parent.parent.buttonColor;\n            button.background = this.groupPanel.parent.parent.buttonBackground;\n        }\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabel(selectorNb, label) {\n        this.selectors[selectorNb].children[1].text = label;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabelColor(selectorNb, color) {\n        this.selectors[selectorNb].children[1].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonColor(selectorNb, color) {\n        this.selectors[selectorNb].children[0].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonBackground(selectorNb, color) {\n        this.selectors[selectorNb].children[0].background = color;\n    }\n}\n/** Class used to create a SliderGroup\n * which contains groups of slider buttons\n */\nexport class SliderGroup extends SelectorGroup {\n    /**\n     * Adds a slider to the SelectorGroup\n     * @param label is the label for the SliderBar\n     * @param func is the function called when the Slider moves\n     * @param unit is a string describing the units used, eg degrees or metres\n     * @param min is the minimum value for the Slider\n     * @param max is the maximum value for the Slider\n     * @param value is the start value for the Slider between min and max\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\n     */\n    addSlider(label, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    func = (v) => { }, unit = \"Units\", min = 0, max = 0, value = 0, onValueChange = (v) => {\n        return v | 0;\n    }) {\n        const button = new Slider();\n        button.name = unit;\n        button.value = value;\n        button.minimum = min;\n        button.maximum = max;\n        button.width = 0.9;\n        button.height = \"20px\";\n        button.color = \"#364249\";\n        button.background = \"#CCCCCC\";\n        button.borderColor = \"black\";\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        button.left = \"4px\";\n        button.paddingBottom = \"4px\";\n        button.onValueChangedObservable.add(function (value) {\n            button.parent.children[0].text = button.parent.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\n            func(value);\n        });\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\n        _selector.height = \"60px\";\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        _selector.left = \"4px\";\n        _selector.children[0].name = label;\n        this.groupPanel.addControl(_selector);\n        this.selectors.push(_selector);\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\n            button.color = this.groupPanel.parent.parent.buttonColor;\n            button.background = this.groupPanel.parent.parent.buttonBackground;\n        }\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabel(selectorNb, label) {\n        this.selectors[selectorNb].children[0].name = label;\n        this.selectors[selectorNb].children[0].text =\n            label + \": \" + this.selectors[selectorNb].children[1].value + \" \" + this.selectors[selectorNb].children[1].name;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorLabelColor(selectorNb, color) {\n        this.selectors[selectorNb].children[0].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonColor(selectorNb, color) {\n        this.selectors[selectorNb].children[1].color = color;\n    }\n    /**\n     * @internal\n     */\n    _setSelectorButtonBackground(selectorNb, color) {\n        this.selectors[selectorNb].children[1].background = color;\n    }\n}\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\n */\nexport class SelectionPanel extends Rectangle {\n    /**\n     * Creates a new SelectionPanel\n     * @param name of SelectionPanel\n     * @param groups is an array of SelectionGroups\n     */\n    constructor(\n    /** name of SelectionPanel */\n    name, \n    /** an array of SelectionGroups */\n    groups = []) {\n        super(name);\n        this.name = name;\n        this.groups = groups;\n        this._buttonColor = \"#364249\";\n        this._buttonBackground = \"#CCCCCC\";\n        this._headerColor = \"black\";\n        this._barColor = \"white\";\n        this._barHeight = \"2px\";\n        this._spacerHeight = \"20px\";\n        this._bars = new Array();\n        this._groups = groups;\n        this.thickness = 2;\n        this._panel = new StackPanel();\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._panel.top = 5;\n        this._panel.left = 5;\n        this._panel.width = 0.95;\n        if (groups.length > 0) {\n            for (let i = 0; i < groups.length - 1; i++) {\n                this._panel.addControl(groups[i].groupPanel);\n                this._addSpacer();\n            }\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\n        }\n        this.addControl(this._panel);\n    }\n    _getTypeName() {\n        return \"SelectionPanel\";\n    }\n    /** Gets the (stack) panel of the SelectionPanel  */\n    get panel() {\n        return this._panel;\n    }\n    /** Gets or sets the headerColor */\n    get headerColor() {\n        return this._headerColor;\n    }\n    set headerColor(color) {\n        if (this._headerColor === color) {\n            return;\n        }\n        this._headerColor = color;\n        this._setHeaderColor();\n    }\n    _setHeaderColor() {\n        for (let i = 0; i < this._groups.length; i++) {\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\n        }\n    }\n    /** Gets or sets the button color */\n    get buttonColor() {\n        return this._buttonColor;\n    }\n    set buttonColor(color) {\n        if (this._buttonColor === color) {\n            return;\n        }\n        this._buttonColor = color;\n        this._setbuttonColor();\n    }\n    _setbuttonColor() {\n        for (let i = 0; i < this._groups.length; i++) {\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\n                this._groups[i]._setSelectorButtonColor(j, this._buttonColor);\n            }\n        }\n    }\n    /** Gets or sets the label color */\n    get labelColor() {\n        return this._labelColor;\n    }\n    set labelColor(color) {\n        if (this._labelColor === color) {\n            return;\n        }\n        this._labelColor = color;\n        this._setLabelColor();\n    }\n    _setLabelColor() {\n        for (let i = 0; i < this._groups.length; i++) {\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\n                this._groups[i]._setSelectorLabelColor(j, this._labelColor);\n            }\n        }\n    }\n    /** Gets or sets the button background */\n    get buttonBackground() {\n        return this._buttonBackground;\n    }\n    set buttonBackground(color) {\n        if (this._buttonBackground === color) {\n            return;\n        }\n        this._buttonBackground = color;\n        this._setButtonBackground();\n    }\n    _setButtonBackground() {\n        for (let i = 0; i < this._groups.length; i++) {\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\n                this._groups[i]._setSelectorButtonBackground(j, this._buttonBackground);\n            }\n        }\n    }\n    /** Gets or sets the color of separator bar */\n    get barColor() {\n        return this._barColor;\n    }\n    set barColor(color) {\n        if (this._barColor === color) {\n            return;\n        }\n        this._barColor = color;\n        this._setBarColor();\n    }\n    _setBarColor() {\n        for (let i = 0; i < this._bars.length; i++) {\n            this._bars[i].children[0].background = this._barColor;\n        }\n    }\n    /** Gets or sets the height of separator bar */\n    get barHeight() {\n        return this._barHeight;\n    }\n    set barHeight(value) {\n        if (this._barHeight === value) {\n            return;\n        }\n        this._barHeight = value;\n        this._setBarHeight();\n    }\n    _setBarHeight() {\n        for (let i = 0; i < this._bars.length; i++) {\n            this._bars[i].children[0].height = this._barHeight;\n        }\n    }\n    /** Gets or sets the height of spacers*/\n    get spacerHeight() {\n        return this._spacerHeight;\n    }\n    set spacerHeight(value) {\n        if (this._spacerHeight === value) {\n            return;\n        }\n        this._spacerHeight = value;\n        this._setSpacerHeight();\n    }\n    _setSpacerHeight() {\n        for (let i = 0; i < this._bars.length; i++) {\n            this._bars[i].height = this._spacerHeight;\n        }\n    }\n    /** Adds a bar between groups */\n    _addSpacer() {\n        const separator = new Container();\n        separator.width = 1;\n        separator.height = this._spacerHeight;\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        const bar = new Rectangle();\n        bar.width = 1;\n        bar.height = this._barHeight;\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        bar.background = this._barColor;\n        bar.color = \"transparent\";\n        separator.addControl(bar);\n        this._panel.addControl(separator);\n        this._bars.push(separator);\n    }\n    /** Add a group to the selection panel\n     * @param group is the selector group to add\n     */\n    addGroup(group) {\n        if (this._groups.length > 0) {\n            this._addSpacer();\n        }\n        this._panel.addControl(group.groupPanel);\n        this._groups.push(group);\n        group.groupPanel.children[0].color = this._headerColor;\n        for (let j = 0; j < group.selectors.length; j++) {\n            group._setSelectorButtonColor(j, this._buttonColor);\n            group._setSelectorButtonBackground(j, this._buttonBackground);\n        }\n    }\n    /** Remove the group from the given position\n     * @param groupNb is the position of the group in the list\n     */\n    removeGroup(groupNb) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        this._panel.removeControl(group.groupPanel);\n        this._groups.splice(groupNb, 1);\n        if (groupNb < this._bars.length) {\n            this._panel.removeControl(this._bars[groupNb]);\n            this._bars.splice(groupNb, 1);\n        }\n    }\n    /** Change a group header label\n     * @param label is the new group header label\n     * @param groupNb is the number of the group to relabel\n     * */\n    setHeaderName(label, groupNb) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        group.groupPanel.children[0].text = label;\n    }\n    /** Change selector label to the one given\n     * @param label is the new selector label\n     * @param groupNb is the number of the groupcontaining the selector\n     * @param selectorNb is the number of the selector within a group to relabel\n     * */\n    relabel(label, groupNb, selectorNb) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\n            return;\n        }\n        group._setSelectorLabel(selectorNb, label);\n    }\n    /** For a given group position remove the selector at the given position\n     * @param groupNb is the number of the group to remove the selector from\n     * @param selectorNb is the number of the selector within the group\n     */\n    removeFromGroupSelector(groupNb, selectorNb) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\n            return;\n        }\n        group.removeSelector(selectorNb);\n    }\n    /** For a given group position of correct type add a checkbox button\n     * @param groupNb is the number of the group to remove the selector from\n     * @param label is the label for the selector\n     * @param func is the function called when the Selector is checked\n     * @param checked is true when Selector is checked\n     */\n    addToGroupCheckbox(groupNb, label, func = () => { }, checked = false) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        group.addCheckbox(label, func, checked);\n    }\n    /** For a given group position of correct type add a radio button\n     * @param groupNb is the number of the group to remove the selector from\n     * @param label is the label for the selector\n     * @param func is the function called when the Selector is checked\n     * @param checked is true when Selector is checked\n     */\n    addToGroupRadio(groupNb, label, func = () => { }, checked = false) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        group.addRadio(label, func, checked);\n    }\n    /**\n     * For a given slider group add a slider\n     * @param groupNb is the number of the group to add the slider to\n     * @param label is the label for the Slider\n     * @param func is the function called when the Slider moves\n     * @param unit is a string describing the units used, eg degrees or metres\n     * @param min is the minimum value for the Slider\n     * @param max is the maximum value for the Slider\n     * @param value is the start value for the Slider between min and max\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\n     */\n    addToGroupSlider(groupNb, label, func = () => { }, unit = \"Units\", min = 0, max = 0, value = 0, onVal = (v) => {\n        return v | 0;\n    }) {\n        if (groupNb < 0 || groupNb >= this._groups.length) {\n            return;\n        }\n        const group = this._groups[groupNb];\n        group.addSlider(label, func, unit, min, max, value, onVal);\n    }\n}\n//# sourceMappingURL=selector.js.map","import { Measure } from \"../../measure.js\";\nimport { Container } from \"../container.js\";\nimport { ValueAndUnit } from \"../../valueAndUnit.js\";\nimport { Control } from \"../control.js\";\n/**\n * Class used to hold a the container for ScrollViewer\n * @internal\n */\nexport class _ScrollViewerWindow extends Container {\n    get freezeControls() {\n        return this._freezeControls;\n    }\n    set freezeControls(value) {\n        if (this._freezeControls === value) {\n            return;\n        }\n        if (!value) {\n            this._restoreMeasures();\n        }\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\n        this._freezeControls = false;\n        const textureSize = this.host.getSize();\n        const renderWidth = textureSize.width;\n        const renderHeight = textureSize.height;\n        const context = this.host.getContext();\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\n        this.host._numLayoutCalls = 0;\n        this.host._rootContainer._layout(measure, context);\n        // in freeze mode, prepare children measures accordingly\n        if (value) {\n            this._updateMeasures();\n            if (this._useBuckets()) {\n                this._makeBuckets();\n            }\n        }\n        this._freezeControls = value;\n        this.host.markAsDirty(); // redraw with the (new) current settings\n    }\n    get bucketWidth() {\n        return this._bucketWidth;\n    }\n    get bucketHeight() {\n        return this._bucketHeight;\n    }\n    setBucketSizes(width, height) {\n        this._bucketWidth = width;\n        this._bucketHeight = height;\n        if (this._useBuckets()) {\n            if (this._freezeControls) {\n                this._makeBuckets();\n            }\n        }\n        else {\n            this._buckets = {};\n        }\n    }\n    _useBuckets() {\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\n    }\n    _makeBuckets() {\n        this._buckets = {};\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\n        this._dispatchInBuckets(this._children);\n        this._oldLeft = null;\n        this._oldTop = null;\n    }\n    _dispatchInBuckets(children) {\n        for (let i = 0; i < children.length; ++i) {\n            const child = children[i];\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)), bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\n            while (bStartY <= bEndY) {\n                for (let x = bStartX; x <= bEndX; ++x) {\n                    const bucket = bStartY * this._bucketLen + x;\n                    let lstc = this._buckets[bucket];\n                    if (!lstc) {\n                        lstc = [];\n                        this._buckets[bucket] = lstc;\n                    }\n                    lstc.push(child);\n                }\n                bStartY++;\n            }\n            if (child instanceof Container && child._children.length > 0) {\n                this._dispatchInBuckets(child._children);\n            }\n        }\n    }\n    // reset left and top measures for the window and all its children\n    _updateMeasures() {\n        const left = this.leftInPixels | 0, top = this.topInPixels | 0;\n        this._measureForChildren.left -= left;\n        this._measureForChildren.top -= top;\n        this._currentMeasure.left -= left;\n        this._currentMeasure.top -= top;\n        this._customData.origLeftForChildren = this._measureForChildren.left;\n        this._customData.origTopForChildren = this._measureForChildren.top;\n        this._customData.origLeft = this._currentMeasure.left;\n        this._customData.origTop = this._currentMeasure.top;\n        this._updateChildrenMeasures(this._children, left, top);\n    }\n    _updateChildrenMeasures(children, left, top) {\n        for (let i = 0; i < children.length; ++i) {\n            const child = children[i];\n            child._currentMeasure.left -= left;\n            child._currentMeasure.top -= top;\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\n            child._customData._origTop = child._currentMeasure.top;\n            if (child instanceof Container && child._children.length > 0) {\n                this._updateChildrenMeasures(child._children, left, top);\n            }\n        }\n    }\n    _restoreMeasures() {\n        const left = this.leftInPixels | 0, top = this.topInPixels | 0;\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\n        this._currentMeasure.left = this._customData.origLeft + left;\n        this._currentMeasure.top = this._customData.origTop + top;\n    }\n    /**\n     * Creates a new ScrollViewerWindow\n     * @param name of ScrollViewerWindow\n     */\n    constructor(name) {\n        super(name);\n        this._freezeControls = false;\n        this._bucketWidth = 0;\n        this._bucketHeight = 0;\n        this._buckets = {};\n    }\n    _getTypeName() {\n        return \"ScrollViewerWindow\";\n    }\n    /**\n     * @internal\n     */\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._parentMeasure = parentMeasure;\n        this._measureForChildren.left = this._currentMeasure.left;\n        this._measureForChildren.top = this._currentMeasure.top;\n        this._measureForChildren.width = parentMeasure.width;\n        this._measureForChildren.height = parentMeasure.height;\n    }\n    /**\n     * @internal\n     */\n    _layout(parentMeasure, context) {\n        if (this._freezeControls) {\n            this.invalidateRect(); // will trigger a redraw of the window\n            return false;\n        }\n        return super._layout(parentMeasure, context);\n    }\n    _scrollChildren(children, left, top) {\n        for (let i = 0; i < children.length; ++i) {\n            const child = children[i];\n            child._currentMeasure.left = child._customData._origLeft + left;\n            child._currentMeasure.top = child._customData._origTop + top;\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\n            if (child instanceof Container && child._children.length > 0) {\n                this._scrollChildren(child._children, left, top);\n            }\n        }\n    }\n    _scrollChildrenWithBuckets(left, top, scrollLeft, scrollTop) {\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)), bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\n        while (bStartY <= bEndY) {\n            for (let x = bStartX; x <= bEndX; ++x) {\n                const bucket = bStartY * this._bucketLen + x, lstc = this._buckets[bucket];\n                if (lstc) {\n                    for (let i = 0; i < lstc.length; ++i) {\n                        const child = lstc[i];\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\n                    }\n                }\n            }\n            bStartY++;\n        }\n    }\n    /**\n     * @internal\n     */\n    _draw(context, invalidatedRectangle) {\n        if (!this._freezeControls) {\n            super._draw(context, invalidatedRectangle);\n            return;\n        }\n        this._localDraw(context);\n        if (this.clipChildren) {\n            this._clipForChildren(context);\n        }\n        const left = this.leftInPixels | 0, top = this.topInPixels | 0;\n        if (this._useBuckets()) {\n            if (this._oldLeft !== null && this._oldTop !== null) {\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\n                this._scrollChildrenWithBuckets(left, top, left, top);\n            }\n            else {\n                this._scrollChildren(this._children, left, top);\n            }\n        }\n        else {\n            this._scrollChildren(this._children, left, top);\n        }\n        this._oldLeft = left;\n        this._oldTop = top;\n        for (const child of this._children) {\n            if (!child._intersectsRect(this._parentMeasure)) {\n                continue;\n            }\n            child._render(context, this._parentMeasure);\n        }\n    }\n    _postMeasure() {\n        if (this._freezeControls) {\n            super._postMeasure();\n            return;\n        }\n        let maxWidth = this.parentClientWidth;\n        let maxHeight = this.parentClientHeight;\n        for (const child of this.children) {\n            if (!child.isVisible || child.notRenderable) {\n                continue;\n            }\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\n            }\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\n            }\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\n        }\n        if (this._currentMeasure.width !== maxWidth) {\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\n            this._currentMeasure.width = maxWidth;\n            this._rebuildLayout = true;\n            this._isDirty = true;\n        }\n        if (this._currentMeasure.height !== maxHeight) {\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\n            this._currentMeasure.height = maxHeight;\n            this._rebuildLayout = true;\n            this._isDirty = true;\n        }\n        super._postMeasure();\n    }\n}\n//# sourceMappingURL=scrollViewerWindow.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create slider controls\n */\nexport class ScrollBar extends BaseSlider {\n    /** Gets or sets border color */\n    get borderColor() {\n        return this._borderColor;\n    }\n    set borderColor(value) {\n        if (this._borderColor === value) {\n            return;\n        }\n        this._borderColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background gradient. Takes precedence over gradient. */\n    get backgroundGradient() {\n        return this._backgroundGradient;\n    }\n    set backgroundGradient(value) {\n        if (this._backgroundGradient === value) {\n            return;\n        }\n        this._backgroundGradient = value;\n        this._markAsDirty();\n    }\n    /** Inverts the scrolling direction (default: false) */\n    get invertScrollDirection() {\n        return this._invertScrollDirection;\n    }\n    set invertScrollDirection(invert) {\n        this._invertScrollDirection = invert;\n    }\n    /**\n     * Creates a new Slider\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._background = \"black\";\n        this._borderColor = \"white\";\n        this._tempMeasure = new Measure(0, 0, 0, 0);\n        this._invertScrollDirection = false;\n        this._backgroundGradient = null;\n    }\n    _getTypeName() {\n        return \"Scrollbar\";\n    }\n    _getThumbThickness() {\n        let thumbThickness = 0;\n        if (this._thumbWidth.isPixel) {\n            thumbThickness = this._thumbWidth.getValue(this._host);\n        }\n        else {\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n        }\n        return thumbThickness;\n    }\n    _getBackgroundColor(context) {\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        this._prepareRenderingData(\"rectangle\");\n        const left = this._renderLeft;\n        const thumbPosition = this._getThumbPosition();\n        context.fillStyle = this._getBackgroundColor(context);\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        // Value bar\n        context.fillStyle = this._getColor(context);\n        // Thumb\n        if (this.isVertical) {\n            this._tempMeasure.left = left - this._effectiveBarOffset;\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\n            this._tempMeasure.width = this._currentMeasure.width;\n            this._tempMeasure.height = this._effectiveThumbThickness;\n        }\n        else {\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\n            this._tempMeasure.top = this._currentMeasure.top;\n            this._tempMeasure.width = this._effectiveThumbThickness;\n            this._tempMeasure.height = this._currentMeasure.height;\n        }\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\n        context.restore();\n    }\n    /**\n     * @internal\n     */\n    _updateValueFromPointer(x, y) {\n        if (this.rotation != 0) {\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n            x = this._transformedPosition.x;\n            y = this._transformedPosition.y;\n        }\n        const sign = this._invertScrollDirection ? -1 : 1;\n        if (this._first) {\n            this._first = false;\n            this._originX = x;\n            this._originY = y;\n            // Check if move is required\n            if (x < this._tempMeasure.left ||\n                x > this._tempMeasure.left + this._tempMeasure.width ||\n                y < this._tempMeasure.top ||\n                y > this._tempMeasure.top + this._tempMeasure.height) {\n                if (this.isVertical) {\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\n                }\n                else {\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\n                }\n            }\n        }\n        // Delta mode\n        let delta = 0;\n        if (this.isVertical) {\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\n        }\n        else {\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\n        }\n        this.value += sign * delta * (this.maximum - this.minimum);\n        this._originX = x;\n        this._originY = y;\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        this._first = true;\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n    }\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        if (this.backgroundGradient) {\n            serializationObject.backgroundGradient = {};\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\n        }\n    }\n    _parseFromContent(serializationObject, host) {\n        super._parseFromContent(serializationObject, host);\n        if (serializationObject.backgroundGradient) {\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\n            this.backgroundGradient = new className();\n            this.backgroundGradient.parse(serializationObject.backgroundGradient);\n        }\n    }\n}\n__decorate([\n    serialize()\n], ScrollBar.prototype, \"borderColor\", null);\n__decorate([\n    serialize()\n], ScrollBar.prototype, \"background\", null);\n__decorate([\n    serialize()\n], ScrollBar.prototype, \"invertScrollDirection\", null);\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\n//# sourceMappingURL=scrollBar.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create slider controls\n */\nexport class ImageScrollBar extends BaseSlider {\n    /** Inverts the scrolling direction (default: false) */\n    get invertScrollDirection() {\n        return this._invertScrollDirection;\n    }\n    set invertScrollDirection(invert) {\n        this._invertScrollDirection = invert;\n    }\n    /**\n     * Gets or sets the image used to render the background for horizontal bar\n     */\n    get backgroundImage() {\n        return this._backgroundBaseImage;\n    }\n    set backgroundImage(value) {\n        if (this._backgroundBaseImage === value) {\n            return;\n        }\n        this._backgroundBaseImage = value;\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\n            if (!value.isLoaded) {\n                value.onImageLoadedObservable.addOnce(() => {\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\n                    this._backgroundImage = rotatedValue;\n                    if (!rotatedValue.isLoaded) {\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\n                            this._markAsDirty();\n                        });\n                    }\n                    this._markAsDirty();\n                });\n            }\n            else {\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\n                this._markAsDirty();\n            }\n        }\n        else {\n            this._backgroundImage = value;\n            if (value && !value.isLoaded) {\n                value.onImageLoadedObservable.addOnce(() => {\n                    this._markAsDirty();\n                });\n            }\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets the image used to render the thumb\n     */\n    get thumbImage() {\n        return this._thumbBaseImage;\n    }\n    set thumbImage(value) {\n        if (this._thumbBaseImage === value) {\n            return;\n        }\n        this._thumbBaseImage = value;\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\n            if (!value.isLoaded) {\n                value.onImageLoadedObservable.addOnce(() => {\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\n                    this._thumbImage = rotatedValue;\n                    if (!rotatedValue.isLoaded) {\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\n                            this._markAsDirty();\n                        });\n                    }\n                    this._markAsDirty();\n                });\n            }\n            else {\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\n                this._markAsDirty();\n            }\n        }\n        else {\n            this._thumbImage = value;\n            if (value && !value.isLoaded) {\n                value.onImageLoadedObservable.addOnce(() => {\n                    this._markAsDirty();\n                });\n            }\n            this._markAsDirty();\n        }\n    }\n    /**\n     * Gets or sets the length of the thumb\n     */\n    get thumbLength() {\n        return this._thumbLength;\n    }\n    set thumbLength(value) {\n        if (this._thumbLength === value) {\n            return;\n        }\n        this._thumbLength = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the height of the thumb\n     */\n    get thumbHeight() {\n        return this._thumbHeight;\n    }\n    set thumbHeight(value) {\n        if (this._thumbLength === value) {\n            return;\n        }\n        this._thumbHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the height of the bar image\n     */\n    get barImageHeight() {\n        return this._barImageHeight;\n    }\n    set barImageHeight(value) {\n        if (this._barImageHeight === value) {\n            return;\n        }\n        this._barImageHeight = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new ImageScrollBar\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._thumbLength = 0.5;\n        this._thumbHeight = 1;\n        this._barImageHeight = 1;\n        this._tempMeasure = new Measure(0, 0, 0, 0);\n        this._invertScrollDirection = false;\n        /** Number of 90° rotation to apply on the images when in vertical mode */\n        this.num90RotationInVerticalMode = 1;\n    }\n    _getTypeName() {\n        return \"ImageScrollBar\";\n    }\n    _getThumbThickness() {\n        let thumbThickness = 0;\n        if (this._thumbWidth.isPixel) {\n            thumbThickness = this._thumbWidth.getValue(this._host);\n        }\n        else {\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\n        }\n        return thumbThickness;\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        this._prepareRenderingData(\"rectangle\");\n        const thumbPosition = this._getThumbPosition();\n        const left = this._renderLeft;\n        const top = this._renderTop;\n        const width = this._renderWidth;\n        const height = this._renderHeight;\n        // Background\n        if (this._backgroundImage) {\n            this._tempMeasure.copyFromFloats(left, top, width, height);\n            if (this.isVertical) {\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\n                this._tempMeasure.height += this._effectiveThumbThickness;\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n            }\n            else {\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\n                this._tempMeasure.width += this._effectiveThumbThickness;\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n            }\n            this._backgroundImage._draw(context);\n        }\n        // Thumb\n        if (this.isVertical) {\n            this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);\n        }\n        else {\n            this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);\n        }\n        if (this._thumbImage) {\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\n            this._thumbImage._draw(context);\n        }\n        context.restore();\n    }\n    /**\n     * @internal\n     */\n    _updateValueFromPointer(x, y) {\n        if (this.rotation != 0) {\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\n            x = this._transformedPosition.x;\n            y = this._transformedPosition.y;\n        }\n        const sign = this._invertScrollDirection ? -1 : 1;\n        if (this._first) {\n            this._first = false;\n            this._originX = x;\n            this._originY = y;\n            // Check if move is required\n            if (x < this._tempMeasure.left ||\n                x > this._tempMeasure.left + this._tempMeasure.width ||\n                y < this._tempMeasure.top ||\n                y > this._tempMeasure.top + this._tempMeasure.height) {\n                if (this.isVertical) {\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\n                }\n                else {\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\n                }\n            }\n        }\n        // Delta mode\n        let delta = 0;\n        if (this.isVertical) {\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\n        }\n        else {\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\n        }\n        this.value += sign * delta * (this.maximum - this.minimum);\n        this._originX = x;\n        this._originY = y;\n    }\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        this._first = true;\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n    }\n}\n__decorate([\n    serialize()\n], ImageScrollBar.prototype, \"num90RotationInVerticalMode\", void 0);\n__decorate([\n    serialize()\n], ImageScrollBar.prototype, \"invertScrollDirection\", null);\n//# sourceMappingURL=imageScrollBar.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Rectangle } from \"../rectangle.js\";\nimport { Grid } from \"../grid.js\";\nimport { Control } from \"../control.js\";\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow.js\";\nimport { ScrollBar } from \"../sliders/scrollBar.js\";\nimport { ImageScrollBar } from \"../sliders/imageScrollBar.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to hold a viewer window and sliders in a grid\n */\nexport class ScrollViewer extends Rectangle {\n    /**\n     * Gets the horizontal scrollbar\n     */\n    get horizontalBar() {\n        return this._horizontalBar;\n    }\n    /**\n     * Gets the vertical scrollbar\n     */\n    get verticalBar() {\n        return this._verticalBar;\n    }\n    /**\n     * Adds a new control to the current container\n     * @param control defines the control to add\n     * @returns the current container\n     */\n    addControl(control) {\n        if (!control) {\n            return this;\n        }\n        this._window.addControl(control);\n        return this;\n    }\n    /**\n     * Removes a control from the current container\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        this._window.removeControl(control);\n        return this;\n    }\n    /** Gets the list of children */\n    get children() {\n        return this._window.children;\n    }\n    _flagDescendantsAsMatrixDirty() {\n        for (const child of this._children) {\n            child._markMatrixAsDirty();\n        }\n    }\n    /**\n     * Freezes or unfreezes the controls in the window.\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\n     */\n    get freezeControls() {\n        return this._window.freezeControls;\n    }\n    set freezeControls(value) {\n        this._window.freezeControls = value;\n    }\n    /** Gets the bucket width */\n    get bucketWidth() {\n        return this._window.bucketWidth;\n    }\n    /** Gets the bucket height */\n    get bucketHeight() {\n        return this._window.bucketHeight;\n    }\n    /**\n     * Sets the bucket sizes.\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\n     * used), that's why it is not enabled by default.\n     * @param width width of the bucket\n     * @param height height of the bucket\n     */\n    setBucketSizes(width, height) {\n        this._window.setBucketSizes(width, height);\n    }\n    /**\n     * Forces the horizontal scroll bar to be displayed\n     */\n    get forceHorizontalBar() {\n        return this._forceHorizontalBar;\n    }\n    set forceHorizontalBar(value) {\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\n        this._horizontalBar.isVisible = value;\n        this._forceHorizontalBar = value;\n    }\n    /**\n     * Forces the vertical scroll bar to be displayed\n     */\n    get forceVerticalBar() {\n        return this._forceVerticalBar;\n    }\n    set forceVerticalBar(value) {\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\n        this._verticalBar.isVisible = value;\n        this._forceVerticalBar = value;\n    }\n    /**\n     * Creates a new ScrollViewer\n     * @param name of ScrollViewer\n     * @param isImageBased\n     */\n    constructor(name, isImageBased) {\n        super(name);\n        this._barSize = 20;\n        this._pointerIsOver = false;\n        this._wheelPrecision = 0.05;\n        this._thumbLength = 0.5;\n        this._thumbHeight = 1;\n        this._barImageHeight = 1;\n        this._horizontalBarImageHeight = 1;\n        this._verticalBarImageHeight = 1;\n        this._oldWindowContentsWidth = 0;\n        this._oldWindowContentsHeight = 0;\n        this._forceHorizontalBar = false;\n        this._forceVerticalBar = false;\n        this._useImageBar = isImageBased ? isImageBased : false;\n        this.onDirtyObservable.add(() => {\n            this._horizontalBarSpace.color = this.color;\n            this._verticalBarSpace.color = this.color;\n            this._dragSpace.color = this.color;\n        });\n        this.onPointerEnterObservable.add(() => {\n            this._pointerIsOver = true;\n        });\n        this.onPointerOutObservable.add(() => {\n            this._pointerIsOver = false;\n        });\n        this._grid = new Grid();\n        if (this._useImageBar) {\n            this._horizontalBar = new ImageScrollBar();\n            this._verticalBar = new ImageScrollBar();\n        }\n        else {\n            this._horizontalBar = new ScrollBar();\n            this._verticalBar = new ScrollBar();\n        }\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._grid.addColumnDefinition(1);\n        this._grid.addColumnDefinition(0, true);\n        this._grid.addRowDefinition(1);\n        this._grid.addRowDefinition(0, true);\n        super.addControl(this._grid);\n        this._grid.addControl(this._window, 0, 0);\n        this._verticalBarSpace = new Rectangle();\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._verticalBarSpace.thickness = 1;\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\n        this._horizontalBarSpace = new Rectangle();\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n        this._horizontalBarSpace.thickness = 1;\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\n        this._dragSpace = new Rectangle();\n        this._dragSpace.thickness = 1;\n        this._grid.addControl(this._dragSpace, 1, 1);\n        // Colors\n        if (!this._useImageBar) {\n            this.barColor = \"grey\";\n            this.barBackground = \"transparent\";\n        }\n    }\n    /** Reset the scroll viewer window to initial size */\n    resetWindow() {\n        this._window.width = \"100%\";\n        this._window.height = \"100%\";\n    }\n    _getTypeName() {\n        return \"ScrollViewer\";\n    }\n    _buildClientSizes() {\n        const ratio = this.host.idealRatio;\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\n        this._clientWidth = this._window.parentClientWidth;\n        this._clientHeight = this._window.parentClientHeight;\n    }\n    _additionalProcessing(parentMeasure, context) {\n        super._additionalProcessing(parentMeasure, context);\n        this._buildClientSizes();\n    }\n    _postMeasure() {\n        super._postMeasure();\n        this._updateScroller();\n        this._setWindowPosition(false);\n    }\n    /**\n     * Gets or sets the mouse wheel precision\n     * from 0 to 1 with a default value of 0.05\n     * */\n    get wheelPrecision() {\n        return this._wheelPrecision;\n    }\n    set wheelPrecision(value) {\n        if (this._wheelPrecision === value) {\n            return;\n        }\n        if (value < 0) {\n            value = 0;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._wheelPrecision = value;\n    }\n    /** Gets or sets the scroll bar container background color */\n    get scrollBackground() {\n        return this._horizontalBarSpace.background;\n    }\n    set scrollBackground(color) {\n        if (this._horizontalBarSpace.background === color) {\n            return;\n        }\n        this._horizontalBarSpace.background = color;\n        this._verticalBarSpace.background = color;\n    }\n    /** Gets or sets the bar color */\n    get barColor() {\n        return this._barColor;\n    }\n    set barColor(color) {\n        if (this._barColor === color) {\n            return;\n        }\n        this._barColor = color;\n        this._horizontalBar.color = color;\n        this._verticalBar.color = color;\n    }\n    /** Gets or sets the bar image */\n    get thumbImage() {\n        return this._barImage;\n    }\n    set thumbImage(value) {\n        if (this._barImage === value) {\n            return;\n        }\n        this._barImage = value;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.thumbImage = value;\n        vb.thumbImage = value;\n    }\n    /** Gets or sets the horizontal bar image */\n    get horizontalThumbImage() {\n        return this._horizontalBarImage;\n    }\n    set horizontalThumbImage(value) {\n        if (this._horizontalBarImage === value) {\n            return;\n        }\n        this._horizontalBarImage = value;\n        const hb = this._horizontalBar;\n        hb.thumbImage = value;\n    }\n    /** Gets or sets the vertical bar image */\n    get verticalThumbImage() {\n        return this._verticalBarImage;\n    }\n    set verticalThumbImage(value) {\n        if (this._verticalBarImage === value) {\n            return;\n        }\n        this._verticalBarImage = value;\n        const vb = this._verticalBar;\n        vb.thumbImage = value;\n    }\n    /** Gets or sets the size of the bar */\n    get barSize() {\n        return this._barSize;\n    }\n    set barSize(value) {\n        if (this._barSize === value) {\n            return;\n        }\n        this._barSize = value;\n        this._markAsDirty();\n        if (this._horizontalBar.isVisible) {\n            this._grid.setRowDefinition(1, this._barSize, true);\n        }\n        if (this._verticalBar.isVisible) {\n            this._grid.setColumnDefinition(1, this._barSize, true);\n        }\n    }\n    /** Gets or sets the length of the thumb */\n    get thumbLength() {\n        return this._thumbLength;\n    }\n    set thumbLength(value) {\n        if (this._thumbLength === value) {\n            return;\n        }\n        if (value <= 0) {\n            value = 0.1;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._thumbLength = value;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.thumbLength = value;\n        vb.thumbLength = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the height of the thumb */\n    get thumbHeight() {\n        return this._thumbHeight;\n    }\n    set thumbHeight(value) {\n        if (this._thumbHeight === value) {\n            return;\n        }\n        if (value <= 0) {\n            value = 0.1;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._thumbHeight = value;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.thumbHeight = value;\n        vb.thumbHeight = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the height of the bar image */\n    get barImageHeight() {\n        return this._barImageHeight;\n    }\n    set barImageHeight(value) {\n        if (this._barImageHeight === value) {\n            return;\n        }\n        if (value <= 0) {\n            value = 0.1;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._barImageHeight = value;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.barImageHeight = value;\n        vb.barImageHeight = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the height of the horizontal bar image */\n    get horizontalBarImageHeight() {\n        return this._horizontalBarImageHeight;\n    }\n    set horizontalBarImageHeight(value) {\n        if (this._horizontalBarImageHeight === value) {\n            return;\n        }\n        if (value <= 0) {\n            value = 0.1;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._horizontalBarImageHeight = value;\n        const hb = this._horizontalBar;\n        hb.barImageHeight = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the height of the vertical bar image */\n    get verticalBarImageHeight() {\n        return this._verticalBarImageHeight;\n    }\n    set verticalBarImageHeight(value) {\n        if (this._verticalBarImageHeight === value) {\n            return;\n        }\n        if (value <= 0) {\n            value = 0.1;\n        }\n        if (value > 1) {\n            value = 1;\n        }\n        this._verticalBarImageHeight = value;\n        const vb = this._verticalBar;\n        vb.barImageHeight = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the bar background */\n    get barBackground() {\n        return this._barBackground;\n    }\n    set barBackground(color) {\n        if (this._barBackground === color) {\n            return;\n        }\n        this._barBackground = color;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.background = color;\n        vb.background = color;\n        this._dragSpace.background = color;\n    }\n    /** Gets or sets the bar background image */\n    get barImage() {\n        return this._barBackgroundImage;\n    }\n    set barImage(value) {\n        this._barBackgroundImage = value;\n        const hb = this._horizontalBar;\n        const vb = this._verticalBar;\n        hb.backgroundImage = value;\n        vb.backgroundImage = value;\n    }\n    /** Gets or sets the horizontal bar background image */\n    get horizontalBarImage() {\n        return this._horizontalBarBackgroundImage;\n    }\n    set horizontalBarImage(value) {\n        this._horizontalBarBackgroundImage = value;\n        const hb = this._horizontalBar;\n        hb.backgroundImage = value;\n    }\n    /** Gets or sets the vertical bar background image */\n    get verticalBarImage() {\n        return this._verticalBarBackgroundImage;\n    }\n    set verticalBarImage(value) {\n        this._verticalBarBackgroundImage = value;\n        const vb = this._verticalBar;\n        vb.backgroundImage = value;\n    }\n    _setWindowPosition(force = true) {\n        const ratio = this.host.idealRatio;\n        const windowContentsWidth = this._window._currentMeasure.width;\n        const windowContentsHeight = this._window._currentMeasure.height;\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\n            return;\n        }\n        this._oldWindowContentsWidth = windowContentsWidth;\n        this._oldWindowContentsHeight = windowContentsHeight;\n        const _endLeft = this._clientWidth - windowContentsWidth;\n        const _endTop = this._clientHeight - windowContentsHeight;\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\n        if (newLeft !== this._window.left) {\n            this._window.left = newLeft;\n            if (!this.freezeControls) {\n                this._rebuildLayout = true;\n            }\n        }\n        if (newTop !== this._window.top) {\n            this._window.top = newTop;\n            if (!this.freezeControls) {\n                this._rebuildLayout = true;\n            }\n        }\n    }\n    /** @internal */\n    _updateScroller() {\n        const windowContentsWidth = this._window._currentMeasure.width;\n        const windowContentsHeight = this._window._currentMeasure.height;\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\n            this._grid.setRowDefinition(1, 0, true);\n            this._horizontalBar.isVisible = false;\n            this._horizontalBar.value = 0;\n            this._rebuildLayout = true;\n        }\n        else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\n            this._grid.setRowDefinition(1, this._barSize, true);\n            this._horizontalBar.isVisible = true;\n            this._rebuildLayout = true;\n        }\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\n            this._grid.setColumnDefinition(1, 0, true);\n            this._verticalBar.isVisible = false;\n            this._verticalBar.value = 0;\n            this._rebuildLayout = true;\n        }\n        else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\n            this._grid.setColumnDefinition(1, this._barSize, true);\n            this._verticalBar.isVisible = true;\n            this._rebuildLayout = true;\n        }\n        this._buildClientSizes();\n        const ratio = this.host.idealRatio;\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\n    }\n    _link(host) {\n        super._link(host);\n        this._attachWheel();\n    }\n    /**\n     * @internal\n     */\n    _addBar(barControl, barContainer, isVertical, rotation) {\n        barControl.paddingLeft = 0;\n        barControl.width = \"100%\";\n        barControl.height = \"100%\";\n        barControl.barOffset = 0;\n        barControl.value = 0;\n        barControl.maximum = 1;\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n        barControl.isVertical = isVertical;\n        barControl.rotation = rotation;\n        barControl.isVisible = false;\n        barContainer.addControl(barControl);\n        barControl.onValueChangedObservable.add(() => {\n            this._setWindowPosition();\n        });\n    }\n    /** @internal */\n    _attachWheel() {\n        if (!this._host || this._onWheelObserver) {\n            return;\n        }\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\n            if (!this._pointerIsOver || this.isReadOnly) {\n                return;\n            }\n            if (this._verticalBar.isVisible == true) {\n                if (pi.y < 0 && this._verticalBar.value > 0) {\n                    this._verticalBar.value -= this._wheelPrecision;\n                }\n                else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\n                    this._verticalBar.value += this._wheelPrecision;\n                }\n            }\n            if (this._horizontalBar.isVisible == true) {\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\n                    this._horizontalBar.value += this._wheelPrecision;\n                }\n                else if (pi.x > 0 && this._horizontalBar.value > 0) {\n                    this._horizontalBar.value -= this._wheelPrecision;\n                }\n            }\n        });\n    }\n    _renderHighlightSpecific(context) {\n        if (!this.isHighlighted) {\n            return;\n        }\n        super._renderHighlightSpecific(context);\n        this._grid._renderHighlightSpecific(context);\n        context.restore();\n    }\n    /** Releases associated resources */\n    dispose() {\n        this.onWheelObservable.remove(this._onWheelObserver);\n        this._onWheelObserver = null;\n        super.dispose();\n    }\n}\n__decorate([\n    serialize()\n], ScrollViewer.prototype, \"wheelPrecision\", null);\n__decorate([\n    serialize()\n], ScrollViewer.prototype, \"scrollBackground\", null);\n__decorate([\n    serialize()\n], ScrollViewer.prototype, \"barColor\", null);\n__decorate([\n    serialize()\n], ScrollViewer.prototype, \"barSize\", null);\n__decorate([\n    serialize()\n], ScrollViewer.prototype, \"barBackground\", null);\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\n//# sourceMappingURL=scrollViewer.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Rectangle } from \"./rectangle.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\n/**\n * Class used to create toggle buttons\n * @since 5.0.0\n */\nexport class ToggleButton extends Rectangle {\n    /** Gets or sets group name this toggle button belongs to */\n    get group() {\n        return this._group;\n    }\n    set group(value) {\n        if (this._group === value) {\n            return;\n        }\n        this._group = value;\n    }\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\n    get isActive() {\n        return this._isActive;\n    }\n    set isActive(value) {\n        var _a, _b;\n        // Function modeled after radioButton.ts\n        if (this._isActive === value) {\n            return;\n        }\n        this._isActive = value;\n        // Update the visual state based on the new value\n        if (this._isActive) {\n            (_a = this.toActiveAnimation) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        else {\n            (_b = this.toInactiveAnimation) === null || _b === void 0 ? void 0 : _b.call(this);\n        }\n        this._markAsDirty();\n        this.onIsActiveChangedObservable.notifyObservers(value);\n        if (this._isActive && this._host && this._group) {\n            // A toggle button in a group can only have 1 active element at a given time.\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\n            this._host.executeOnAllControls((control) => {\n                // Check for control type ToggleButton\n                if (control.typeName === \"ToggleButton\") {\n                    // Don't do anything to this toggle button\n                    if (control === this) {\n                        return;\n                    }\n                    const childToggle = control;\n                    // If toggle button is in same group, set isActive to false\n                    if (childToggle.group === this.group) {\n                        childToggle.isActive = false;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Creates a new ToggleButton\n     * @param name defines the control name\n     * @param group defines the toggle group this toggle belongs to\n     */\n    constructor(name, group) {\n        super(name);\n        this.name = name;\n        /** Observable raised when isActive is changed */\n        this.onIsActiveChangedObservable = new Observable();\n        /**\n         * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\n         */\n        this.delegatePickingToChildren = false;\n        this._isActive = false;\n        this.group = group !== null && group !== void 0 ? group : \"\";\n        this.thickness = 0;\n        this.isPointerBlocker = true;\n        let alphaStore = null;\n        this.toActiveAnimation = () => {\n            this.thickness = 1;\n        };\n        this.toInactiveAnimation = () => {\n            this.thickness = 0;\n        };\n        this.pointerEnterActiveAnimation = () => {\n            alphaStore = this.alpha;\n            this.alpha -= 0.1;\n        };\n        this.pointerOutActiveAnimation = () => {\n            if (alphaStore !== null) {\n                this.alpha = alphaStore;\n            }\n        };\n        this.pointerDownActiveAnimation = () => {\n            this.scaleX -= 0.05;\n            this.scaleY -= 0.05;\n        };\n        this.pointerUpActiveAnimation = () => {\n            this.scaleX += 0.05;\n            this.scaleY += 0.05;\n        };\n        this.pointerEnterInactiveAnimation = () => {\n            alphaStore = this.alpha;\n            this.alpha -= 0.1;\n        };\n        this.pointerOutInactiveAnimation = () => {\n            if (alphaStore !== null) {\n                this.alpha = alphaStore;\n            }\n        };\n        this.pointerDownInactiveAnimation = () => {\n            this.scaleX -= 0.05;\n            this.scaleY -= 0.05;\n        };\n        this.pointerUpInactiveAnimation = () => {\n            this.scaleX += 0.05;\n            this.scaleY += 0.05;\n        };\n    }\n    _getTypeName() {\n        return \"ToggleButton\";\n    }\n    // While being a container, the toggle button behaves like a control.\n    /**\n     * @internal\n     */\n    _processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\n            return false;\n        }\n        if (!super.contains(x, y)) {\n            return false;\n        }\n        if (this.delegatePickingToChildren) {\n            let contains = false;\n            for (let index = this._children.length - 1; index >= 0; index--) {\n                const child = this._children[index];\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\n                    contains = true;\n                    break;\n                }\n            }\n            if (!contains) {\n                return false;\n            }\n        }\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerEnter(target, pi) {\n        if (!super._onPointerEnter(target, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        if (this._isActive) {\n            if (this.pointerEnterActiveAnimation) {\n                this.pointerEnterActiveAnimation();\n            }\n        }\n        else {\n            if (this.pointerEnterInactiveAnimation) {\n                this.pointerEnterInactiveAnimation();\n            }\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerOut(target, pi, force = false) {\n        if (!this.isReadOnly) {\n            if (this._isActive) {\n                if (this.pointerOutActiveAnimation) {\n                    this.pointerOutActiveAnimation();\n                }\n            }\n            else {\n                if (this.pointerOutInactiveAnimation) {\n                    this.pointerOutInactiveAnimation();\n                }\n            }\n        }\n        super._onPointerOut(target, pi, force);\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex, pi) {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\n            return false;\n        }\n        if (this.isReadOnly) {\n            return true;\n        }\n        if (this._isActive) {\n            if (this.pointerDownActiveAnimation) {\n                this.pointerDownActiveAnimation();\n            }\n        }\n        else {\n            if (this.pointerDownInactiveAnimation) {\n                this.pointerDownInactiveAnimation();\n            }\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi) {\n        if (!this.isReadOnly) {\n            if (this._isActive) {\n                if (this.pointerUpActiveAnimation) {\n                    this.pointerUpActiveAnimation();\n                }\n            }\n            else {\n                if (this.pointerUpInactiveAnimation) {\n                    this.pointerUpInactiveAnimation();\n                }\n            }\n        }\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\n    }\n}\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\n//# sourceMappingURL=toggleButton.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { StackPanel } from \"./stackPanel.js\";\nimport { Button } from \"./button.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { InputTextArea } from \"./inputTextArea.js\";\n/**\n * Class used to store key control properties\n */\nexport class KeyPropertySet {\n}\n/**\n * Class used to create virtual keyboard\n */\nexport class VirtualKeyboard extends StackPanel {\n    constructor() {\n        super(...arguments);\n        /** Observable raised when a key is pressed */\n        this.onKeyPressObservable = new Observable();\n        /** Gets or sets default key button width */\n        this.defaultButtonWidth = \"40px\";\n        /** Gets or sets default key button height */\n        this.defaultButtonHeight = \"40px\";\n        /** Gets or sets default key button left padding */\n        this.defaultButtonPaddingLeft = \"2px\";\n        /** Gets or sets default key button right padding */\n        this.defaultButtonPaddingRight = \"2px\";\n        /** Gets or sets default key button top padding */\n        this.defaultButtonPaddingTop = \"2px\";\n        /** Gets or sets default key button bottom padding */\n        this.defaultButtonPaddingBottom = \"2px\";\n        /** Gets or sets default key button foreground color */\n        this.defaultButtonColor = \"#DDD\";\n        /** Gets or sets default key button background color */\n        this.defaultButtonBackground = \"#070707\";\n        /** Gets or sets shift button foreground color */\n        this.shiftButtonColor = \"#7799FF\";\n        /** Gets or sets shift button thickness*/\n        this.selectedShiftThickness = 1;\n        /** Gets shift key state */\n        this.shiftState = 0;\n        this._currentlyConnectedInputText = null;\n        this._connectedInputTexts = [];\n        this._onKeyPressObserver = null;\n    }\n    _getTypeName() {\n        return \"VirtualKeyboard\";\n    }\n    _createKey(key, propertySet) {\n        const button = Button.CreateSimpleButton(key, key);\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\n        button.thickness = 0;\n        button.isFocusInvisible = true;\n        button.shadowColor = this.shadowColor;\n        button.shadowBlur = this.shadowBlur;\n        button.shadowOffsetX = this.shadowOffsetX;\n        button.shadowOffsetY = this.shadowOffsetY;\n        button.onPointerUpObservable.add(() => {\n            this.onKeyPressObservable.notifyObservers(key);\n        });\n        return button;\n    }\n    /**\n     * Adds a new row of keys\n     * @param keys defines the list of keys to add\n     * @param propertySets defines the associated property sets\n     */\n    addKeysRow(keys, propertySets) {\n        const panel = new StackPanel();\n        panel.isVertical = false;\n        panel.isFocusInvisible = true;\n        let maxKey = null;\n        for (let i = 0; i < keys.length; i++) {\n            let properties = null;\n            if (propertySets && propertySets.length === keys.length) {\n                properties = propertySets[i];\n            }\n            const key = this._createKey(keys[i], properties);\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\n                maxKey = key;\n            }\n            panel.addControl(key);\n        }\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\n        this.addControl(panel);\n    }\n    /**\n     * Set the shift key to a specific state\n     * @param shiftState defines the new shift state\n     */\n    applyShiftState(shiftState) {\n        if (!this.children) {\n            return;\n        }\n        for (let i = 0; i < this.children.length; i++) {\n            const row = this.children[i];\n            if (!row || !row.children) {\n                continue;\n            }\n            const rowContainer = row;\n            for (let j = 0; j < rowContainer.children.length; j++) {\n                const button = rowContainer.children[j];\n                if (!button || !button.children[0]) {\n                    continue;\n                }\n                const button_tblock = button.children[0];\n                if (button_tblock.text === \"\\u21E7\") {\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\n                }\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\n            }\n        }\n    }\n    /** Gets the input text control currently attached to the keyboard */\n    get connectedInputText() {\n        return this._currentlyConnectedInputText;\n    }\n    /**\n     * Connects the keyboard with an input text control\n     *\n     * @param input defines the target control\n     */\n    connect(input) {\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\n        if (inputTextAlreadyConnected) {\n            return;\n        }\n        if (this._onKeyPressObserver === null) {\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\n                if (!this._currentlyConnectedInputText) {\n                    return;\n                }\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\n                switch (key) {\n                    case \"\\u21E7\":\n                        this.shiftState++;\n                        if (this.shiftState > 2) {\n                            this.shiftState = 0;\n                        }\n                        this.applyShiftState(this.shiftState);\n                        return;\n                    case \"\\u2190\":\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\n                        }\n                        else {\n                            this._currentlyConnectedInputText.processKey(8);\n                        }\n                        return;\n                    case \"\\u21B5\":\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\n                        }\n                        else {\n                            this._currentlyConnectedInputText.processKey(13);\n                        }\n                        return;\n                }\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\n                }\n                else {\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\n                }\n                if (this.shiftState === 1) {\n                    this.shiftState = 0;\n                    this.applyShiftState(this.shiftState);\n                }\n            });\n        }\n        this.isVisible = false;\n        this._currentlyConnectedInputText = input;\n        input._connectedVirtualKeyboard = this;\n        // Events hooking\n        const onFocusObserver = input.onFocusObservable.add(() => {\n            this._currentlyConnectedInputText = input;\n            input._connectedVirtualKeyboard = this;\n            this.isVisible = true;\n        });\n        const onBlurObserver = input.onBlurObservable.add(() => {\n            input._connectedVirtualKeyboard = null;\n            this._currentlyConnectedInputText = null;\n            this.isVisible = false;\n        });\n        this._connectedInputTexts.push({\n            input,\n            onBlurObserver,\n            onFocusObserver,\n        });\n    }\n    /**\n     * Disconnects the keyboard from connected InputText controls\n     *\n     * @param input optionally defines a target control, otherwise all are disconnected\n     */\n    disconnect(input) {\n        if (input) {\n            // .find not available on IE\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\n            if (filtered.length === 1) {\n                this._removeConnectedInputObservables(filtered[0]);\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\n                if (this._currentlyConnectedInputText === input) {\n                    this._currentlyConnectedInputText = null;\n                }\n            }\n        }\n        else {\n            this._connectedInputTexts.forEach((connectedInputText) => {\n                this._removeConnectedInputObservables(connectedInputText);\n            });\n            this._connectedInputTexts.length = 0;\n        }\n        if (this._connectedInputTexts.length === 0) {\n            this._currentlyConnectedInputText = null;\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\n            this._onKeyPressObserver = null;\n        }\n    }\n    _removeConnectedInputObservables(connectedInputText) {\n        connectedInputText.input._connectedVirtualKeyboard = null;\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        super.dispose();\n        this.disconnect();\n    }\n    // Statics\n    /**\n     * Creates a new keyboard using a default layout\n     *\n     * @param name defines control name\n     * @returns a new VirtualKeyboard\n     */\n    static CreateDefaultLayout(name) {\n        const returnValue = new VirtualKeyboard(name);\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\n        return returnValue;\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        super._parseFromContent(serializedObject, host);\n        for (const row of this.children) {\n            if (row.getClassName() === \"StackPanel\") {\n                const stackPanel = row;\n                for (const key of stackPanel.children) {\n                    if (key.getClassName() === \"Button\" && key.name) {\n                        key.onPointerUpObservable.add(() => {\n                            this.onKeyPressObservable.notifyObservers(key.name);\n                        });\n                    }\n                }\n            }\n        }\n    }\n}\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\n//# sourceMappingURL=virtualKeyboard.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Control } from \"./control.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/** Class used to render a grid  */\nexport class DisplayGrid extends Control {\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\n    get displayMinorLines() {\n        return this._displayMinorLines;\n    }\n    set displayMinorLines(value) {\n        if (this._displayMinorLines === value) {\n            return;\n        }\n        this._displayMinorLines = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\n    get displayMajorLines() {\n        return this._displayMajorLines;\n    }\n    set displayMajorLines(value) {\n        if (this._displayMajorLines === value) {\n            return;\n        }\n        this._displayMajorLines = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets background color (Black by default) */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the width of each cell (20 by default) */\n    get cellWidth() {\n        return this._cellWidth;\n    }\n    set cellWidth(value) {\n        this._cellWidth = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the height of each cell (20 by default) */\n    get cellHeight() {\n        return this._cellHeight;\n    }\n    set cellHeight(value) {\n        this._cellHeight = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the tickness of minor lines (1 by default) */\n    get minorLineTickness() {\n        return this._minorLineTickness;\n    }\n    set minorLineTickness(value) {\n        this._minorLineTickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the color of minor lines (DarkGray by default) */\n    get minorLineColor() {\n        return this._minorLineColor;\n    }\n    set minorLineColor(value) {\n        this._minorLineColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the tickness of major lines (2 by default) */\n    get majorLineTickness() {\n        return this._majorLineTickness;\n    }\n    set majorLineTickness(value) {\n        this._majorLineTickness = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the color of major lines (White by default) */\n    get majorLineColor() {\n        return this._majorLineColor;\n    }\n    set majorLineColor(value) {\n        this._majorLineColor = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\n    get majorLineFrequency() {\n        return this._majorLineFrequency;\n    }\n    set majorLineFrequency(value) {\n        this._majorLineFrequency = value;\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new GridDisplayRectangle\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._cellWidth = 20;\n        this._cellHeight = 20;\n        this._minorLineTickness = 1;\n        this._minorLineColor = \"DarkGray\";\n        this._majorLineTickness = 2;\n        this._majorLineColor = \"White\";\n        this._majorLineFrequency = 5;\n        this._background = \"Black\";\n        this._displayMajorLines = true;\n        this._displayMinorLines = true;\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        if (this._isEnabled) {\n            if (this._background) {\n                context.fillStyle = this._background;\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\n            // Minor lines\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\n            if (this._displayMinorLines) {\n                context.strokeStyle = this._minorLineColor;\n                context.lineWidth = this._minorLineTickness;\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\n                    const cellX = left + x * this.cellWidth;\n                    context.beginPath();\n                    context.moveTo(cellX, this._currentMeasure.top);\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\n                    context.stroke();\n                }\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\n                    const cellY = top + y * this.cellHeight;\n                    context.beginPath();\n                    context.moveTo(this._currentMeasure.left, cellY);\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\n                    context.stroke();\n                }\n            }\n            // Major lines\n            if (this._displayMajorLines) {\n                context.strokeStyle = this._majorLineColor;\n                context.lineWidth = this._majorLineTickness;\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\n                    const cellX = left + x * this.cellWidth;\n                    context.beginPath();\n                    context.moveTo(cellX, this._currentMeasure.top);\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\n                    context.stroke();\n                }\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\n                    const cellY = top + y * this.cellHeight;\n                    context.moveTo(this._currentMeasure.left, cellY);\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\n                    context.closePath();\n                    context.stroke();\n                }\n            }\n        }\n        context.restore();\n    }\n    _getTypeName() {\n        return \"DisplayGrid\";\n    }\n}\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"displayMinorLines\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"displayMajorLines\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"background\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"cellWidth\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"cellHeight\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"minorLineTickness\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"minorLineColor\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"majorLineTickness\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"majorLineColor\", null);\n__decorate([\n    serialize()\n], DisplayGrid.prototype, \"majorLineFrequency\", null);\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\n//# sourceMappingURL=displayGrid.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { BaseSlider } from \"./baseSlider.js\";\nimport { Measure } from \"../../measure.js\";\nimport { Image } from \"../image.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { serialize } from \"@babylonjs/core/Misc/decorators.js\";\n/**\n * Class used to create slider controls based on images\n */\nexport class ImageBasedSlider extends BaseSlider {\n    get displayThumb() {\n        return this._displayThumb && this.thumbImage != null;\n    }\n    set displayThumb(value) {\n        if (this._displayThumb === value) {\n            return;\n        }\n        this._displayThumb = value;\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the image used to render the background\n     */\n    get backgroundImage() {\n        return this._backgroundImage;\n    }\n    set backgroundImage(value) {\n        if (this._backgroundImage === value) {\n            return;\n        }\n        this._backgroundImage = value;\n        if (value && !value.isLoaded) {\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n        }\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the image used to render the value bar\n     */\n    get valueBarImage() {\n        return this._valueBarImage;\n    }\n    set valueBarImage(value) {\n        if (this._valueBarImage === value) {\n            return;\n        }\n        this._valueBarImage = value;\n        if (value && !value.isLoaded) {\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n        }\n        this._markAsDirty();\n    }\n    /**\n     * Gets or sets the image used to render the thumb\n     */\n    get thumbImage() {\n        return this._thumbImage;\n    }\n    set thumbImage(value) {\n        if (this._thumbImage === value) {\n            return;\n        }\n        this._thumbImage = value;\n        if (value && !value.isLoaded) {\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\n        }\n        this._markAsDirty();\n    }\n    /**\n     * Creates a new ImageBasedSlider\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        this.name = name;\n        this._tempMeasure = new Measure(0, 0, 0, 0);\n    }\n    _getTypeName() {\n        return \"ImageBasedSlider\";\n    }\n    _draw(context) {\n        context.save();\n        this._applyStates(context);\n        this._prepareRenderingData(\"rectangle\");\n        const thumbPosition = this._getThumbPosition();\n        const left = this._renderLeft;\n        const top = this._renderTop;\n        const width = this._renderWidth;\n        const height = this._renderHeight;\n        // Background\n        if (this._backgroundImage) {\n            this._tempMeasure.copyFromFloats(left, top, width, height);\n            if (this.isThumbClamped && this.displayThumb) {\n                if (this.isVertical) {\n                    this._tempMeasure.height += this._effectiveThumbThickness;\n                }\n                else {\n                    this._tempMeasure.width += this._effectiveThumbThickness;\n                }\n            }\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\n            this._backgroundImage._draw(context);\n        }\n        // Bar\n        if (this._valueBarImage) {\n            if (this.isVertical) {\n                if (this.isThumbClamped && this.displayThumb) {\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\n                }\n                else {\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\n                }\n            }\n            else {\n                if (this.isThumbClamped && this.displayThumb) {\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\n                }\n                else {\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\n                }\n            }\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\n            this._valueBarImage._draw(context);\n        }\n        // Thumb\n        if (this.displayThumb) {\n            if (this.isVertical) {\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\n            }\n            else {\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\n            }\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\n            this._thumbImage._draw(context);\n        }\n        context.restore();\n    }\n    /**\n     * Serializes the current control\n     * @param serializationObject defined the JSON serialized object\n     */\n    serialize(serializationObject) {\n        super.serialize(serializationObject);\n        const backgroundImage = {};\n        const thumbImage = {};\n        const valueBarImage = {};\n        this.backgroundImage.serialize(backgroundImage);\n        this.thumbImage.serialize(thumbImage);\n        this.valueBarImage.serialize(valueBarImage);\n        serializationObject.backgroundImage = backgroundImage;\n        serializationObject.thumbImage = thumbImage;\n        serializationObject.valueBarImage = valueBarImage;\n    }\n    /**\n     * @internal\n     */\n    _parseFromContent(serializedObject, host) {\n        super._parseFromContent(serializedObject, host);\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host);\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host);\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host);\n    }\n}\n__decorate([\n    serialize()\n], ImageBasedSlider.prototype, \"displayThumb\", null);\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\n//# sourceMappingURL=imageBasedSlider.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { ValueAndUnit } from \"./valueAndUnit.js\";\n/**\n * Define a style used by control to automatically setup properties based on a template.\n * Only support font related properties so far\n */\nexport class Style {\n    /**\n     * Creates a new style object\n     * @param host defines the AdvancedDynamicTexture which hosts this style\n     */\n    constructor(host) {\n        this._fontFamily = \"Arial\";\n        this._fontStyle = \"\";\n        this._fontWeight = \"\";\n        /** @internal */\n        this._fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\n        /**\n         * Observable raised when the style values are changed\n         */\n        this.onChangedObservable = new Observable();\n        this._host = host;\n    }\n    /**\n     * Gets or sets the font size\n     */\n    get fontSize() {\n        return this._fontSize.toString(this._host);\n    }\n    set fontSize(value) {\n        if (this._fontSize.toString(this._host) === value) {\n            return;\n        }\n        if (this._fontSize.fromString(value)) {\n            this.onChangedObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Gets or sets the font family\n     */\n    get fontFamily() {\n        return this._fontFamily;\n    }\n    set fontFamily(value) {\n        if (this._fontFamily === value) {\n            return;\n        }\n        this._fontFamily = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Gets or sets the font style\n     */\n    get fontStyle() {\n        return this._fontStyle;\n    }\n    set fontStyle(value) {\n        if (this._fontStyle === value) {\n            return;\n        }\n        this._fontStyle = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /** Gets or sets font weight */\n    get fontWeight() {\n        return this._fontWeight;\n    }\n    set fontWeight(value) {\n        if (this._fontWeight === value) {\n            return;\n        }\n        this._fontWeight = value;\n        this.onChangedObservable.notifyObservers(this);\n    }\n    /** Dispose all associated resources */\n    dispose() {\n        this.onChangedObservable.clear();\n    }\n}\n//# sourceMappingURL=style.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector2, Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { ClipboardEventTypes, ClipboardInfo } from \"@babylonjs/core/Events/clipboardEvents.js\";\nimport { KeyboardEventTypes } from \"@babylonjs/core/Events/keyboardEvents.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture.js\";\nimport { Layer } from \"@babylonjs/core/Layers/layer.js\";\nimport { Container } from \"./controls/container.js\";\nimport { Control } from \"./controls/control.js\";\nimport { Style } from \"./style.js\";\nimport { Measure } from \"./measure.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { Viewport } from \"@babylonjs/core/Maths/math.viewport.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { WebRequest } from \"@babylonjs/core/Misc/webRequest.js\";\nimport { RandomGUID } from \"@babylonjs/core/Misc/guid.js\";\nimport { GetClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { DecodeBase64ToBinary } from \"@babylonjs/core/Misc/stringTools.js\";\n/**\n * Class used to create texture to support 2D GUI elements\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\n */\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\n    get numLayoutCalls() {\n        return this._numLayoutCalls;\n    }\n    /** Gets the number of render calls made the last time the ADT has been rendered */\n    get numRenderCalls() {\n        return this._numRenderCalls;\n    }\n    /**\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n     * Useful when you want more antialiasing\n     */\n    get renderScale() {\n        return this._renderScale;\n    }\n    set renderScale(value) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    get background() {\n        return this._background;\n    }\n    set background(value) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n     * Gets or sets the ideal width used to design controls.\n     * The GUI will then rescale everything accordingly\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get idealWidth() {\n        return this._idealWidth;\n    }\n    set idealWidth(value) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets the ideal height used to design controls.\n     * The GUI will then rescale everything accordingly\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get idealHeight() {\n        return this._idealHeight;\n    }\n    set idealHeight(value) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get useSmallestIdeal() {\n        return this._useSmallestIdeal;\n    }\n    set useSmallestIdeal(value) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n     * Gets or sets a boolean indicating if adaptive scaling must be used\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     */\n    get renderAtIdealSize() {\n        return this._renderAtIdealSize;\n    }\n    set renderAtIdealSize(value) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n    /**\n     * Gets the ratio used when in \"ideal mode\"\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\n     * */\n    get idealRatio() {\n        let rwidth = 0;\n        let rheight = 0;\n        if (this._idealWidth) {\n            rwidth = this.getSize().width / this._idealWidth;\n        }\n        if (this._idealHeight) {\n            rheight = this.getSize().height / this._idealHeight;\n        }\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\n        }\n        if (this._idealWidth) {\n            // horizontal\n            return rwidth;\n        }\n        if (this._idealHeight) {\n            // vertical\n            return rheight;\n        }\n        return 1;\n    }\n    /**\n     * Gets the underlying layer used to render the texture when in fullscreen mode\n     */\n    get layer() {\n        return this._layerToDispose;\n    }\n    /**\n     * Gets the root container control\n     */\n    get rootContainer() {\n        return this._rootContainer;\n    }\n    /**\n     * Returns an array containing the root container.\n     * This is mostly used to let the Inspector introspects the ADT\n     * @returns an array containing the rootContainer\n     */\n    getChildren() {\n        return [this._rootContainer];\n    }\n    /**\n     * Will return all controls that are inside this texture\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n     * @returns all child controls\n     */\n    getDescendants(directDescendantsOnly, predicate) {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n     * Will return all controls with the given type name\n     * @param typeName defines the type name to search for\n     * @returns an array of all controls found\n     */\n    getControlsByType(typeName) {\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\n    }\n    /**\n     * Will return the first control with the given name\n     * @param name defines the name to search for\n     * @returns the first control found or null\n     */\n    getControlByName(name) {\n        return this._getControlByKey(\"name\", name);\n    }\n    _getControlByKey(key, value) {\n        return this._rootContainer.getDescendants().find((control) => control[key] === value) || null;\n    }\n    /**\n     * Gets or sets the current focused control\n     */\n    get focusedControl() {\n        return this._focusedControl;\n    }\n    set focusedControl(control) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n     */\n    get isForeground() {\n        if (!this.layer) {\n            return true;\n        }\n        return !this.layer.isBackground;\n    }\n    set isForeground(value) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n     * Gets or set information about clipboardData\n     */\n    get clipboardData() {\n        return this._clipboardData;\n    }\n    set clipboardData(value) {\n        this._clipboardData = value;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture\n     * @param name defines the name of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     */\n    constructor(name, width = 0, height = 0, scene, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\n        /** Observable that fires when the GUI is ready */\n        this.onGuiReadyObservable = new Observable();\n        this._isDirty = false;\n        /** @internal */\n        this._rootContainer = new Container(\"root\");\n        /** @internal */\n        this._lastControlOver = {};\n        /** @internal */\n        this._lastControlDown = {};\n        /** @internal */\n        this._capturingControl = {};\n        /** @internal */\n        this._linkedControls = new Array();\n        this._isFullscreen = false;\n        this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n        this._idealWidth = 0;\n        this._idealHeight = 0;\n        this._useSmallestIdeal = false;\n        this._renderAtIdealSize = false;\n        this._blockNextFocusCheck = false;\n        this._renderScale = 1;\n        this._cursorChanged = false;\n        this._defaultMousePointerId = 0;\n        this._rootChildrenHaveChanged = false;\n        /** @internal */\n        this._capturedPointerIds = new Set();\n        /** @internal */\n        this._numLayoutCalls = 0;\n        /** @internal */\n        this._numRenderCalls = 0;\n        /**\n         * Define type to string to ensure compatibility across browsers\n         * Safari doesn't support DataTransfer constructor\n         */\n        this._clipboardData = \"\";\n        /**\n         * Observable event triggered each time an clipboard event is received from the rendering canvas\n         */\n        this.onClipboardObservable = new Observable();\n        /**\n         * Observable event triggered each time a pointer down is intercepted by a control\n         */\n        this.onControlPickedObservable = new Observable();\n        /**\n         * Observable event triggered before layout is evaluated\n         */\n        this.onBeginLayoutObservable = new Observable();\n        /**\n         * Observable event triggered after the layout was evaluated\n         */\n        this.onEndLayoutObservable = new Observable();\n        /**\n         * Observable event triggered before the texture is rendered\n         */\n        this.onBeginRenderObservable = new Observable();\n        /**\n         * Observable event triggered after the texture was rendered\n         */\n        this.onEndRenderObservable = new Observable();\n        /**\n         * Gets or sets a boolean defining if alpha is stored as premultiplied\n         */\n        this.premulAlpha = false;\n        /**\n         * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\n         */\n        this.applyYInversionOnUpdate = true;\n        /**\n         * If set to true, every scene render will trigger a pointer event for the GUI\n         * if it is linked to a mesh or has controls linked to a mesh. This will allow\n         * you to catch the pointer moving around the GUI due to camera or mesh movements,\n         * but it has a performance cost.\n         */\n        this.checkPointerEveryFrame = false;\n        this._useInvalidateRectOptimization = true;\n        // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\n        this._invalidatedRectangle = null;\n        this._clearMeasure = new Measure(0, 0, 0, 0);\n        /**\n         * @internal\n         */\n        this._onClipboardCopy = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * @internal\n         */\n        this._onClipboardCut = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * @internal\n         */\n        this._onClipboardPaste = (rawEvt) => {\n            const evt = rawEvt;\n            const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n            this.onClipboardObservable.notifyObservers(ev);\n            evt.preventDefault();\n        };\n        /**\n         * Recreate the content of the ADT from a JSON object\n         * @param serializedObject define the JSON serialized object to restore from\n         * @param scaleToSize defines whether to scale to texture to the saved size\n         * @deprecated Please use parseSerializedObject instead\n         */\n        this.parseContent = this.parseSerializedObject;\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this.applyYInversionOnUpdate = invertY;\n        this._rootElement = scene.getEngine().getInputElement();\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera) => this._checkUpdate(camera));\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\n            if (control) {\n                this._rootChildrenHaveChanged = true;\n            }\n        });\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\n            if (control) {\n                this._rootChildrenHaveChanged = true;\n            }\n        });\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"AdvancedDynamicTexture\"\n     */\n    getClassName() {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n     * Function used to execute a function on all controls\n     * @param func defines the function to execute\n     * @param container defines the container where controls belong. If null the root container will be used\n     */\n    executeOnAllControls(func, container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (const child of container.children) {\n            if (child.children) {\n                this.executeOnAllControls(func, child);\n                continue;\n            }\n            func(child);\n        }\n    }\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    get useInvalidateRectOptimization() {\n        return this._useInvalidateRectOptimization;\n    }\n    set useInvalidateRectOptimization(value) {\n        this._useInvalidateRectOptimization = value;\n    }\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\n     */\n    invalidateRect(invalidMinX, invalidMinY, invalidMaxX, invalidMaxY) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._invalidatedRectangle) {\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\n        }\n        else {\n            // Compute intersection\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n     * Marks the texture as dirty forcing a complete update\n     */\n    markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n     * Helper function used to create a new style\n     * @returns a new style\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\n     */\n    createStyle() {\n        return new Style(this);\n    }\n    /**\n     * Adds a new control to the root container\n     * @param control defines the control to add\n     * @returns the current texture\n     */\n    addControl(control) {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n     * Removes a control from the root container\n     * @param control defines the control to remove\n     * @returns the current texture\n     */\n    removeControl(control) {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\n     * @param repelFactor how much is the control repelled by other controls\n     */\n    moveToNonOverlappedPosition(overlapGroup, deltaStep = 1, repelFactor = 1) {\n        let controlsForGroup;\n        if (Array.isArray(overlapGroup)) {\n            controlsForGroup = overlapGroup;\n        }\n        else {\n            const descendants = this.getDescendants(true);\n            // get only the controls with an overlapGroup property set\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\n        }\n        controlsForGroup.forEach((control1) => {\n            var _a;\n            let velocity = Vector2.Zero();\n            const center = new Vector2(control1.centerX, control1.centerY);\n            controlsForGroup.forEach((control2) => {\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\n                    const diffLength = diff.length();\n                    if (diffLength > 0) {\n                        // calculate the velocity\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\n                    }\n                }\n            });\n            if (velocity.length() > 0) {\n                // move the control along the direction vector away from the overlapping control\n                velocity = velocity.normalize().scale(deltaStep * ((_a = control1.overlapDeltaMultiplier) !== null && _a !== void 0 ? _a : 1));\n                control1.linkOffsetXInPixels += velocity.x;\n                control1.linkOffsetYInPixels += velocity.y;\n            }\n        });\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootElement = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._prePointerObserver) {\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\n        }\n        if (this._sceneRenderObserver) {\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._canvasBlurObserver) {\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\n        }\n        if (this._controlAddedObserver) {\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\n        }\n        if (this._controlRemovedObserver) {\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        this.onGuiReadyObservable.clear();\n        super.dispose();\n    }\n    _onResize() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        const engine = scene.getEngine();\n        const textureSize = this.getSize();\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            }\n            else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @internal */\n    _getGlobalViewport() {\n        const size = this.getSize();\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\n        globalViewPort.width = targetX;\n        globalViewPort.height = targetY;\n        return globalViewPort;\n    }\n    /**\n     * Get screen coordinates for a vector3\n     * @param position defines the position to project\n     * @param worldMatrix defines the world matrix to use\n     * @returns the projected position\n     */\n    getProjectedPosition(position, worldMatrix) {\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\n        return new Vector2(result.x, result.y);\n    }\n    /**\n     * Get screen coordinates for a vector3\n     * @param position defines the position to project\n     * @param worldMatrix defines the world matrix to use\n     * @returns the projected position with Z\n     */\n    getProjectedPositionWithZ(position, worldMatrix) {\n        const scene = this.getScene();\n        if (!scene) {\n            return Vector3.Zero();\n        }\n        const globalViewport = this._getGlobalViewport();\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\n    }\n    _checkUpdate(camera, skipUpdate) {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            const scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            const globalViewport = this._getGlobalViewport();\n            for (const control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                const mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : Vector3.ZeroReadOnly;\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                if (this.useInvalidateRectOptimization) {\n                    control.invalidateRect();\n                }\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render(skipUpdate);\n        if (!skipUpdate) {\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\n        }\n    }\n    _render(skipRender) {\n        var _a;\n        const textureSize = this.getSize();\n        const renderWidth = textureSize.width;\n        const renderHeight = textureSize.height;\n        const context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n        if (this.onGuiReadyObservable.hasObservers()) {\n            this._checkGuiIsReady();\n        }\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\n        if (this._rootChildrenHaveChanged) {\n            const camera = (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.activeCamera;\n            if (camera) {\n                this._rootChildrenHaveChanged = false;\n                this._checkUpdate(camera, true);\n            }\n        }\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._numLayoutCalls = 0;\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n        if (skipRender) {\n            return;\n        }\n        // Clear\n        if (this._invalidatedRectangle) {\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\n        }\n        else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._numRenderCalls = 0;\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._invalidatedRectangle = null;\n    }\n    /**\n     * @internal\n     */\n    _changeCursor(cursor) {\n        if (this._rootElement) {\n            this._rootElement.style.cursor = cursor;\n            this._cursorChanged = true;\n        }\n    }\n    /**\n     * @internal\n     */\n    _registerLastControlDown(control, pointerId) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    _doPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = scene.getEngine();\n        const textureSize = this.getSize();\n        if (this._isFullscreen) {\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            const viewport = camera.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            if (this._capturingControl[pointerId].isPointerBlocker) {\n                this._shouldBlockPointer = true;\n            }\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\n            return;\n        }\n        this._cursorChanged = false;\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\n            if (!scene.doNotHandleCursors) {\n                this._changeCursor(\"\");\n            }\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\n            this._changeCursor(\"\");\n        }\n        this._manageFocus();\n    }\n    /**\n     * @internal\n     */\n    _cleanControlAfterRemovalFromList(list, control) {\n        for (const pointerId in list) {\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\n                continue;\n            }\n            const lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _cleanControlAfterRemoval(control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /**\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\n     * @param x pointer X on the canvas for the picking\n     * @param y pointer Y on the canvas for the picking\n     * @param pi optional pointer information\n     */\n    pick(x, y, pi = null) {\n        if (this._isFullscreen && this._scene) {\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\n        }\n    }\n    _translateToPicking(scene, tempViewport, pi, x = scene.pointerX, y = scene.pointerY) {\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\n        const engine = scene.getEngine();\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\n        if (!camera) {\n            tempViewport.x = 0;\n            tempViewport.y = 0;\n            tempViewport.width = engine.getRenderWidth();\n            tempViewport.height = engine.getRenderHeight();\n        }\n        else {\n            if (camera.rigCameras.length) {\n                // rig camera - we need to find the camera to use for this event\n                const rigViewport = new Viewport(0, 0, 1, 1);\n                camera.rigCameras.forEach((rigCamera) => {\n                    // generate the viewport of this camera\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\n                    // check if the pointer is in the camera's viewport\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\n                        // out of viewport - don't use this camera\n                        return;\n                    }\n                    // set the camera to use for pointers until this pointer loop is over\n                    scene.cameraToUseForPointers = rigCamera;\n                    // set the viewport\n                    tempViewport.x = rigViewport.x;\n                    tempViewport.y = rigViewport.y;\n                    tempViewport.width = rigViewport.width;\n                    tempViewport.height = rigViewport.height;\n                });\n            }\n            else {\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\n            }\n        }\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\n        this._shouldBlockPointer = false;\n        // Do picking modifies _shouldBlockPointer\n        if (pi) {\n            const pointerId = pi.event.pointerId || this._defaultMousePointerId;\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\n                pi.skipOnPointerObservable = true;\n            }\n        }\n        else {\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\n        }\n        // if overridden by a rig camera - reset back to the original value\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\n    }\n    /** Attach to all scene events required to support pointer events */\n    attach() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const tempViewport = new Viewport(0, 0, 0, 0);\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\n            if (scene.isPointerCaptured(pi.event.pointerId) &&\n                pi.type === PointerEventTypes.POINTERUP &&\n                !this._capturedPointerIds.has(pi.event.pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE &&\n                pi.type !== PointerEventTypes.POINTERUP &&\n                pi.type !== PointerEventTypes.POINTERDOWN &&\n                pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\n                // Avoid pointerMove events firing while the pointer is captured by the scene\n                if (scene.isPointerCaptured(pi.event.pointerId)) {\n                    return;\n                }\n                if (pi.event.pointerId) {\n                    this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel\n                }\n            }\n            this._translateToPicking(scene, tempViewport, pi);\n        });\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /**\n     * Register the clipboard Events onto the canvas\n     */\n    registerClipboardEvents() {\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    unRegisterClipboardEvents() {\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\n        self.removeEventListener(\"cut\", this._onClipboardCut);\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\n    }\n    /**\n     * Transform uvs from mesh space to texture space, taking the texture into account\n     * @param uv the uvs in mesh space\n     * @returns the uvs in texture space\n     */\n    _transformUvs(uv) {\n        const textureMatrix = this.getTextureMatrix();\n        let result;\n        if (textureMatrix.isIdentityAs3x2()) {\n            result = uv;\n        }\n        else {\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\n            const r0 = TmpVectors.Vector4[0];\n            const r1 = TmpVectors.Vector4[1];\n            const r2 = TmpVectors.Vector4[2];\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\n            result = TmpVectors.Vector2[0];\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\n        }\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\n            if (result.x > 1) {\n                let fX = result.x - Math.trunc(result.x);\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\n                // odd integers means it is mirrored from the original coordinate\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\n                    fX = 1 - fX;\n                }\n                result.x = fX;\n            }\n        }\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\n            if (result.y > 1) {\n                let fY = result.y - Math.trunc(result.y);\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\n                    fY = 1 - fY;\n                }\n                result.y = fY;\n            }\n        }\n        return result;\n    }\n    /**\n     * Connect the texture to a hosting mesh to enable interactions\n     * @param mesh defines the mesh to attach to\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n     */\n    attachToMesh(mesh, supportPointerMove = true) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE &&\n                pi.type !== PointerEventTypes.POINTERUP &&\n                pi.type !== PointerEventTypes.POINTERDOWN &&\n                pi.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            if (pi.type === PointerEventTypes.POINTERMOVE && pi.event.pointerId) {\n                this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel\n            }\n            const pointerId = pi.event.pointerId || this._defaultMousePointerId;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                let uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    uv = this._transformUvs(uv);\n                    const size = this.getSize();\n                    this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);\n                }\n            }\n            else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (const control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            }\n            else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachPickingToSceneRender(scene, () => {\n            const pointerId = this._defaultMousePointerId;\n            const pick = scene === null || scene === void 0 ? void 0 : scene.pick(scene.pointerX, scene.pointerY);\n            if (pick && pick.hit && pick.pickedMesh === mesh) {\n                let uv = pick.getTextureCoordinates();\n                if (uv) {\n                    uv = this._transformUvs(uv);\n                    const size = this.getSize();\n                    this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\n                }\n            }\n            else {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        }, true);\n        this._attachToOnPointerOut(scene);\n        this._attachToOnBlur(scene);\n    }\n    /**\n     * Move the focus to a specific control\n     * @param control defines the control which will receive the focus\n     */\n    moveFocusToControl(control) {\n        this.focusedControl = control;\n        this._lastPickedControl = control;\n        this._blockNextFocusCheck = true;\n    }\n    _manageFocus() {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== this._lastPickedControl) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    _attachPickingToSceneRender(scene, pickFunction, forcePicking) {\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\n            if (!this.checkPointerEveryFrame) {\n                return;\n            }\n            if (this._linkedControls.length > 0 || forcePicking) {\n                pickFunction();\n            }\n        });\n    }\n    _attachToOnPointerOut(scene) {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    _attachToOnBlur(scene) {\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\n                value._onCanvasBlur();\n            });\n            this.focusedControl = null;\n            this._lastControlDown = {};\n        });\n    }\n    /**\n     * Serializes the entire GUI system\n     * @returns an object with the JSON serialized data\n     */\n    serializeContent() {\n        const size = this.getSize();\n        const serializationObject = {\n            root: {},\n            width: size.width,\n            height: size.height,\n        };\n        this._rootContainer.serialize(serializationObject.root);\n        return serializationObject;\n    }\n    /**\n     * Recreate the content of the ADT from a JSON object\n     * @param serializedObject define the JSON serialized object to restore from\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     */\n    parseSerializedObject(serializedObject, scaleToSize) {\n        this._rootContainer = Control.Parse(serializedObject.root, this);\n        if (scaleToSize) {\n            const width = serializedObject.width;\n            const height = serializedObject.height;\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\n                this.scaleTo(width, height);\n            }\n            else {\n                // scales the GUI to a default size if none was available in the serialized content\n                this.scaleTo(1920, 1080);\n            }\n        }\n    }\n    /**\n     * Clones the ADT\n     * @param newName defines the name of the new ADT\n     * @returns the clone of the ADT\n     */\n    clone(newName) {\n        const scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        const size = this.getSize();\n        const data = this.serializeContent();\n        const clone = new AdvancedDynamicTexture(newName !== null && newName !== void 0 ? newName : \"Clone of \" + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);\n        clone.parseSerializedObject(data);\n        return clone;\n    }\n    /**\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\n     * @param snippetId defines the snippet to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\n     * @returns a promise that will resolve on success\n     */\n    static async ParseFromSnippetAsync(snippetId, scaleToSize, appendToAdt) {\n        const adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\n        if (snippetId === \"_BLANK\") {\n            return adt;\n        }\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\n        adt.parseSerializedObject(serialized, scaleToSize);\n        return adt;\n    }\n    /**\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\n     * @param snippetId defines the snippet to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @returns a promise that will resolve on success\n     */\n    parseFromSnippetAsync(snippetId, scaleToSize) {\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\n    }\n    /**\n     * Recreate the content of the ADT from a url json\n     * @param url defines the url to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\n     * @returns a promise that will resolve on success\n     */\n    static async ParseFromFileAsync(url, scaleToSize, appendToAdt) {\n        const adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\n        adt.parseSerializedObject(serialized, scaleToSize);\n        return adt;\n    }\n    /**\n     * Recreate the content of the ADT from a url json\n     * @param url defines the url to load\n     * @param scaleToSize defines whether to scale to texture to the saved size\n     * @returns a promise that will resolve on success\n     */\n    parseFromURLAsync(url, scaleToSize) {\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\n    }\n    static _LoadURLContentAsync(url, snippet = false) {\n        if (url === \"\") {\n            return Promise.reject(\"No URL provided\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = new WebRequest();\n            request.addEventListener(\"readystatechange\", () => {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        let gui;\n                        if (snippet) {\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\n                        }\n                        else {\n                            gui = request.responseText;\n                        }\n                        const serializationObject = JSON.parse(gui);\n                        resolve(serializationObject);\n                    }\n                    else {\n                        reject(\"Unable to load\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    }\n    // Statics\n    /**\n     * Compares two rectangle based controls for pixel overlap\n     * @param control1 The first control to compare\n     * @param control2 The second control to compare\n     * @returns true if overlaps, otherwise false\n     */\n    static _Overlaps(control1, control2) {\n        return !(control1.centerX > control2.centerX + control2.widthInPixels ||\n            control1.centerX + control1.widthInPixels < control2.centerX ||\n            control1.centerY + control1.heightInPixels < control2.centerY ||\n            control1.centerY > control2.centerY + control2.heightInPixels);\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateForMesh(mesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false, invertY, materialSetupCallback = this._CreateMaterial) {\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\n        const uniqueId = RandomGUID();\n        const result = new AdvancedDynamicTexture(`AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`, width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    static _CreateMaterial(mesh, uniqueId, texture, onlyAlphaTesting) {\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\n        if (!internalClassType) {\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\n        }\n        const material = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = texture;\n            material.emissiveTexture = texture;\n            texture.hasAlpha = true;\n        }\n        else {\n            material.emissiveTexture = texture;\n            material.opacityTexture = texture;\n        }\n        mesh.material = material;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateForMeshTexture(mesh, width = 1024, height = 1024, supportPointerMove = true, invertY) {\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\n     * In this mode the texture will rely on a layer for its rendering.\n     * This allows it to be treated like any other layer.\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n     * LayerMask is set through advancedTexture.layer.layerMask\n     * @param name defines name for the texture\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n     * @param scene defines the hosting scene\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    static CreateFullscreenUI(name, foreground = true, scene = null, sampling = Texture.BILINEAR_SAMPLINGMODE, adaptiveScaling = false) {\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        const resultScene = result.getScene();\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        if (adaptiveScaling && resultScene) {\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\n            result._rootContainer.scaleX = newScale;\n            result._rootContainer.scaleY = newScale;\n        }\n        // Attach\n        result.attach();\n        return result;\n    }\n    /**\n     * Scales the texture\n     * @param ratio the scale factor to apply to both width and height\n     */\n    scale(ratio) {\n        super.scale(ratio);\n        this.markAsDirty();\n    }\n    /**\n     * Resizes the texture\n     * @param width the new width\n     * @param height the new height\n     */\n    scaleTo(width, height) {\n        super.scaleTo(width, height);\n        this.markAsDirty();\n    }\n    _checkGuiIsReady() {\n        if (this.guiIsReady()) {\n            this.onGuiReadyObservable.notifyObservers(this);\n            this.onGuiReadyObservable.clear();\n        }\n    }\n    /**\n     * Returns true if all the GUI components are ready to render\n     */\n    guiIsReady() {\n        return this._rootContainer.isReady();\n    }\n}\n/** Define the Uurl to load snippets */\nAdvancedDynamicTexture.SnippetUrl = Constants.SnippetUrl;\n/** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\nAdvancedDynamicTexture.AllowGPUOptimizations = true;\n//# sourceMappingURL=advancedDynamicTexture.js.map","import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\n/**\n * Class used to transport Vector3 information for pointer events\n */\nexport class Vector3WithInfo extends Vector3 {\n    /**\n     * Creates a new Vector3WithInfo\n     * @param source defines the vector3 data to transport\n     * @param buttonIndex defines the current mouse button index\n     */\n    constructor(source, \n    /** defines the current mouse button index */\n    buttonIndex = 0) {\n        super(source.x, source.y, source.z);\n        this.buttonIndex = buttonIndex;\n    }\n}\n//# sourceMappingURL=vector3WithInfo.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh.js\";\nimport { Vector3WithInfo } from \"../vector3WithInfo.js\";\n/**\n * Class used as base class for controls\n */\nexport class Control3D {\n    /** Gets or sets the control position in world space */\n    get position() {\n        if (!this._node) {\n            return Vector3.Zero();\n        }\n        return this._node.position;\n    }\n    set position(value) {\n        if (!this._node) {\n            return;\n        }\n        this._node.position = value;\n    }\n    /** Gets or sets the control scaling in world space */\n    get scaling() {\n        if (!this._node) {\n            return new Vector3(1, 1, 1);\n        }\n        return this._node.scaling;\n    }\n    set scaling(value) {\n        if (!this._node) {\n            return;\n        }\n        this._isScaledByManager = false;\n        this._node.scaling = value;\n    }\n    /**\n     * Gets the list of attached behaviors\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     */\n    get behaviors() {\n        return this._behaviors;\n    }\n    /**\n     * Attach a behavior to the control\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @param behavior defines the behavior to attach\n     * @returns the current control\n     */\n    addBehavior(behavior) {\n        const index = this._behaviors.indexOf(behavior);\n        if (index !== -1) {\n            return this;\n        }\n        behavior.init();\n        const scene = this._host.scene;\n        if (scene.isLoading) {\n            // We defer the attach when the scene will be loaded\n            scene.onDataLoadedObservable.addOnce(() => {\n                behavior.attach(this);\n            });\n        }\n        else {\n            behavior.attach(this);\n        }\n        this._behaviors.push(behavior);\n        return this;\n    }\n    /**\n     * Remove an attached behavior\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @param behavior defines the behavior to attach\n     * @returns the current control\n     */\n    removeBehavior(behavior) {\n        const index = this._behaviors.indexOf(behavior);\n        if (index === -1) {\n            return this;\n        }\n        this._behaviors[index].detach();\n        this._behaviors.splice(index, 1);\n        return this;\n    }\n    /**\n     * Gets an attached behavior by name\n     * @param name defines the name of the behavior to look for\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\n     * @returns null if behavior was not found else the requested behavior\n     */\n    getBehaviorByName(name) {\n        for (const behavior of this._behaviors) {\n            if (behavior.name === name) {\n                return behavior;\n            }\n        }\n        return null;\n    }\n    /** Gets or sets a boolean indicating if the control is visible */\n    get isVisible() {\n        return this._isVisible;\n    }\n    set isVisible(value) {\n        if (this._isVisible === value) {\n            return;\n        }\n        this._isVisible = value;\n        const mesh = this.mesh;\n        if (mesh) {\n            mesh.setEnabled(value);\n        }\n    }\n    /**\n     * Creates a new control\n     * @param name defines the control name\n     */\n    constructor(\n    /** Defines the control name */\n    name) {\n        this.name = name;\n        this._downCount = 0;\n        this._enterCount = -1;\n        this._downPointerIds = {}; // Store number of pointer downs per ID, from near and far interactions\n        this._isVisible = true;\n        /** @internal */\n        this._isScaledByManager = false;\n        /**\n         * An event triggered when the pointer moves over the control\n         */\n        this.onPointerMoveObservable = new Observable();\n        /**\n         * An event triggered when the pointer moves out of the control\n         */\n        this.onPointerOutObservable = new Observable();\n        /**\n         * An event triggered when the pointer taps the control\n         */\n        this.onPointerDownObservable = new Observable();\n        /**\n         * An event triggered when pointer is up\n         */\n        this.onPointerUpObservable = new Observable();\n        /**\n         * An event triggered when a control is clicked on (with a mouse)\n         */\n        this.onPointerClickObservable = new Observable();\n        /**\n         * An event triggered when pointer enters the control\n         */\n        this.onPointerEnterObservable = new Observable();\n        // Behaviors\n        this._behaviors = new Array();\n    }\n    /**\n     * Gets a string representing the class name\n     */\n    get typeName() {\n        return this._getTypeName();\n    }\n    /**\n     * Get the current class name of the control.\n     * @returns current class name\n     */\n    getClassName() {\n        return this._getTypeName();\n    }\n    _getTypeName() {\n        return \"Control3D\";\n    }\n    /**\n     * Gets the transform node used by this control\n     */\n    get node() {\n        return this._node;\n    }\n    /**\n     * Gets the mesh used to render this control\n     */\n    get mesh() {\n        if (this._node instanceof AbstractMesh) {\n            return this._node;\n        }\n        return null;\n    }\n    /**\n     * Link the control as child of the given node\n     * @param node defines the node to link to. Use null to unlink the control\n     * @returns the current control\n     */\n    linkToTransformNode(node) {\n        if (this._node) {\n            this._node.parent = node;\n        }\n        return this;\n    }\n    /**\n     * @internal*\n     */\n    _prepareNode(scene) {\n        if (!this._node) {\n            this._node = this._createNode(scene);\n            if (!this.node) {\n                return;\n            }\n            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking\n            const mesh = this.mesh;\n            if (mesh) {\n                mesh.isPickable = true;\n                this._affectMaterial(mesh);\n            }\n        }\n    }\n    _injectGUI3DReservedDataStore(node) {\n        var _a, _b;\n        node.reservedDataStore = (_a = node.reservedDataStore) !== null && _a !== void 0 ? _a : {};\n        node.reservedDataStore.GUI3D = (_b = node.reservedDataStore.GUI3D) !== null && _b !== void 0 ? _b : {};\n        return node.reservedDataStore.GUI3D;\n    }\n    /**\n     * Node creation.\n     * Can be overriden by children\n     * @param scene defines the scene where the node must be attached\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _createNode(scene) {\n        // Do nothing by default\n        return null;\n    }\n    /**\n     * Affect a material to the given mesh\n     * @param mesh defines the mesh which will represent the control\n     */\n    _affectMaterial(mesh) {\n        mesh.material = null;\n    }\n    _isTouchButton3D(control) {\n        return control._generatePointerEventType !== undefined;\n    }\n    // Pointers\n    /**\n     * @internal\n     */\n    _onPointerMove(target, coordinates) {\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\n    }\n    /**\n     * @internal\n     */\n    _onPointerEnter(target) {\n        if (this._enterCount === -1) {\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\n            this._enterCount = 0;\n        }\n        this._enterCount++;\n        if (this._enterCount > 1) {\n            return false;\n        }\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\n        if (this.pointerEnterAnimation) {\n            this.pointerEnterAnimation();\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerOut(target) {\n        this._enterCount--;\n        if (this._enterCount > 0) {\n            return;\n        }\n        this._enterCount = 0;\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\n        if (this.pointerOutAnimation) {\n            this.pointerOutAnimation();\n        }\n    }\n    /**\n     * @internal\n     */\n    _onPointerDown(target, coordinates, pointerId, buttonIndex) {\n        this._downCount++;\n        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;\n        if (this._downCount !== 1) {\n            return false;\n        }\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\n        if (this.pointerDownAnimation) {\n            this.pointerDownAnimation();\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    _onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick) {\n        this._downCount--;\n        this._downPointerIds[pointerId]--;\n        if (this._downPointerIds[pointerId] <= 0) {\n            delete this._downPointerIds[pointerId];\n        }\n        if (this._downCount < 0) {\n            // Handle if forcePointerUp was called prior to this\n            this._downCount = 0;\n            return;\n        }\n        if (this._downCount == 0) {\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\n            }\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\n            if (this.pointerUpAnimation) {\n                this.pointerUpAnimation();\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    forcePointerUp(pointerId = null) {\n        if (pointerId !== null) {\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\n        }\n        else {\n            for (const key in this._downPointerIds) {\n                this._onPointerUp(this, Vector3.Zero(), +key, 0, true);\n            }\n            if (this._downCount > 0) {\n                this._downCount = 1;\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _processObservables(type, pickedPoint, originMeshPosition, pointerId, buttonIndex) {\n        if (this._isTouchButton3D(this) && originMeshPosition) {\n            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);\n        }\n        if (type === PointerEventTypes.POINTERMOVE) {\n            this._onPointerMove(this, pickedPoint);\n            const previousControlOver = this._host._lastControlOver[pointerId];\n            if (previousControlOver && previousControlOver !== this) {\n                previousControlOver._onPointerOut(this);\n            }\n            if (previousControlOver !== this) {\n                this._onPointerEnter(this);\n            }\n            this._host._lastControlOver[pointerId] = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERDOWN) {\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\n            this._host._lastControlDown[pointerId] = this;\n            this._host._lastPickedControl = this;\n            return true;\n        }\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\n            if (this._host._lastControlDown[pointerId]) {\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\n            }\n            delete this._host._lastControlDown[pointerId];\n            return true;\n        }\n        return false;\n    }\n    /** @internal */\n    _disposeNode() {\n        if (this._node) {\n            this._node.dispose();\n            this._node = null;\n        }\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        this.onPointerDownObservable.clear();\n        this.onPointerEnterObservable.clear();\n        this.onPointerMoveObservable.clear();\n        this.onPointerOutObservable.clear();\n        this.onPointerUpObservable.clear();\n        this.onPointerClickObservable.clear();\n        this._disposeNode();\n        // Behaviors\n        for (const behavior of this._behaviors) {\n            behavior.detach();\n        }\n    }\n}\n//# sourceMappingURL=control3D.js.map","import { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\n/**\n * The base class for controls that display content\n */\nexport class ContentDisplay3D extends Control3D {\n    constructor() {\n        super(...arguments);\n        this._contentResolution = 512;\n        this._contentScaleRatio = 2;\n    }\n    /**\n     * Gets or sets the GUI 2D content used to display the button's facade\n     */\n    get content() {\n        return this._content;\n    }\n    set content(value) {\n        this._content = value;\n        if (!value || !this._host || !this._host.utilityLayer) {\n            return;\n        }\n        if (!this._facadeTexture) {\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\n            this._setFacadeTextureScaling();\n            this._facadeTexture.premulAlpha = true;\n        }\n        else {\n            this._facadeTexture.rootContainer.clearControls();\n        }\n        this._facadeTexture.addControl(value);\n        this._applyFacade(this._facadeTexture);\n    }\n    _setFacadeTextureScaling() {\n        var _a;\n        if (this._facadeTexture) {\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\n            this._facadeTexture.rootContainer.scaleY = (_a = this._contentScaleRatioY) !== null && _a !== void 0 ? _a : this._contentScaleRatio;\n        }\n    }\n    /**\n     * Gets or sets the texture resolution used to render content (512 by default)\n     */\n    get contentResolution() {\n        return this._contentResolution;\n    }\n    set contentResolution(value) {\n        if (this._contentResolution === value) {\n            return;\n        }\n        this._contentResolution = value;\n        this._resetContent();\n    }\n    _disposeFacadeTexture() {\n        if (this._facadeTexture) {\n            this._facadeTexture.dispose();\n            this._facadeTexture = null;\n        }\n    }\n    _resetContent() {\n        this._disposeFacadeTexture();\n        this.content = this._content;\n    }\n    /**\n     * Apply the facade texture (created from the content property).\n     * This function can be overloaded by child classes\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _applyFacade(facadeTexture) { }\n}\n//# sourceMappingURL=contentDisplay3D.js.map","import { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { ContentDisplay3D } from \"./contentDisplay3D.js\";\n/**\n * Class used as a root to all buttons\n */\nexport class AbstractButton3D extends ContentDisplay3D {\n    /**\n     * Creates a new button\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n    }\n    _getTypeName() {\n        return \"AbstractButton3D\";\n    }\n    // Mesh association\n    _createNode(scene) {\n        return new TransformNode(\"button\" + this.name, scene);\n    }\n}\n//# sourceMappingURL=abstractButton3D.js.map","import { Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { AbstractButton3D } from \"./abstractButton3D.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\n/**\n * Class used to create a button in 3D\n */\nexport class Button3D extends AbstractButton3D {\n    /**\n     * Creates a new button\n     * @param name defines the control name\n     */\n    constructor(name, options) {\n        super(name);\n        this._options = {\n            width: 1,\n            height: 1,\n            depth: 0.08,\n            ...options,\n        };\n        // Default animations\n        this.pointerEnterAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this._currentMaterial.emissiveColor = Color3.Red();\n        };\n        this.pointerOutAnimation = () => {\n            this._currentMaterial.emissiveColor = Color3.Black();\n        };\n        this.pointerDownAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(0.95);\n        };\n        this.pointerUpAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\n        };\n    }\n    /**\n     * Apply the facade texture (created from the content property).\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\n     */\n    _applyFacade(facadeTexture) {\n        this._currentMaterial.emissiveTexture = facadeTexture;\n    }\n    _getTypeName() {\n        return \"Button3D\";\n    }\n    // Mesh association\n    _createNode(scene) {\n        const faceUV = new Array(6);\n        for (let i = 0; i < 6; i++) {\n            faceUV[i] = new Vector4(0, 0, 0, 0);\n        }\n        if (scene.useRightHandedSystem) {\n            // Flip the u on the texture\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\n        }\n        else {\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\n        }\n        const mesh = CreateBox(this.name + \"_rootMesh\", {\n            width: this._options.width,\n            height: this._options.height,\n            depth: this._options.depth,\n            faceUV: faceUV,\n            wrap: true,\n        }, scene);\n        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width) / this._options.height;\n        this._setFacadeTextureScaling();\n        return mesh;\n    }\n    _affectMaterial(mesh) {\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\n        material.specularColor = Color3.Black();\n        mesh.material = material;\n        this._currentMaterial = material;\n        this._resetContent();\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose();\n        this._disposeFacadeTexture();\n        if (this._currentMaterial) {\n            this._currentMaterial.dispose();\n        }\n    }\n}\n//# sourceMappingURL=button3D.js.map","import { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Control3D } from \"./control3D.js\";\n/**\n * Class used to create containers for controls\n */\nexport class Container3D extends Control3D {\n    /**\n     * Gets the list of child controls\n     */\n    get children() {\n        return this._children;\n    }\n    /**\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\n     * This is helpful to optimize layout operation when adding multiple children in a row\n     */\n    get blockLayout() {\n        return this._blockLayout;\n    }\n    set blockLayout(value) {\n        if (this._blockLayout === value) {\n            return;\n        }\n        this._blockLayout = value;\n        if (!this._blockLayout) {\n            this._arrangeChildren();\n        }\n    }\n    /**\n     * Creates a new container\n     * @param name defines the container name\n     */\n    constructor(name) {\n        super(name);\n        this._blockLayout = false;\n        /**\n         * Gets the list of child controls\n         */\n        this._children = new Array();\n    }\n    /**\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\n     * @returns the current container\n     */\n    updateLayout() {\n        this._arrangeChildren();\n        return this;\n    }\n    /**\n     * Gets a boolean indicating if the given control is in the children of this control\n     * @param control defines the control to check\n     * @returns true if the control is in the child list\n     */\n    containsControl(control) {\n        return this._children.indexOf(control) !== -1;\n    }\n    /**\n     * Adds a control to the children of this control\n     * @param control defines the control to add\n     * @returns the current container\n     */\n    addControl(control) {\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            return this;\n        }\n        control.parent = this;\n        control._host = this._host;\n        this._children.push(control);\n        if (this._host.utilityLayer) {\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\n            if (control.node) {\n                control.node.parent = this.node;\n            }\n            if (!this.blockLayout) {\n                this._arrangeChildren();\n            }\n        }\n        return this;\n    }\n    /**\n     * This function will be called everytime a new control is added\n     */\n    _arrangeChildren() { }\n    _createNode(scene) {\n        return new TransformNode(\"ContainerNode\", scene);\n    }\n    /**\n     * Removes a control from the children of this control\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        const index = this._children.indexOf(control);\n        if (index !== -1) {\n            this._children.splice(index, 1);\n            control.parent = null;\n            control._disposeNode();\n        }\n        return this;\n    }\n    _getTypeName() {\n        return \"Container3D\";\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        for (const control of this._children) {\n            control.dispose();\n        }\n        this._children.length = 0;\n        super.dispose();\n    }\n}\n/** Control rotation will remain unchanged  */\nContainer3D.UNSET_ORIENTATION = 0;\n/** Control will rotate to make it look at sphere central axis */\nContainer3D.FACEORIGIN_ORIENTATION = 1;\n/** Control will rotate to make it look back at sphere central axis */\nContainer3D.FACEORIGINREVERSED_ORIENTATION = 2;\n/** Control will rotate to look at z axis (0, 0, 1) */\nContainer3D.FACEFORWARD_ORIENTATION = 3;\n/** Control will rotate to look at negative z axis (0, 0, -1) */\nContainer3D.FACEFORWARDREVERSED_ORIENTATION = 4;\n//# sourceMappingURL=container3D.js.map","import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix, Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Container3D } from \"./container3D.js\";\n/**\n * Abstract class used to create a container panel deployed on the surface of a volume\n */\nexport class VolumeBasedPanel extends Container3D {\n    /**\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\n     * | Value | Type                                | Description |\n     * | ----- | ----------------------------------- | ----------- |\n     * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\n     * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\n     * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\n     * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\n     * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(value) {\n        if (this._orientation === value) {\n            return;\n        }\n        this._orientation = value;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    /**\n     * Gets or sets the number of columns requested (10 by default).\n     * The panel will automatically compute the number of rows based on number of child controls.\n     */\n    get columns() {\n        return this._columns;\n    }\n    set columns(value) {\n        if (this._columns === value) {\n            return;\n        }\n        this._columns = value;\n        this._rowThenColum = true;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    /**\n     * Gets or sets a the number of rows requested.\n     * The panel will automatically compute the number of columns based on number of child controls.\n     */\n    get rows() {\n        return this._rows;\n    }\n    set rows(value) {\n        if (this._rows === value) {\n            return;\n        }\n        this._rows = value;\n        this._rowThenColum = false;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    /**\n     * Creates new VolumeBasedPanel\n     * @param name\n     */\n    constructor(name) {\n        super(name);\n        this._columns = 10;\n        this._rows = 0;\n        this._rowThenColum = true;\n        this._orientation = Container3D.FACEORIGIN_ORIENTATION;\n        /**\n         * Gets or sets the distance between elements\n         */\n        this.margin = 0;\n    }\n    _arrangeChildren() {\n        this._cellWidth = 0;\n        this._cellHeight = 0;\n        let rows = 0;\n        let columns = 0;\n        let controlCount = 0;\n        const currentInverseWorld = Matrix.Invert(this.node.computeWorldMatrix(true));\n        // Measure\n        for (const child of this._children) {\n            if (!child.mesh) {\n                continue;\n            }\n            controlCount++;\n            child.mesh.computeWorldMatrix(true);\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\n            const boundingBox = child.mesh.getHierarchyBoundingVectors();\n            const extendSize = TmpVectors.Vector3[0];\n            const diff = TmpVectors.Vector3[1];\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\n            diff.scaleInPlace(0.5);\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\n        }\n        this._cellWidth += this.margin * 2;\n        this._cellHeight += this.margin * 2;\n        // Arrange\n        if (this._rowThenColum) {\n            columns = this._columns;\n            rows = Math.ceil(controlCount / this._columns);\n        }\n        else {\n            rows = this._rows;\n            columns = Math.ceil(controlCount / this._rows);\n        }\n        const startOffsetX = columns * 0.5 * this._cellWidth;\n        const startOffsetY = rows * 0.5 * this._cellHeight;\n        const nodeGrid = [];\n        let cellCounter = 0;\n        if (this._rowThenColum) {\n            for (let r = 0; r < rows; r++) {\n                for (let c = 0; c < columns; c++) {\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\n                    cellCounter++;\n                    if (cellCounter > controlCount) {\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            for (let c = 0; c < columns; c++) {\n                for (let r = 0; r < rows; r++) {\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\n                    cellCounter++;\n                    if (cellCounter > controlCount) {\n                        break;\n                    }\n                }\n            }\n        }\n        cellCounter = 0;\n        for (const child of this._children) {\n            if (!child.mesh) {\n                continue;\n            }\n            this._mapGridNode(child, nodeGrid[cellCounter]);\n            cellCounter++;\n        }\n        this._finalProcessing();\n    }\n    /** Child classes can implement this function to provide additional processing */\n    _finalProcessing() { }\n}\n//# sourceMappingURL=volumeBasedPanel.js.map","import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\nimport { Container3D } from \"./container3D.js\";\nimport { Axis, Space } from \"@babylonjs/core/Maths/math.axis.js\";\n/**\n * Class used to create a container panel deployed on the surface of a cylinder\n */\nexport class CylinderPanel extends VolumeBasedPanel {\n    constructor() {\n        super(...arguments);\n        this._radius = 5.0;\n    }\n    /**\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\n     */\n    get radius() {\n        return this._radius;\n    }\n    set radius(value) {\n        if (this._radius === value) {\n            return;\n        }\n        this._radius = value;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    _mapGridNode(control, nodePosition) {\n        const mesh = control.mesh;\n        if (!mesh) {\n            return;\n        }\n        const newPos = this._cylindricalMapping(nodePosition);\n        control.position = newPos;\n        switch (this.orientation) {\n            case Container3D.FACEORIGIN_ORIENTATION:\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\n                break;\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\n                break;\n            case Container3D.FACEFORWARD_ORIENTATION:\n                break;\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\n                break;\n        }\n    }\n    _cylindricalMapping(source) {\n        const newPos = new Vector3(0, source.y, this._radius);\n        const yAngle = source.x / this._radius;\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\n    }\n}\n//# sourceMappingURL=cylinderPanel.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"fluentVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\runiform mat4 world;\runiform mat4 viewProjection;\rvarying vec2 vUV;\r#ifdef BORDER\nvarying vec2 scaleInfo;\runiform float borderWidth;\runiform vec3 scaleFactor;\r#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\r#endif\nvoid main(void) {\rvUV=uv;\r#ifdef BORDER\nvec3 scale=scaleFactor;\rfloat minScale=min(min(scale.x,scale.y),scale.z);\rfloat maxScale=max(max(scale.x,scale.y),scale.z);\rfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\rfloat areaYZ=scale.y*scale.z;\rfloat areaXZ=scale.x*scale.z;\rfloat areaXY=scale.x*scale.y;\rfloat scaledBorderWidth=borderWidth; \rif (abs(normal.x)==1.0) \r{\rscale.x=scale.y;\rscale.y=scale.z;\rif (areaYZ>areaXZ && areaYZ>areaXY)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse if (abs(normal.y)==1.0) \r{\rscale.x=scale.z;\rif (areaXZ>areaXY && areaXZ>areaYZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse \r{\rif (areaXY>areaYZ && areaXY>areaXZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\rfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\rif (scale.x>scale.y)\r{\rscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\rscaleInfo.y=1.0-scaledBorderWidth;\r}\relse\r{\rscaleInfo.x=1.0-scaledBorderWidth;\rscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\r} \r#endif \nvec4 worldPos=world*vec4(position,1.0);\r#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\r#endif\ngl_Position=viewProjection*worldPos;\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentVertexShader = { name, shader };\n//# sourceMappingURL=fluent.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport \"./shaders/fluent.vertex.js\";\nimport \"./shaders/fluent.fragment.js\";\n/** @internal */\nexport class FluentMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.INNERGLOW = false;\n        this.BORDER = false;\n        this.HOVERLIGHT = false;\n        this.TEXTURE = false;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render controls with fluent design\n */\nexport class FluentMaterial extends PushMaterial {\n    /**\n     * Creates a new Fluent material\n     * @param name defines the name of the material\n     * @param scene defines the hosting scene\n     */\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\n         */\n        this.innerGlowColorIntensity = 0.5;\n        /**\n         * Gets or sets the inner glow color (white by default)\n         */\n        this.innerGlowColor = new Color3(1.0, 1.0, 1.0);\n        /**\n         * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\n         */\n        this.albedoColor = new Color3(0.3, 0.35, 0.4);\n        /**\n         * Gets or sets a boolean indicating if borders must be rendered (default is false)\n         */\n        this.renderBorders = false;\n        /**\n         * Gets or sets border width (default is 0.5)\n         */\n        this.borderWidth = 0.5;\n        /**\n         * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\n         */\n        this.edgeSmoothingValue = 0.02;\n        /**\n         * Gets or sets the minimum value that can be applied to border width (default is 0.1)\n         */\n        this.borderMinValue = 0.1;\n        /**\n         * Gets or sets a boolean indicating if hover light must be rendered (default is false)\n         */\n        this.renderHoverLight = false;\n        /**\n         * Gets or sets the radius used to render the hover light (default is 0.01)\n         */\n        this.hoverRadius = 0.01;\n        /**\n         * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\n         */\n        this.hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\n        /**\n         * Gets or sets the hover light position in world space (default is Vector3.Zero())\n         */\n        this.hoverPosition = Vector3.Zero();\n    }\n    needAlphaBlending() {\n        return this.alpha !== 1.0;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new FluentMaterialDefines();\n        }\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (defines._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n        if (defines._areTexturesDirty) {\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\n            defines.BORDER = this.renderBorders;\n            defines.HOVERLIGHT = this.renderHoverLight;\n            if (this._albedoTexture) {\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\n                    return false;\n                }\n                else {\n                    defines.TEXTURE = true;\n                }\n            }\n            else {\n                defines.TEXTURE = false;\n            }\n        }\n        const engine = scene.getEngine();\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            attribs.push(VertexBuffer.NormalKind);\n            attribs.push(VertexBuffer.UVKind);\n            const shaderName = \"fluent\";\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"innerGlowColor\",\n                \"albedoColor\",\n                \"borderWidth\",\n                \"edgeSmoothingValue\",\n                \"scaleFactor\",\n                \"borderMinValue\",\n                \"hoverColor\",\n                \"hoverPosition\",\n                \"hoverRadius\",\n                \"textureMatrix\",\n            ];\n            const samplers = [\"albedoSampler\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            const join = defines.toString();\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: null,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines, this._materialContext);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        if (this._mustRebind(scene, effect)) {\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\n            if (defines.INNERGLOW) {\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\n            }\n            if (defines.BORDER) {\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\n            }\n            if (defines.HOVERLIGHT) {\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\n            }\n            if (defines.TEXTURE && this._albedoTexture) {\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\n                const matrix = this._albedoTexture.getTextureMatrix();\n                this._activeEffect.setMatrix(\"textureMatrix\", matrix);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect);\n    }\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        return activeTextures;\n    }\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        return false;\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"FluentMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], FluentMaterial.prototype, \"innerGlowColorIntensity\", void 0);\n__decorate([\n    serializeAsColor3()\n], FluentMaterial.prototype, \"innerGlowColor\", void 0);\n__decorate([\n    serializeAsColor3()\n], FluentMaterial.prototype, \"albedoColor\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], FluentMaterial.prototype, \"renderBorders\", void 0);\n__decorate([\n    serialize()\n], FluentMaterial.prototype, \"borderWidth\", void 0);\n__decorate([\n    serialize()\n], FluentMaterial.prototype, \"edgeSmoothingValue\", void 0);\n__decorate([\n    serialize()\n], FluentMaterial.prototype, \"borderMinValue\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], FluentMaterial.prototype, \"renderHoverLight\", void 0);\n__decorate([\n    serialize()\n], FluentMaterial.prototype, \"hoverRadius\", void 0);\n__decorate([\n    serializeAsColor4()\n], FluentMaterial.prototype, \"hoverColor\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentMaterial.prototype, \"hoverPosition\", void 0);\n__decorate([\n    serializeAsTexture(\"albedoTexture\")\n], FluentMaterial.prototype, \"_albedoTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], FluentMaterial.prototype, \"albedoTexture\", void 0);\nRegisterClass(\"BABYLON.GUI.FluentMaterial\", FluentMaterial);\n//# sourceMappingURL=fluentMaterial.js.map","import { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Logger } from \"@babylonjs/core/Misc/logger.js\";\n/**\n * Simple menu that can contain holographic buttons\n */\nexport class TouchHolographicMenu extends VolumeBasedPanel {\n    /**\n     * Gets or sets the margin size of the backplate in button size units.\n     * Setting this to 1, will make the backPlate margin the size of 1 button\n     */\n    get backPlateMargin() {\n        return this._backPlateMargin;\n    }\n    set backPlateMargin(value) {\n        this._backPlateMargin = value;\n        if (this._children.length >= 1) {\n            this.children.forEach((control) => {\n                this._updateCurrentMinMax(control.position);\n            });\n            this._updateMargins();\n        }\n    }\n    _createNode(scene) {\n        const node = new Mesh(`menu_${this.name}`, scene);\n        this._backPlate = CreateBox(\"backPlate\" + this.name, { size: 1 }, scene);\n        this._backPlate.parent = node;\n        return node;\n    }\n    _affectMaterial(mesh) {\n        this._backPlateMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\n        this._backPlateMaterial.albedoColor = new Color3(0.08, 0.15, 0.55);\n        this._backPlateMaterial.renderBorders = true;\n        this._backPlateMaterial.renderHoverLight = true;\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\n            if (pickedPoint) {\n                this._backPlateMaterial.hoverPosition = pickedPoint;\n                this._backPlateMaterial.hoverColor.a = 1.0;\n            }\n            else {\n                this._backPlateMaterial.hoverColor.a = 0;\n            }\n        });\n        this._backPlate.material = this._backPlateMaterial;\n    }\n    _mapGridNode(control, nodePosition) {\n        // Simple plane mapping for the menu\n        const mesh = control.mesh;\n        if (!mesh) {\n            return;\n        }\n        control.position = nodePosition.clone();\n        this._updateCurrentMinMax(nodePosition);\n    }\n    _finalProcessing() {\n        this._updateMargins();\n    }\n    _updateCurrentMinMax(nodePosition) {\n        if (!this._currentMin) {\n            this._currentMin = nodePosition.clone();\n            this._currentMax = nodePosition.clone();\n        }\n        this._currentMin.minimizeInPlace(nodePosition);\n        this._currentMax.maximizeInPlace(nodePosition);\n    }\n    _updateMargins() {\n        if (this._children.length > 0) {\n            this._currentMin.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);\n            this._currentMax.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);\n            const extendSize = this._currentMax.subtract(this._currentMin);\n            // Also add a % margin\n            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;\n            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;\n            this._backPlate.scaling.z = 0.001;\n            for (let i = 0; i < this._children.length; i++) {\n                this._children[i].position.subtractInPlace(this._currentMin).subtractInPlace(extendSize.scale(0.5));\n                this._children[i].position.z -= 0.01;\n            }\n        }\n        this._currentMin = null;\n        this._currentMax = null;\n    }\n    /**\n     * Creates a holographic menu GUI 3D control\n     * @param name name of the menu\n     */\n    constructor(name) {\n        super(name);\n        this._backPlateMargin = 1.25;\n    }\n    /**\n     * Adds a button to the menu.\n     * Please note that the back material of the button will be set to transparent as it is attached to the menu.\n     *\n     * @param button Button to add\n     * @returns This menu\n     */\n    addButton(button) {\n        // Block updating the layout until the button is resized (which has to happen after node creation)\n        const wasLayoutBlocked = this.blockLayout;\n        if (!wasLayoutBlocked) {\n            this.blockLayout = true;\n        }\n        super.addControl(button);\n        button.isBackplateVisible = false;\n        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\n        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh\n        if (!wasLayoutBlocked) {\n            this.blockLayout = false;\n        }\n        return this;\n    }\n    /**\n     * This method should not be used directly. It is inherited from `Container3D`.\n     * Please use `addButton` instead.\n     * @param _control\n     * @returns\n     */\n    addControl(_control) {\n        Logger.Warn(\"TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.\");\n        return this;\n    }\n    /**\n     * Disposes the menu\n     */\n    dispose() {\n        super.dispose();\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n    }\n}\n/**\n * Scale for the buttons added to the menu\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nTouchHolographicMenu.MENU_BUTTON_SCALE = 1;\n//# sourceMappingURL=touchHolographicMenu.js.map","import { TouchHolographicMenu } from \"./touchHolographicMenu.js\";\nimport { HandConstraintBehavior } from \"@babylonjs/core/Behaviors/Meshes/handConstraintBehavior.js\";\n/**\n * Hand menu that displays buttons and floats around the hand.\n * @since 5.0.0\n */\nexport class HandMenu extends TouchHolographicMenu {\n    /**\n     * The hand constraint behavior setting the transformation of this node\n     */\n    get handConstraintBehavior() {\n        return this._handConstraintBehavior;\n    }\n    _createNode(scene) {\n        const node = super._createNode(scene);\n        this._handConstraintBehavior.attach(node);\n        return node;\n    }\n    /**\n     * Creates a hand menu GUI 3D control\n     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature\n     * @param name name of the hand menu\n     */\n    constructor(xr, name) {\n        super(name);\n        this._handConstraintBehavior = new HandConstraintBehavior();\n        this._handConstraintBehavior.linkToXRExperience(xr);\n        this.backPlateMargin = 0.15;\n        this.rows = 3;\n    }\n    /**\n     * Disposes the hand menu\n     */\n    dispose() {\n        super.dispose();\n        this._handConstraintBehavior.detach();\n    }\n}\n//# sourceMappingURL=handMenu.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"fluentBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvoid Round_Rect_Fragment_B31(\rfloat Radius,\rfloat Line_Width,\rvec4 Line_Color,\rfloat Filter_Width,\rvec2 UV,\rfloat Line_Visibility,\rvec4 Rect_Parms,\rvec4 Fill_Color,\rout vec4 Color)\r{\rfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\rfloat dx=max(fwidth(d)*Filter_Width,0.00001);\rfloat g=min(Rect_Parms.z,Rect_Parms.w);\rfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\rfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\rfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\rColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\r}\rvoid Blob_Fragment_B71(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid Line_Fragment_B48(\rvec4 Base_Color,\rvec4 Highlight_Color,\rfloat Highlight_Width,\rvec3 Line_Vertex,\rfloat Highlight,\rout vec4 Line_Color)\r{\rfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\rLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\r}\rvoid Scale_RGB_B54(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Conditional_Float_B38(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid main()\r{\rfloat R_Q72;\rfloat G_Q72;\rfloat B_Q72;\rfloat A_Q72;\rR_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;\rvec4 Blob_Color_Q71;\r#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);\rfloat k2=dot(vExtra3.xy,vExtra3.xy);\rvec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);\rBlob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r#else\nBlob_Color_Q71=vec4(0,0,0,0);\r#endif\nvec4 Line_Color_Q48;\rLine_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);\rfloat X_Q67;\rfloat Y_Q67;\rX_Q67=vUV.x;\rY_Q67=vUV.y;\rvec3 Incident_Q66=normalize(vPosition-cameraPosition);\rvec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);\rfloat Product_Q63=Y_Q67*_Vertical_Offset_;\rfloat Dot_Q68=dot(Incident_Q66, Reflected_Q60);\rfloat Dot_Q57=dot(vNormal, Incident_Q66);\rfloat Result_Q38;\rConditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);\rfloat Product_Q64=Result_Q38*_Frequency_;\rfloat Sum_Q69=Product_Q64+1.0;\rfloat Product_Q70=Sum_Q69*0.5;\rfloat Sum_Q62=Product_Q63+Product_Q70;\rfloat FractF_Q59=fract(Sum_Q62);\rvec2 Vec2_Q65=vec2(FractF_Q59,0.5);\rvec4 Color_Q58;\r#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\r#else\nColor_Q58=vec4(0,0,0,0);\r#endif\nvec4 Result_Q54;\rScale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);\rvec4 Result_Q55;\rScale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);\rvec4 Base_And_Iridescent_Q53;\rBase_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);\rvec4 Base_And_Iridescent_Q56;\rBase_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);\rvec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;\rvec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;\rvec4 Color_Q31;\rRound_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);\rvec4 Result_Q47=_Fade_Out_*Color_Q31;\rvec4 Out_Color=Result_Q47;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplatePixelShader = { name, shader };\n//# sourceMappingURL=fluentBackplate.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"fluentBackplateVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B115(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid PickDir_B140(\rfloat Degrees,\rvec3 DirX,\rvec3 DirY,\rout vec3 Dir)\r{\rfloat a=Degrees*3.14159/180.0;\rDir=cos(a)*DirX+sin(a)*DirY;\r}\rvoid Round_Rect_Vertex_B139(\rvec2 UV,\rfloat Radius,\rfloat Margin,\rfloat Anisotropy,\rfloat Gradient1,\rfloat Gradient2,\rout vec2 Rect_UV,\rout vec4 Rect_Parms,\rout vec2 Scale_XY,\rout vec2 Line_UV)\r{\rScale_XY=vec2(Anisotropy,1.0);\rLine_UV=(UV-vec2(0.5,0.5));\rRect_UV=Line_UV*Scale_XY;\rRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\rRect_Parms.z=Gradient1; \rRect_Parms.w=Gradient2;\r}\rvoid Line_Vertex_B135(\rvec2 Scale_XY,\rvec2 UV,\rfloat Time,\rfloat Rate,\rvec4 Highlight_Transform,\rout vec3 Line_Vertex)\r{\rfloat angle2=(Rate*Time)*2.0*3.1416;\rfloat sinAngle2=sin(angle2);\rfloat cosAngle2=cos(angle2);\rvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\rLine_Vertex.x=0.0;\rLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\rLine_Vertex.z=0.0; \r}\rvoid Blob_Vertex_B180(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob=Blob_Position;\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B129(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rNew_UV=center+r2*(UV-2.0*center+0.5);\rNew_P=vec3(New_UV-0.5,P.z);\rRadial_Gradient=1.0-length(delta)*2.0;\rRadial_Dir=vec3(delta*r2,0.0);\r}\rvoid Object_To_World_Dir_B132(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid RelativeOrAbsoluteDetail_B147(\rfloat Nominal_Radius,\rfloat Nominal_LineWidth,\rbool Absolute_Measurements,\rfloat Height,\rout float Radius,\rout float Line_Width)\r{\rfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\rRadius=Nominal_Radius*scale;\rLine_Width=Nominal_LineWidth*scale;\r}\rvoid Edge_AA_Vertex_B130(\rvec3 Position_World,\rvec3 Position_Object,\rvec3 Normal_Object,\rvec3 Eye,\rfloat Radial_Gradient,\rvec3 Radial_Dir,\rvec3 Tangent,\rout float Gradient1,\rout float Gradient2)\r{\rvec3 I=(Eye-Position_World);\rvec3 T=(world* vec4(Tangent,0.0)).xyz;\rfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\rif (Normal_Object.z==0.0) { \rGradient1=Position_Object.z>0.0 ? g : 1.0;\rGradient2=Position_Object.z>0.0 ? 1.0 : g;\r} else {\rGradient1=g+(1.0-g)*(Radial_Gradient);\rGradient2=1.0;\r}\r}\rvoid Pick_Radius_B144(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid main()\r{\rvec3 Nrm_World_Q128;\rNrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Tangent_World_Q131;\rvec3 Tangent_World_N_Q131;\rfloat Tangent_Length_Q131;\rTangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q131=length(Tangent_World_Q131);\rTangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;\rvec3 Binormal_World_Q132;\rvec3 Binormal_World_N_Q132;\rfloat Binormal_Length_Q132;\rObject_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);\rfloat Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;\rvec3 Result_Q177;\rResult_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));\rvec3 Result_Q178;\rResult_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));\rfloat Result_Q144;\rPick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);\rvec3 Dir_Q140;\rPickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);\rfloat Radius_Q147;\rfloat Line_Width_Q147;\rRelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);\rvec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);\rvec3 New_P_Q129;\rvec2 New_UV_Q129;\rfloat Radial_Gradient_Q129;\rvec3 Radial_Dir_Q129;\rMove_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);\rvec3 Pos_World_Q115;\rObject_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);\rvec4 Blob_Info_Q180;\r#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\r#else\nBlob_Info_Q180=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q181;\r#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\r#else\nBlob_Info_Q181=vec4(0,0,0,0);\r#endif\nfloat Gradient1_Q130;\rfloat Gradient2_Q130;\r#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\r#else\nGradient1_Q130=1.0;\rGradient2_Q130=1.0;\r#endif\nvec2 Rect_UV_Q139;\rvec4 Rect_Parms_Q139;\rvec2 Scale_XY_Q139;\rvec2 Line_UV_Q139;\rRound_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);\rvec3 Line_Vertex_Q135;\rLine_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);\rvec3 Position=Pos_World_Q115;\rvec3 Normal=Dir_Q140;\rvec2 UV=Rect_UV_Q139;\rvec3 Tangent=Line_Vertex_Q135;\rvec3 Binormal=Nrm_World_Q128;\rvec4 Color=Out_Color_Q145;\rvec4 Extra1=Rect_Parms_Q139;\rvec4 Extra2=Blob_Info_Q180;\rvec4 Extra3=Blob_Info_Q181;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplateVertexShader = { name, shader };\n//# sourceMappingURL=fluentBackplate.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/fluentBackplate.fragment.js\";\nimport \"./shaders/fluentBackplate.vertex.js\";\n/** @internal */\nclass FluentBackplateMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.BLOB_ENABLE = true;\n        this.BLOB_ENABLE_2 = true;\n        this.SMOOTH_EDGES = true;\n        this.IRIDESCENT_MAP_ENABLE = true;\n        this._needNormals = true;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render square buttons with fluent design\n */\nexport class FluentBackplateMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\n         */\n        this.radius = 0.03;\n        /**\n         * Gets or sets the line width of the backplate.\n         */\n        this.lineWidth = 0.01;\n        /**\n         * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\n         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n         */\n        this.absoluteSizes = false;\n        /** @internal */\n        this._filterWidth = 1;\n        /**\n         * Gets or sets the base color of the backplate.\n         */\n        this.baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\n        /**\n         * Gets or sets the line color of the backplate.\n         */\n        this.lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\n        /**\n         * Gets or sets the intensity of the fluent hover glow effect.\n         */\n        this.blobIntensity = 0.98;\n        /**\n         * Gets or sets the far size of the fluent hover glow effect.\n         */\n        this.blobFarSize = 0.04;\n        /**\n         * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\n         */\n        this.blobNearDistance = 0;\n        /**\n         * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\n         */\n        this.blobFarDistance = 0.08;\n        /**\n         * Gets or sets the length of the fluent hover glow effect fade.\n         */\n        this.blobFadeLength = 0.08;\n        /**\n         * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\n         */\n        this.blobNearSize = 0.22;\n        /**\n         * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\n         */\n        this.blobPulse = 0;\n        /**\n         * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\n         */\n        this.blobFade = 0;\n        /**\n         * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\n         */\n        this.blobNearSize2 = 0.22;\n        /**\n         * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\n         */\n        this.blobPulse2 = 0;\n        /**\n         * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\n         */\n        this.blobFade2 = 0;\n        /** @internal */\n        this._rate = 0.135;\n        /**\n         * Gets or sets the color of the highlights on the backplate line.\n         */\n        this.highlightColor = new Color4(0.98, 0.98, 0.98, 1);\n        /**\n         * Gets or sets the width of the highlights on the backplate line.\n         */\n        this.highlightWidth = 0.25;\n        /** @internal */\n        this._highlightTransform = new Vector4(1, 1, 0, 0);\n        /** @internal */\n        this._highlight = 1;\n        /**\n         * Gets or sets the intensity of the iridescence effect.\n         */\n        this.iridescenceIntensity = 0;\n        /**\n         * Gets or sets the intensity of the iridescence effect on the backplate edges.\n         */\n        this.iridescenceEdgeIntensity = 1;\n        /** @internal */\n        this._angle = -45;\n        /**\n         * Gets or sets the opacity of the backplate (0.0 - 1.0).\n         */\n        this.fadeOut = 1;\n        /** @internal */\n        this._reflected = true;\n        /** @internal */\n        this._frequency = 1;\n        /** @internal */\n        this._verticalOffset = 0;\n        /**\n         * Gets or sets the world-space position of the tip of the left index finger.\n         */\n        this.globalLeftIndexTipPosition = Vector3.Zero();\n        this._globalLeftIndexTipPosition4 = Vector4.Zero();\n        /**\n         * Gets or sets the world-space position of the tip of the right index finger.\n         */\n        this.globalRightIndexTipPosition = Vector3.Zero();\n        this._globalRightIndexTipPosition4 = Vector4.Zero();\n        this.alphaMode = Constants.ALPHA_DISABLE;\n        this.backFaceCulling = false;\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n    }\n    needAlphaBlending() {\n        return false;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"fluentBackplate\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Radius_\",\n                \"_Line_Width_\",\n                \"_Absolute_Sizes_\",\n                \"_Filter_Width_\",\n                \"_Base_Color_\",\n                \"_Line_Color_\",\n                \"_Radius_Top_Left_\",\n                \"_Radius_Top_Right_\",\n                \"_Radius_Bottom_Left_\",\n                \"_Radius_Bottom_Right_\",\n                \"_Blob_Position_\",\n                \"_Blob_Intensity_\",\n                \"_Blob_Near_Size_\",\n                \"_Blob_Far_Size_\",\n                \"_Blob_Near_Distance_\",\n                \"_Blob_Far_Distance_\",\n                \"_Blob_Fade_Length_\",\n                \"_Blob_Pulse_\",\n                \"_Blob_Fade_\",\n                \"_Blob_Texture_\",\n                \"_Blob_Position_2_\",\n                \"_Blob_Near_Size_2_\",\n                \"_Blob_Pulse_2_\",\n                \"_Blob_Fade_2_\",\n                \"_Rate_\",\n                \"_Highlight_Color_\",\n                \"_Highlight_Width_\",\n                \"_Highlight_Transform_\",\n                \"_Highlight_\",\n                \"_Iridescence_Intensity_\",\n                \"_Iridescence_Edge_Intensity_\",\n                \"_Angle_\",\n                \"_Fade_Out_\",\n                \"_Reflected_\",\n                \"_Frequency_\",\n                \"_Vertical_Offset_\",\n                \"_Iridescent_Map_\",\n                \"_Use_Global_Left_Index_\",\n                \"_Use_Global_Right_Index_\",\n                \"Global_Left_Index_Tip_Position\",\n                \"Global_Right_Index_Tip_Position\",\n            ];\n            const samplers = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines, this._materialContext);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        var _a, _b;\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", (_b = (_a = this.getScene().activeCamera) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : Vector3.ZeroReadOnly);\n        // \"Round Rect\"\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\n        // \"Radii Multipliers\"\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\n        // \"Blob\"\n        //define BLOB_ENABLE true;\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\n        // \"Blob Texture\"\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\n        // \"Blob 2\"\n        //define BLOB_ENABLE_2 true;\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\n        // \"Line Highlight\"\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\n        // \"Iridescence\"\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\n        // \"Fade\"\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\n        // \"Antialiasing\"\n        //define SMOOTH_EDGES true;\n        // \"ChooseAngle\"\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\n        // \"Multiply\"\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\n        // \"Color Texture\"\n        //define IRIDESCENT_MAP_ENABLE true;\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\n        // \"Global\"\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n        this._blobTexture.dispose();\n        this._iridescentMap.dispose();\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"FluentBackplateMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n/**\n * URL pointing to the texture used to define the coloring for the fluent blob effect.\n */\nFluentBackplateMaterial.BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\n/**\n * URL pointing to the texture used to define iridescent map.\n */\nFluentBackplateMaterial.IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"lineWidth\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"baseColor\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"lineColor\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobNearSize\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobPulse\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobFade\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobNearSize2\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobPulse2\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"blobFade2\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"highlightColor\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"highlightWidth\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"iridescenceIntensity\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"iridescenceEdgeIntensity\", void 0);\n__decorate([\n    serialize()\n], FluentBackplateMaterial.prototype, \"fadeOut\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentBackplateMaterial.prototype, \"globalLeftIndexTipPosition\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentBackplateMaterial.prototype, \"globalRightIndexTipPosition\", void 0);\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\n//# sourceMappingURL=fluentBackplateMaterial.js.map","import { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\n/**\n * Class used to create a holographic backplate in 3D\n * @since 5.0.0\n */\nexport class HolographicBackplate extends Control3D {\n    /**\n     * Rendering ground id of the backplate mesh.\n     */\n    set renderingGroupId(id) {\n        this._model.renderingGroupId = id;\n    }\n    get renderingGroupId() {\n        return this._model.renderingGroupId;\n    }\n    /**\n     * Gets the material used by the backplate\n     */\n    get material() {\n        return this._material;\n    }\n    /**\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\n     */\n    get shareMaterials() {\n        return this._shareMaterials;\n    }\n    /**\n     * Creates a new holographic backplate\n     * @param name defines the control name\n     * @param _shareMaterials\n     */\n    constructor(name, _shareMaterials = true) {\n        super(name);\n        this._shareMaterials = _shareMaterials;\n    }\n    _getTypeName() {\n        return \"HolographicBackplate\";\n    }\n    // Mesh association\n    _createNode(scene) {\n        var _a;\n        const collisionMesh = CreateBox(((_a = this.name) !== null && _a !== void 0 ? _a : \"HolographicBackplate\") + \"_CollisionMesh\", {\n            width: 1.0,\n            height: 1.0,\n            depth: 1.0,\n        }, scene);\n        collisionMesh.isPickable = true;\n        collisionMesh.visibility = 0;\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\n            const importedModel = result.meshes[1];\n            importedModel.name = `${this.name}_frontPlate`;\n            importedModel.isPickable = false;\n            importedModel.parent = collisionMesh;\n            if (this._material) {\n                importedModel.material = this._material;\n            }\n            this._model = importedModel;\n        });\n        return collisionMesh;\n    }\n    _createMaterial(mesh) {\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\n    }\n    _affectMaterial(mesh) {\n        // Back\n        if (this._shareMaterials) {\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\n                this._createMaterial(mesh);\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\n            }\n            else {\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"];\n            }\n        }\n        else {\n            this._createMaterial(mesh);\n        }\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose(); // will dispose main mesh ie. back plate\n        if (!this.shareMaterials) {\n            this._material.dispose();\n        }\n        this._model.dispose();\n    }\n}\n/**\n * Base Url for the button model.\n */\nHolographicBackplate.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the button model.\n */\nHolographicBackplate.MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\n//# sourceMappingURL=holographicBackplate.js.map","import { Button3D } from \"./button3D.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { StackPanel } from \"../../2D/controls/stackPanel.js\";\nimport { Image } from \"../../2D/controls/image.js\";\nimport { TextBlock } from \"../../2D/controls/textBlock.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { DomManagement } from \"@babylonjs/core/Misc/domManagement.js\";\n/**\n * Class used to create a holographic button in 3D\n */\nexport class HolographicButton extends Button3D {\n    _disposeTooltip() {\n        this._tooltipFade = null;\n        if (this._tooltipTextBlock) {\n            this._tooltipTextBlock.dispose();\n        }\n        if (this._tooltipTexture) {\n            this._tooltipTexture.dispose();\n        }\n        if (this._tooltipMesh) {\n            this._tooltipMesh.dispose();\n        }\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\n    }\n    /**\n     * Rendering ground id of all the mesh in the button\n     */\n    set renderingGroupId(id) {\n        this._backPlate.renderingGroupId = id;\n        this._textPlate.renderingGroupId = id;\n        this._frontPlate.renderingGroupId = id;\n        if (this._tooltipMesh) {\n            this._tooltipMesh.renderingGroupId = id;\n        }\n    }\n    get renderingGroupId() {\n        return this._backPlate.renderingGroupId;\n    }\n    /**\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\n     */\n    set tooltipText(text) {\n        if (!text) {\n            this._disposeTooltip();\n            return;\n        }\n        if (!this._tooltipFade) {\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\n            // Create tooltip with mesh and text\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\n            tooltipBackground.material = mat;\n            tooltipBackground.isPickable = false;\n            this._tooltipMesh.addChild(tooltipBackground);\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\n            this._tooltipMesh.scaling.y = 1 / 3;\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\n            this._tooltipMesh.isPickable = false;\n            this._tooltipMesh.parent = this._backPlate;\n            // Create text texture for the tooltip\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\n            this._tooltipTextBlock = new TextBlock();\n            this._tooltipTextBlock.scaleY = 3;\n            this._tooltipTextBlock.color = \"white\";\n            this._tooltipTextBlock.fontSize = 130;\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\n            // Add hover action to tooltip\n            this._tooltipFade = new FadeInOutBehavior();\n            this._tooltipFade.delay = 500;\n            this._tooltipMesh.addBehavior(this._tooltipFade);\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\n                if (this._tooltipFade) {\n                    this._tooltipFade.fadeIn(true);\n                }\n            });\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\n                if (this._tooltipFade) {\n                    this._tooltipFade.fadeIn(false);\n                }\n            });\n        }\n        if (this._tooltipTextBlock) {\n            this._tooltipTextBlock.text = text;\n        }\n    }\n    get tooltipText() {\n        if (this._tooltipTextBlock) {\n            return this._tooltipTextBlock.text;\n        }\n        return null;\n    }\n    /**\n     * Gets or sets text for the button\n     */\n    get text() {\n        return this._text;\n    }\n    set text(value) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._rebuildContent();\n    }\n    /**\n     * Gets or sets the image url for the button\n     */\n    get imageUrl() {\n        return this._imageUrl;\n    }\n    set imageUrl(value) {\n        if (this._imageUrl === value) {\n            return;\n        }\n        this._imageUrl = value;\n        this._rebuildContent();\n    }\n    /**\n     * Gets the back material used by this button\n     */\n    get backMaterial() {\n        return this._backMaterial;\n    }\n    /**\n     * Gets the front material used by this button\n     */\n    get frontMaterial() {\n        return this._frontMaterial;\n    }\n    /**\n     * Gets the plate material used by this button\n     */\n    get plateMaterial() {\n        return this._plateMaterial;\n    }\n    /**\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\n     */\n    get shareMaterials() {\n        return this._shareMaterials;\n    }\n    /**\n     * Creates a new button\n     * @param name defines the control name\n     * @param shareMaterials\n     */\n    constructor(name, shareMaterials = true) {\n        super(name);\n        this._shareMaterials = true;\n        this._shareMaterials = shareMaterials;\n        // Default animations\n        this.pointerEnterAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this._frontPlate.setEnabled(true);\n        };\n        this.pointerOutAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this._frontPlate.setEnabled(false);\n        };\n    }\n    _getTypeName() {\n        return \"HolographicButton\";\n    }\n    _rebuildContent() {\n        this._disposeFacadeTexture();\n        const panel = new StackPanel();\n        panel.isVertical = true;\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\n            if (this._imageUrl) {\n                const image = new Image();\n                image.source = this._imageUrl;\n                image.paddingTop = \"40px\";\n                image.height = \"180px\";\n                image.width = \"100px\";\n                image.paddingBottom = \"40px\";\n                panel.addControl(image);\n            }\n        }\n        if (this._text) {\n            const text = new TextBlock();\n            text.text = this._text;\n            text.color = \"white\";\n            text.height = \"30px\";\n            text.fontSize = 24;\n            panel.addControl(text);\n        }\n        if (this._frontPlate) {\n            this.content = panel;\n        }\n    }\n    // Mesh association\n    _createNode(scene) {\n        this._backPlate = CreateBox(this.name + \"BackMesh\", {\n            width: 1.0,\n            height: 1.0,\n            depth: 0.08,\n        }, scene);\n        this._frontPlate = CreateBox(this.name + \"FrontMesh\", {\n            width: 1.0,\n            height: 1.0,\n            depth: 0.08,\n        }, scene);\n        this._frontPlate.parent = this._backPlate;\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\n        this._frontPlate.isPickable = false;\n        this._frontPlate.setEnabled(false);\n        this._textPlate = super._createNode(scene);\n        this._textPlate.parent = this._backPlate;\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\n        this._textPlate.isPickable = false;\n        return this._backPlate;\n    }\n    _applyFacade(facadeTexture) {\n        this._plateMaterial.emissiveTexture = facadeTexture;\n        this._plateMaterial.opacityTexture = facadeTexture;\n    }\n    _createBackMaterial(mesh) {\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\n        this._backMaterial.renderHoverLight = true;\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\n            if (pickedPoint) {\n                this._backMaterial.hoverPosition = pickedPoint;\n                this._backMaterial.hoverColor.a = 1.0;\n            }\n            else {\n                this._backMaterial.hoverColor.a = 0;\n            }\n        });\n    }\n    _createFrontMaterial(mesh) {\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\n        this._frontMaterial.alpha = 0.5; // Additive\n        this._frontMaterial.renderBorders = true;\n    }\n    _createPlateMaterial(mesh) {\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\n        this._plateMaterial.specularColor = Color3.Black();\n    }\n    _affectMaterial(mesh) {\n        // Back\n        if (this._shareMaterials) {\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\n                this._createBackMaterial(mesh);\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\n            }\n            else {\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"];\n            }\n            // Front\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\n                this._createFrontMaterial(mesh);\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\n            }\n            else {\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"];\n            }\n        }\n        else {\n            this._createBackMaterial(mesh);\n            this._createFrontMaterial(mesh);\n        }\n        this._createPlateMaterial(mesh);\n        this._backPlate.material = this._backMaterial;\n        this._frontPlate.material = this._frontMaterial;\n        this._textPlate.material = this._plateMaterial;\n        this._rebuildContent();\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose(); // will dispose main mesh ie. back plate\n        this._disposeTooltip();\n        if (!this.shareMaterials) {\n            this._backMaterial.dispose();\n            this._frontMaterial.dispose();\n            this._plateMaterial.dispose();\n            if (this._pickedPointObserver) {\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n                this._pickedPointObserver = null;\n            }\n        }\n    }\n}\n//# sourceMappingURL=holographicButton.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"fluentButtonPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform bool _Relative_Width_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool Enable_Fade;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool _Use_Blob_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Holo_Edge_Fragment_B35(\rvec4 Edges,\rfloat Edge_Width,\rout float NotEdge)\r{\rvec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));\rvec2 df=fwidth(c)*Edge_Width;\rvec2 g=clamp(c/df,0.0,1.0);\rNotEdge=g.x*g.y;\r}\rvoid Blob_Fragment_B39(\rvec2 UV,\rvec3 Blob_Info,\rsampler2D Blob_Texture,\rout vec4 Blob_Color)\r{\rfloat k=dot(UV,UV);\rBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\r}\rvec2 FilterStep(vec2 Edge,vec2 X)\r{\rvec2 dX=max(fwidth(X),vec2(0.00001,0.00001));\rreturn clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);\r}\rvoid Wireframe_Fragment_B59(\rvec3 Widths,\rvec2 UV,\rfloat Proximity,\rvec4 Edge_Color,\rout vec4 Wireframe)\r{\rvec2 c=min(UV,vec2(1.0,1.0)-UV);\rvec2 g=FilterStep(Widths.xy*0.5,c); \rWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;\r}\rvoid Proximity_B53(\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Proximity_Max_Intensity,\rfloat Proximity_Near_Radius,\rvec3 Position,\rvec3 Show_Selection,\rvec4 Extra1,\rfloat Dist_To_Face,\rfloat Intensity,\rout float Proximity)\r{\rvec2 delta1=Extra1.xy;\rvec2 delta2=Extra1.zw;\rfloat d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);\rProximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;\r}\rvoid To_XYZ_B46(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid main()\r{\rfloat NotEdge_Q35;\r#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\r#else\nNotEdge_Q35=1.0;\r#endif\nvec4 Blob_Color_Q39;\rfloat k=dot(vUV,vUV);\rvec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);\rvec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));\rBlob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));\rfloat Is_Quad_Q24;\rIs_Quad_Q24=vNormal.z;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rfloat X_Q46;\rfloat Y_Q46;\rfloat Z_Q46;\rTo_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);\rfloat Proximity_Q53;\rProximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);\rvec4 Wireframe_Q59;\rWireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);\rvec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);\rvec4 Result_Q22;\rResult_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));\rvec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;\rvec4 Out_Color=Final_Color_Q37;\rfloat Clip_Threshold=0.0;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonPixelShader = { name, shader };\n//# sourceMappingURL=fluentButton.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"fluentButtonVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\rattribute vec4 color;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool _Enable_Fade_;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvoid Blob_Vertex_B47(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rvec4 Vx_Color,\rvec2 UV,\rvec3 Face_Center,\rvec2 Face_Size,\rvec2 In_UV,\rfloat Blob_Fade_Length,\rfloat Selection_Fade,\rfloat Selection_Fade_Size,\rfloat Inner_Fade,\rvec3 Active_Face_Center,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rfloat Blob_Enabled,\rout vec3 Out_Position,\rout vec2 Out_UV,\rout vec3 Blob_Info)\r{\rfloat blobSize,fadeIn;\rvec3 Hit_Position;\rBlob_Info=vec3(0.0,0.0,0.0);\rfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal);\rHit_Position=Blob_Position-Hit_Distance*Normal;\rfloat absD=abs(Hit_Distance);\rfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\rfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\rfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\rblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\rBlob_Info.x=lerpVal*0.5+0.5;\rBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\rBlob_Info.x*=(1.0-Blob_Pulse);\rvec3 delta=Hit_Position-Face_Center;\rvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\rvec2 quadUVin=2.0*UV-1.0; \rvec2 blobXY=blobCenterXY+quadUVin*blobSize;\rvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\rvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\rvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\rOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\rOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\r}\rvec2 ProjectProximity(\rvec3 blobPosition,\rvec3 position,\rvec3 center,\rvec3 dir,\rvec3 xdir,\rvec3 ydir,\rout float vdistance\r)\r{\rvec3 delta=blobPosition-position;\rvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\rvdistance=abs(dot(delta,dir));\rreturn xy;\r}\rvoid Proximity_Vertex_B66(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rvec3 Position,\rfloat Proximity_Far_Distance,\rfloat Relative_Scale,\rfloat Proximity_Anisotropy,\rvec3 Up,\rout vec4 Extra1,\rout float Distance_To_Face,\rout float Intensity)\r{\rvec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));\rvec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);\rfloat distz1,distz2;\rExtra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;\rExtra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;\rDistance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);\rIntensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);\r}\rvoid Holo_Edge_Vertex_B44(\rvec3 Incident,\rvec3 Normal,\rvec2 UV,\rvec3 Tangent,\rvec3 Bitangent,\rbool Smooth_Active_Face,\rfloat Active,\rout vec4 Holo_Edges)\r{\rfloat NdotI=dot(Incident,Normal);\rvec2 flip=(UV-vec2(0.5,0.5));\rfloat udot=dot(Incident,Tangent)*flip.x*NdotI;\rfloat uval=1.0-float(udot>0.0);\rfloat vdot=-dot(Incident,Bitangent)*flip.y*NdotI;\rfloat vval=1.0-float(vdot>0.0);\rfloat Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));\ruval=mix(uval,max(1.0,uval),Smooth_And_Active); \rvval=mix(vval,max(1.0,vval),Smooth_And_Active);\rHolo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));\r}\rvoid Object_To_World_Pos_B13(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Choose_Blob_B38(\rvec4 Vx_Color,\rvec3 Position1,\rvec3 Position2,\rbool Blob_Enable_1,\rbool Blob_Enable_2,\rfloat Near_Size_1,\rfloat Near_Size_2,\rfloat Blob_Inner_Fade_1,\rfloat Blob_Inner_Fade_2,\rfloat Blob_Pulse_1,\rfloat Blob_Pulse_2,\rfloat Blob_Fade_1,\rfloat Blob_Fade_2,\rout vec3 Position,\rout float Near_Size,\rout float Inner_Fade,\rout float Blob_Enable,\rout float Fade,\rout float Pulse)\r{\rPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\rfloat b1=float(Blob_Enable_1);\rfloat b2=float(Blob_Enable_2);\rBlob_Enable=b1+(b2-b1)*Vx_Color.g;\rPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\rFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\rNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\rInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\r}\rvoid Wireframe_Vertex_B51(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Edge_Width,\rvec2 Face_Size,\rout vec3 Wire_Vx_Pos,\rout vec2 UV,\rout vec2 Widths)\r{\rWidths.xy=Edge_Width/Face_Size;\rfloat x=dot(Position,Tangent);\rfloat y=dot(Position,Bitangent);\rfloat dx=0.5-abs(x);\rfloat newx=(0.5-dx*Widths.x*2.0)*sign(x);\rfloat dy=0.5-abs(y);\rfloat newy=(0.5-dy*Widths.y*2.0)*sign(y);\rWire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;\rUV.x=dot(Wire_Vx_Pos,Tangent)+0.5;\rUV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;\r}\rvec2 ramp2(vec2 start,vec2 end,vec2 x)\r{\rreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\r}\rfloat computeSelection(\rvec3 blobPosition,\rvec3 normal,\rvec3 tangent,\rvec3 bitangent,\rvec3 faceCenter,\rvec2 faceSize,\rfloat selectionFuzz,\rfloat farDistance,\rfloat fadeLength\r)\r{\rvec3 delta=blobPosition-faceCenter;\rfloat absD=abs(dot(delta,normal));\rfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\rvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\rvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\rvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\rreturn selectPulse.x*selectPulse.y*fadeIn;\r}\rvoid Selection_Vertex_B48(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Face_Center,\rvec2 Face_Size,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Selection_Fuzz,\rfloat Selected,\rfloat Far_Distance,\rfloat Fade_Length,\rvec3 Active_Face_Dir,\rout float Show_Selection)\r{\rfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat Active=max(0.0,dot(Active_Face_Dir,Normal));\rShow_Selection=mix(max(select1,select2),1.0,Selected)*Active;\r}\rvoid Proximity_Visibility_B54(\rfloat Selection,\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Input_Width,\rfloat Proximity_Far_Distance,\rfloat Proximity_Radius,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rout float Width)\r{\rvec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;\rfloat boxMaxSize=length(boxEdges);\rfloat d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);\rvec3 blob1=Proximity_Center-d1*Active_Face_Dir;\rfloat d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);\rvec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;\rvec3 delta1=blob1-Active_Face_Center;\rvec3 delta2=blob2-Active_Face_Center;\rfloat dist1=dot(delta1,delta1);\rfloat dist2=dot(delta2,delta2);\rfloat nearestProxDist=sqrt(min(dist1,dist2));\rWidth=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\r}\rvoid Object_To_World_Dir_B67(\rvec3 Dir_Object,\rout vec3 Dir_World)\r{\rDir_World=(world*vec4(Dir_Object,0.0)).xyz;\r}\rvoid main()\r{\rvec3 Active_Face_Center_Q49;\rActive_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rvec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);\rfloat Relative_Scale_Q57;\r#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\r#else\nRelative_Scale_Q57=1.0;\r#endif\nvec3 Tangent_World_Q30;\rTangent_World_Q30=(world*vec4(tangent,0.0)).xyz;\rvec3 Binormal_World_Q31;\rBinormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rvec3 Normal_World_Q60;\rNormal_World_Q60=(world*vec4(normal,0.0)).xyz;\rvec3 Result_Q18=0.5*normal;\rvec3 Dir_World_Q67;\rObject_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);\rfloat Product_Q56=_Edge_Width_*Relative_Scale_Q57;\rvec3 Normal_World_N_Q29=normalize(Normal_World_Q60);\rvec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);\rvec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);\rvec3 Position_Q38;\rfloat Near_Size_Q38;\rfloat Inner_Fade_Q38;\rfloat Blob_Enable_Q38;\rfloat Fade_Q38;\rfloat Pulse_Q38;\rChoose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);\rvec3 Face_Center_Q33;\rFace_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;\rvec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));\rfloat Show_Selection_Q48;\rSelection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);\rvec3 Normalized_Q72=normalize(Dir_World_Q67);\rfloat Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));\rfloat Width_Q54;\rProximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);\rvec3 Wire_Vx_Pos_Q51;\rvec2 UV_Q51;\rvec2 Widths_Q51;\rWireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);\rvec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);\rvec3 Pos_World_Q13;\rObject_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);\rvec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);\rvec3 Out_Position_Q47;\rvec2 Out_UV_Q47;\rvec3 Blob_Info_Q47;\rBlob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);\rvec4 Extra1_Q66;\rfloat Distance_To_Face_Q66;\rfloat Intensity_Q66;\rProximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);\rvec4 Holo_Edges_Q44;\rHolo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);\rvec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);\rvec3 Position=Out_Position_Q47;\rvec2 UV=Out_UV_Q47;\rvec3 Tangent=Blob_Info_Q47;\rvec3 Binormal=Vec3_Q19;\rvec3 Normal=Vec3_Q27;\rvec4 Extra1=Extra1_Q66;\rvec4 Color=Holo_Edges_Q44;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonVertexShader = { name, shader };\n//# sourceMappingURL=fluentButton.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color3, Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/fluentButton.fragment.js\";\nimport \"./shaders/fluentButton.vertex.js\";\n/** @internal */\nclass FluentButtonMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.RELATIVE_WIDTH = true;\n        this.ENABLE_FADE = true;\n        this._needNormals = true;\n        this._needUVs = true;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render square buttons with fluent design\n * @since 5.0.0\n */\nexport class FluentButtonMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the width of the glowing edge, relative to the scale of the button.\n         * (Default is 4% of the height).\n         */\n        this.edgeWidth = 0.04;\n        /**\n         * Gets or sets the color of the glowing edge.\n         */\n        this.edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\n        /**\n         * Gets or sets the maximum intensity of the proximity light.\n         */\n        this.proximityMaxIntensity = 0.45;\n        /**\n         * Gets or sets the maximum distance for the proximity light (Default is 16mm).\n         */\n        this.proximityFarDistance = 0.16;\n        /**\n         * Gets or sets the radius of the proximity light when near to the surface.\n         */\n        this.proximityNearRadius = 1.5;\n        /**\n         * Gets or sets the anisotropy of the proximity light.\n         */\n        this.proximityAnisotropy = 1;\n        /**\n         * Gets or sets the amount of fuzzing in the selection focus.\n         */\n        this.selectionFuzz = 0.5;\n        /**\n         * Gets or sets an override value to display the button as selected.\n         */\n        this.selected = 0;\n        /**\n         * Gets or sets a value to manually fade the blob size.\n         */\n        this.selectionFade = 0;\n        /**\n         * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\n         */\n        this.selectionFadeSize = 0.3;\n        /**\n         * Gets or sets the distance from the button the cursor should be for the button\n         * to appear selected (Default is 8cm).\n         */\n        this.selectedDistance = 0.08;\n        /**\n         * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\n         */\n        this.selectedFadeLength = 0.08;\n        /**\n         * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\n         */\n        this.blobIntensity = 0.5;\n        /**\n         * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\n         */\n        this.blobFarSize = 0.05;\n        /**\n         * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\n         */\n        this.blobNearDistance = 0;\n        /**\n         * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\n         */\n        this.blobFarDistance = 0.08;\n        /**\n         * The distance over which the blob intensity fades from full to none (Default is 8cm).\n         */\n        this.blobFadeLength = 0.08;\n        /**\n         * Gets or sets whether the blob corresponding to the left index finger is enabled.\n         */\n        this.leftBlobEnable = true;\n        /**\n         * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\n         */\n        this.leftBlobNearSize = 0.025;\n        /**\n         * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\n         */\n        this.leftBlobPulse = 0;\n        /**\n         * Gets or sets the fade factor on the left blob.\n         */\n        this.leftBlobFade = 1;\n        /**\n         * Gets or sets the inner fade on the left blob;\n         */\n        this.leftBlobInnerFade = 0.01;\n        /**\n         * Gets or sets whether the blob corresponding to the right index finger is enabled.\n         */\n        this.rightBlobEnable = true;\n        /**\n         * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\n         */\n        this.rightBlobNearSize = 0.025;\n        /**\n         * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\n         */\n        this.rightBlobPulse = 0;\n        /**\n         * Gets or sets the fade factor on the right blob.\n         */\n        this.rightBlobFade = 1;\n        /**\n         * Gets or sets the inner fade on the right blob;\n         */\n        this.rightBlobInnerFade = 0.01;\n        /**\n         * Gets or sets the direction of the active face before the world transform is applied.\n         * This should almost always be set to -z.\n         */\n        this.activeFaceDir = new Vector3(0, 0, -1);\n        /**\n         * Gets or sets the button's up direction before the world transform is applied.\n         * This should almost always be set to +y.\n         */\n        this.activeFaceUp = new Vector3(0, 1, 0);\n        /**\n         * Gets or sets whether the edge fade effect is enabled.\n         */\n        this.enableFade = true;\n        /**\n         * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\n         */\n        this.fadeWidth = 1.5;\n        /**\n         * Gets or sets whether the active face is smoothly interpolated.\n         */\n        this.smoothActiveFace = true;\n        /**\n         * Gets or sets whether the frame of the fluent button model is visible.\n         * This is usually only enabled for debugging purposes.\n         */\n        this.showFrame = false;\n        /**\n         * Gets or sets whether the blob color texture is used for the proximity\n         * light effect. This is usually only disabled for debugging purposes.\n         */\n        this.useBlobTexture = true;\n        /**\n         * Gets or sets the world-space position of the tip of the left index finger.\n         */\n        this.globalLeftIndexTipPosition = Vector3.Zero();\n        /**\n         * Gets or sets the world-space position of the tip of the right index finger.\n         */\n        this.globalRightIndexTipPosition = Vector3.Zero();\n        this.alphaMode = Constants.ALPHA_ADD;\n        this.disableDepthWrite = true;\n        this.backFaceCulling = false;\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n    }\n    needAlphaBlending() {\n        return true;\n    }\n    needAlphaTesting() {\n        return true;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"fluentButton\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Edge_Width_\",\n                \"_Edge_Color_\",\n                \"_Relative_Width_\",\n                \"_Proximity_Max_Intensity_\",\n                \"_Proximity_Far_Distance_\",\n                \"_Proximity_Near_Radius_\",\n                \"_Proximity_Anisotropy_\",\n                \"_Selection_Fuzz_\",\n                \"_Selected_\",\n                \"_Selection_Fade_\",\n                \"_Selection_Fade_Size_\",\n                \"_Selected_Distance_\",\n                \"_Selected_Fade_Length_\",\n                \"_Blob_Enable_\",\n                \"_Blob_Position_\",\n                \"_Blob_Intensity_\",\n                \"_Blob_Near_Size_\",\n                \"_Blob_Far_Size_\",\n                \"_Blob_Near_Distance_\",\n                \"_Blob_Far_Distance_\",\n                \"_Blob_Fade_Length_\",\n                \"_Blob_Inner_Fade_\",\n                \"_Blob_Pulse_\",\n                \"_Blob_Fade_\",\n                \"_Blob_Texture_\",\n                \"_Blob_Enable_2_\",\n                \"_Blob_Position_2_\",\n                \"_Blob_Near_Size_2_\",\n                \"_Blob_Inner_Fade_2_\",\n                \"_Blob_Pulse_2_\",\n                \"_Blob_Fade_2_\",\n                \"_Active_Face_Dir_\",\n                \"_Active_Face_Up_\",\n                \"_Enable_Fade_\",\n                \"_Fade_Width_\",\n                \"_Smooth_Active_Face_\",\n                \"_Show_Frame_\",\n                \"_Use_Blob_Texture_\",\n                \"Use_Global_Left_Index\",\n                \"Use_Global_Right_Index\",\n                \"Global_Left_Index_Tip_Position\",\n                \"Global_Right_Index_Tip_Position\",\n                \"Global_Left_Thumb_Tip_Position\",\n                \"Global_Right_Thumb_Tip_Position\",\n                \"Global_Left_Index_Tip_Proximity\",\n                \"Global_Right_Index_Tip_Proximity\",\n            ];\n            const samplers = [\"_Blob_Texture_\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines, this._materialContext);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n        // \"Blob Texture\"\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\n        // \"Wireframe\"\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\n        //define _Relative_Width_ true;\n        // \"Proximity\"\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\n        // \"Selection\"\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\n        // \"Blob\"\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\n        // \"Blob 2\"\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\n        // \"Active Face\"\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\n        // \"Hololens Edge Fade\"\n        //define _Enable_Fade_ true;\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\n        // \"Debug\"\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\n        // Global inputs\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0));\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0));\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"FluentButtonMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n/**\n * URL pointing to the texture used to define the coloring for the fluent blob effect.\n */\nFluentButtonMaterial.BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"edgeWidth\", void 0);\n__decorate([\n    serializeAsColor4()\n], FluentButtonMaterial.prototype, \"edgeColor\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"proximityMaxIntensity\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"proximityFarDistance\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"proximityNearRadius\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"proximityAnisotropy\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selectionFuzz\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selected\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selectionFade\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selectionFadeSize\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selectedDistance\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"selectedFadeLength\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"leftBlobEnable\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"leftBlobNearSize\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"leftBlobPulse\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"leftBlobFade\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"leftBlobInnerFade\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"rightBlobEnable\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"rightBlobNearSize\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"rightBlobPulse\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"rightBlobFade\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"rightBlobInnerFade\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentButtonMaterial.prototype, \"activeFaceDir\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentButtonMaterial.prototype, \"activeFaceUp\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"enableFade\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"fadeWidth\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"smoothActiveFace\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"showFrame\", void 0);\n__decorate([\n    serialize()\n], FluentButtonMaterial.prototype, \"useBlobTexture\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentButtonMaterial.prototype, \"globalLeftIndexTipPosition\", void 0);\n__decorate([\n    serializeAsVector3()\n], FluentButtonMaterial.prototype, \"globalRightIndexTipPosition\", void 0);\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\n//# sourceMappingURL=fluentButtonMaterial.js.map","// Assumptions: absolute position of button mesh is inside the mesh\nimport { Vector3, TmpVectors } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Button3D } from \"./button3D.js\";\n/**\n * Class used to create a touchable button in 3D\n */\nexport class TouchButton3D extends Button3D {\n    /**\n     * Creates a new touchable button\n     * @param name defines the control name\n     * @param collisionMesh mesh to track collisions with\n     */\n    constructor(name, collisionMesh) {\n        super(name);\n        this._isNearPressed = false;\n        this._interactionSurfaceHeight = 0;\n        this._isToggleButton = false;\n        this._toggleState = false;\n        this._toggleButtonCallback = () => {\n            this._onToggle(!this._toggleState);\n        };\n        /**\n         * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true\n         */\n        this.onToggleObservable = new Observable();\n        this.collidableFrontDirection = Vector3.Zero();\n        if (collisionMesh) {\n            this.collisionMesh = collisionMesh;\n        }\n    }\n    /**\n     * Whether the current interaction is caused by near interaction or not\n     */\n    get isActiveNearInteraction() {\n        return this._isNearPressed;\n    }\n    /**\n     * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction\n     * @param frontWorldDir the forward direction of the button\n     */\n    set collidableFrontDirection(frontWorldDir) {\n        this._collidableFrontDirection = frontWorldDir.normalize();\n        if (this._collisionMesh) {\n            const invert = TmpVectors.Matrix[0];\n            invert.copyFrom(this._collisionMesh.getWorldMatrix());\n            invert.invert();\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);\n            this._collidableFrontDirection.normalize();\n        }\n    }\n    /**\n     * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'\n     */\n    get collidableFrontDirection() {\n        if (this._collisionMesh) {\n            // Update the front direction to reflect any rotations of the collision mesh\n            const transformedDirection = TmpVectors.Vector3[0];\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);\n            return transformedDirection.normalize();\n        }\n        return this._collidableFrontDirection;\n    }\n    /**\n     * Sets the mesh used for testing input collision\n     * @param collisionMesh the new collision mesh for the button\n     */\n    set collisionMesh(collisionMesh) {\n        var _a;\n        // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability\n        if (this._collisionMesh) {\n            this._collisionMesh.isNearPickable = false;\n            if ((_a = this._collisionMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) {\n                this._collisionMesh.reservedDataStore.GUI3D = {};\n            }\n            this._collisionMesh.getChildMeshes().forEach((mesh) => {\n                var _a;\n                mesh.isNearPickable = false;\n                if ((_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) {\n                    mesh.reservedDataStore.GUI3D = {};\n                }\n            });\n        }\n        this._collisionMesh = collisionMesh;\n        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;\n        this._collisionMesh.isNearPickable = true;\n        this._collisionMesh.getChildMeshes().forEach((mesh) => {\n            this._injectGUI3DReservedDataStore(mesh).control = this;\n            mesh.isNearPickable = true;\n        });\n        this.collidableFrontDirection = collisionMesh.forward;\n    }\n    /**\n     * Setter for if this TouchButton3D should be treated as a toggle button\n     * @param value If this TouchHolographicButton should act like a toggle button\n     */\n    set isToggleButton(value) {\n        if (value === this._isToggleButton) {\n            return;\n        }\n        this._isToggleButton = value;\n        if (value) {\n            this.onPointerUpObservable.add(this._toggleButtonCallback);\n        }\n        else {\n            this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\n            // Safety check, reset the button if it's toggled on but no longer a toggle button\n            if (this._toggleState) {\n                this._onToggle(false);\n            }\n        }\n    }\n    get isToggleButton() {\n        return this._isToggleButton;\n    }\n    /**\n     * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true\n     * @param newState The new state to set the TouchHolographicButton's toggle state to\n     */\n    set isToggled(newState) {\n        if (this._isToggleButton && this._toggleState !== newState) {\n            this._onToggle(newState);\n        }\n    }\n    get isToggled() {\n        return this._toggleState;\n    }\n    _onToggle(newState) {\n        this._toggleState = newState;\n        this.onToggleObservable.notifyObservers(newState);\n    }\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\n    _isInteractionInFrontOfButton(collidablePos) {\n        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;\n    }\n    /**\n     * Get the height of the touchPoint from the collidable part of the button\n     * @param touchPoint the point to compare to the button, in absolute position\n     * @returns the depth of the touch point into the front of the button\n     */\n    getPressDepth(touchPoint) {\n        if (!this._isNearPressed) {\n            return 0;\n        }\n        const interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());\n        return this._interactionSurfaceHeight - interactionHeight;\n    }\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\n    _getInteractionHeight(interactionPos, basePos) {\n        const frontDir = this.collidableFrontDirection;\n        if (frontDir.length() === 0) {\n            // The button has no front, just return the distance to the base\n            return Vector3.Distance(interactionPos, basePos);\n        }\n        const d = Vector3.Dot(basePos, frontDir);\n        const abc = Vector3.Dot(interactionPos, frontDir);\n        return abc - d;\n    }\n    /**\n     * @internal\n     */\n    _generatePointerEventType(providedType, nearMeshPosition, activeInteractionCount) {\n        if (providedType === PointerEventTypes.POINTERDOWN || providedType === PointerEventTypes.POINTERMOVE) {\n            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {\n                // Near interaction mesh is behind the button, don't send a pointer down\n                return PointerEventTypes.POINTERMOVE;\n            }\n            else {\n                this._isNearPressed = true;\n                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());\n            }\n        }\n        if (providedType === PointerEventTypes.POINTERUP) {\n            if (activeInteractionCount == 0) {\n                // We get the release for the down we swallowed earlier, swallow as well\n                return PointerEventTypes.POINTERMOVE;\n            }\n            else {\n                this._isNearPressed = false;\n            }\n        }\n        return providedType;\n    }\n    _getTypeName() {\n        return \"TouchButton3D\";\n    }\n    // Mesh association\n    _createNode(scene) {\n        return super._createNode(scene);\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose();\n        // Clean up toggle observables\n        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\n        this.onToggleObservable.clear();\n        if (this._collisionMesh) {\n            this._collisionMesh.dispose();\n        }\n    }\n}\n//# sourceMappingURL=touchButton3D.js.map","import { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { FadeInOutBehavior } from \"@babylonjs/core/Behaviors/Meshes/fadeInOutBehavior.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial.js\";\nimport { StackPanel } from \"../../2D/controls/stackPanel.js\";\nimport { Image } from \"../../2D/controls/image.js\";\nimport { TextBlock } from \"../../2D/controls/textBlock.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { TouchButton3D } from \"./touchButton3D.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { DomManagement } from \"@babylonjs/core/Misc/domManagement.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\n/**\n * Class used to create a holographic button in 3D\n * @since 5.0.0\n */\nexport class TouchHolographicButton extends TouchButton3D {\n    _disposeTooltip() {\n        this._tooltipFade = null;\n        if (this._tooltipTextBlock) {\n            this._tooltipTextBlock.dispose();\n        }\n        if (this._tooltipTexture) {\n            this._tooltipTexture.dispose();\n        }\n        if (this._tooltipMesh) {\n            this._tooltipMesh.dispose();\n        }\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\n    }\n    /**\n     * Rendering ground id of all the mesh in the button\n     */\n    set renderingGroupId(id) {\n        this._backPlate.renderingGroupId = id;\n        this._textPlate.renderingGroupId = id;\n        this._frontPlate.renderingGroupId = id;\n        if (this._tooltipMesh) {\n            this._tooltipMesh.renderingGroupId = id;\n        }\n    }\n    get renderingGroupId() {\n        return this._backPlate.renderingGroupId;\n    }\n    /**\n     * Gets the mesh used to render this control\n     */\n    get mesh() {\n        return this._backPlate;\n    }\n    /**\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\n     */\n    set tooltipText(text) {\n        if (!text) {\n            this._disposeTooltip();\n            return;\n        }\n        if (!this._tooltipFade) {\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\n            // Create tooltip with mesh and text\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\n            tooltipBackground.material = mat;\n            tooltipBackground.isPickable = false;\n            this._tooltipMesh.addChild(tooltipBackground);\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\n            this._tooltipMesh.scaling.y = 1 / 3;\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\n            this._tooltipMesh.isPickable = false;\n            this._tooltipMesh.parent = this._backPlate;\n            // Create text texture for the tooltip\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\n            this._tooltipTextBlock = new TextBlock();\n            this._tooltipTextBlock.scaleY = 3;\n            this._tooltipTextBlock.color = \"white\";\n            this._tooltipTextBlock.fontSize = 130;\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\n            // Add hover action to tooltip\n            this._tooltipFade = new FadeInOutBehavior();\n            this._tooltipFade.delay = 500;\n            this._tooltipMesh.addBehavior(this._tooltipFade);\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\n                if (this._tooltipFade) {\n                    this._tooltipFade.fadeIn(true);\n                }\n            });\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\n                if (this._tooltipFade) {\n                    this._tooltipFade.fadeIn(false);\n                }\n            });\n        }\n        if (this._tooltipTextBlock) {\n            this._tooltipTextBlock.text = text;\n        }\n    }\n    get tooltipText() {\n        if (this._tooltipTextBlock) {\n            return this._tooltipTextBlock.text;\n        }\n        return null;\n    }\n    /**\n     * Gets or sets text for the button\n     */\n    get text() {\n        return this._text;\n    }\n    set text(value) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._rebuildContent();\n    }\n    /**\n     * Gets or sets the image url for the button\n     */\n    get imageUrl() {\n        return this._imageUrl;\n    }\n    set imageUrl(value) {\n        if (this._imageUrl === value) {\n            return;\n        }\n        this._imageUrl = value;\n        this._rebuildContent();\n    }\n    /**\n     * Gets the back material used by this button\n     */\n    get backMaterial() {\n        return this._backMaterial;\n    }\n    /**\n     * Gets the front material used by this button\n     */\n    get frontMaterial() {\n        return this._frontMaterial;\n    }\n    /**\n     * Gets the plate material used by this button\n     */\n    get plateMaterial() {\n        return this._plateMaterial;\n    }\n    /**\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\n     */\n    get shareMaterials() {\n        return this._shareMaterials;\n    }\n    /**\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\n     */\n    set isBackplateVisible(isVisible) {\n        if (this.mesh && !!this._backMaterial) {\n            if (isVisible && !this._isBackplateVisible) {\n                this._backPlate.visibility = 1;\n            }\n            else if (!isVisible && this._isBackplateVisible) {\n                this._backPlate.visibility = 0;\n            }\n        }\n        this._isBackplateVisible = isVisible;\n    }\n    /**\n     * Creates a new button\n     * @param name defines the control name\n     * @param shareMaterials\n     */\n    constructor(name, shareMaterials = true) {\n        super(name);\n        this._shareMaterials = true;\n        this._isBackplateVisible = true;\n        this._frontPlateDepth = 0.5;\n        this._backPlateDepth = 0.04;\n        this._backplateColor = new Color3(0.08, 0.15, 0.55);\n        this._backplateToggledColor = new Color3(0.25, 0.4, 0.95);\n        this._shareMaterials = shareMaterials;\n        this.pointerEnterAnimation = () => {\n            this._frontMaterial.leftBlobEnable = true;\n            this._frontMaterial.rightBlobEnable = true;\n        };\n        this.pointerOutAnimation = () => {\n            this._frontMaterial.leftBlobEnable = false;\n            this._frontMaterial.rightBlobEnable = false;\n        };\n        this.pointerDownAnimation = () => {\n            if (this._frontPlate && !this.isActiveNearInteraction) {\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\n            }\n        };\n        this.pointerUpAnimation = () => {\n            if (this._frontPlate) {\n                this._frontPlate.scaling.z = this._frontPlateDepth;\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\n            }\n        };\n        this.onPointerMoveObservable.add((position) => {\n            if (this._frontPlate && this.isActiveNearInteraction) {\n                const scale = Vector3.Zero();\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\n                    this._frontPlate.scaling.z = interactionHeight;\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\n                }\n            }\n        });\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition) => {\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\n        });\n    }\n    _getTypeName() {\n        return \"TouchHolographicButton\";\n    }\n    _rebuildContent() {\n        this._disposeFacadeTexture();\n        const panel = new StackPanel();\n        panel.isVertical = true;\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\n            if (this._imageUrl) {\n                const image = new Image();\n                image.source = this._imageUrl;\n                image.paddingTop = \"40px\";\n                image.height = \"180px\";\n                image.width = \"100px\";\n                image.paddingBottom = \"40px\";\n                panel.addControl(image);\n            }\n        }\n        if (this._text) {\n            const text = new TextBlock();\n            text.text = this._text;\n            text.color = \"white\";\n            text.height = \"30px\";\n            text.fontSize = 24;\n            panel.addControl(text);\n        }\n        this.content = panel;\n    }\n    // Mesh association\n    _createNode(scene) {\n        var _a;\n        this.name = (_a = this.name) !== null && _a !== void 0 ? _a : \"TouchHolographicButton\";\n        const collisionMesh = CreateBox(`${this.name}_collisionMesh`, {\n            width: 1.0,\n            height: 1.0,\n            depth: this._frontPlateDepth,\n        }, scene);\n        collisionMesh.isPickable = true;\n        collisionMesh.isNearPickable = true;\n        collisionMesh.visibility = 0;\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\n            const alphaMesh = CreateBox(\"${this.name}_alphaMesh\", {\n                width: 1.0,\n                height: 1.0,\n                depth: 1.0,\n            }, scene);\n            alphaMesh.isPickable = false;\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\n            alphaMesh.material.alpha = 0.15;\n            const importedFrontPlate = result.meshes[1];\n            importedFrontPlate.name = `${this.name}_frontPlate`;\n            importedFrontPlate.isPickable = false;\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\n            alphaMesh.parent = importedFrontPlate;\n            importedFrontPlate.parent = collisionMesh;\n            if (this._frontMaterial) {\n                importedFrontPlate.material = this._frontMaterial;\n            }\n            this._frontPlate = importedFrontPlate;\n        });\n        this._backPlate = CreateBox(`${this.name}_backPlate`, {\n            width: 1.0,\n            height: 1.0,\n            depth: this._backPlateDepth,\n        }, scene);\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\n        this._backPlate.isPickable = false;\n        this._textPlate = super._createNode(scene);\n        this._textPlate.name = `${this.name}_textPlate`;\n        this._textPlate.isPickable = false;\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\n        this._backPlate.addChild(collisionMesh);\n        this._backPlate.addChild(this._textPlate);\n        const tn = new TransformNode(`{this.name}_root`, scene);\n        this._backPlate.setParent(tn);\n        this.collisionMesh = collisionMesh;\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\n        return tn;\n    }\n    _applyFacade(facadeTexture) {\n        this._plateMaterial.emissiveTexture = facadeTexture;\n        this._plateMaterial.opacityTexture = facadeTexture;\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\n    }\n    _createBackMaterial(mesh) {\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\n        this._backMaterial.albedoColor = this._backplateColor;\n        this._backMaterial.renderBorders = true;\n        this._backMaterial.renderHoverLight = false;\n    }\n    _createFrontMaterial(mesh) {\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\n    }\n    _createPlateMaterial(mesh) {\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\n        this._plateMaterial.specularColor = Color3.Black();\n    }\n    _onToggle(newState) {\n        if (this._backMaterial) {\n            if (newState) {\n                this._backMaterial.albedoColor = this._backplateToggledColor;\n            }\n            else {\n                this._backMaterial.albedoColor = this._backplateColor;\n            }\n        }\n        super._onToggle(newState);\n    }\n    _affectMaterial(mesh) {\n        if (this._shareMaterials) {\n            // Back\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\n                this._createBackMaterial(mesh);\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\n            }\n            else {\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"];\n            }\n            // Front\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\n                this._createFrontMaterial(mesh);\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\n            }\n            else {\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"];\n            }\n        }\n        else {\n            this._createBackMaterial(mesh);\n            this._createFrontMaterial(mesh);\n        }\n        this._createPlateMaterial(mesh);\n        this._backPlate.material = this._backMaterial;\n        this._textPlate.material = this._plateMaterial;\n        if (!this._isBackplateVisible) {\n            this._backPlate.visibility = 0;\n        }\n        if (this._frontPlate) {\n            this._frontPlate.material = this._frontMaterial;\n        }\n        this._rebuildContent();\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose(); // will dispose main mesh ie. back plate\n        this._disposeTooltip();\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\n        if (!this.shareMaterials) {\n            this._backMaterial.dispose();\n            this._frontMaterial.dispose();\n            this._plateMaterial.dispose();\n            if (this._pickedPointObserver) {\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n                this._pickedPointObserver = null;\n            }\n        }\n    }\n}\n/**\n * Base Url for the button model.\n */\nTouchHolographicButton.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the button model.\n */\nTouchHolographicButton.MODEL_FILENAME = \"mrtk-fluent-button.glb\";\n//# sourceMappingURL=touchHolographicButton.js.map","import { FollowBehavior } from \"@babylonjs/core/Behaviors/Meshes/followBehavior.js\";\nimport { SixDofDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/sixDofDragBehavior.js\";\nimport { SurfaceMagnetismBehavior } from \"@babylonjs/core/Behaviors/Meshes/surfaceMagnetismBehavior.js\";\n/**\n * Default behavior for 3D UI elements.\n * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior\n * @since 5.0.0\n */\nexport class DefaultBehavior {\n    /**\n     * Instantiates the default behavior\n     */\n    constructor() {\n        /**\n         * Enables the follow behavior\n         */\n        this.followBehaviorEnabled = false;\n        /**\n         * Enables the six DoF drag behavior\n         */\n        this.sixDofDragBehaviorEnabled = true;\n        /**\n         * Enables the surface magnetism behavior\n         */\n        this.surfaceMagnetismBehaviorEnabled = true;\n        this._followBehavior = new FollowBehavior();\n        this._sixDofDragBehavior = new SixDofDragBehavior();\n        this._surfaceMagnetismBehavior = new SurfaceMagnetismBehavior();\n    }\n    /**\n     *  The name of the behavior\n     */\n    get name() {\n        return \"Default\";\n    }\n    /**\n     *  The follow behavior\n     */\n    get followBehavior() {\n        return this._followBehavior;\n    }\n    /**\n     *  The six DoF drag behavior\n     */\n    get sixDofDragBehavior() {\n        return this._sixDofDragBehavior;\n    }\n    /**\n     * The surface magnetism behavior\n     */\n    get surfaceMagnetismBehavior() {\n        return this._surfaceMagnetismBehavior;\n    }\n    /**\n     *  Initializes the behavior\n     */\n    init() { }\n    /**\n     * Attaches the default behavior\n     * @param ownerMesh The top level mesh\n     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh\n     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism\n     */\n    attach(ownerMesh, draggablesMeshes, sceneUnderstandingMeshes) {\n        this._scene = ownerMesh.getScene();\n        this.attachedNode = ownerMesh;\n        this._addObservables();\n        // Since our observables are bound before the child behaviors', ours are called first\n        this._followBehavior.attach(ownerMesh);\n        this._sixDofDragBehavior.attach(ownerMesh);\n        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;\n        this._sixDofDragBehavior.faceCameraOnDragStart = true;\n        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);\n        if (sceneUnderstandingMeshes) {\n            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;\n        }\n        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior\n        this._surfaceMagnetismBehavior.enabled = false;\n    }\n    /**\n     *  Detaches the behavior from the mesh\n     */\n    detach() {\n        this.attachedNode = null;\n        this._removeObservables();\n        this._followBehavior.detach();\n        this._sixDofDragBehavior.detach();\n        this._surfaceMagnetismBehavior.detach();\n    }\n    _addObservables() {\n        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\n            this._followBehavior._enabled = !this._sixDofDragBehavior.isMoving && this.followBehaviorEnabled;\n        });\n        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add((event) => {\n            this._sixDofDragBehavior.disableMovement = this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);\n        });\n    }\n    _removeObservables() {\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);\n    }\n}\n//# sourceMappingURL=defaultBehavior.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"handleVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\runiform vec3 positionOffset;\runiform mat4 worldViewProjection;\runiform float scale;\rvoid main(void) {\rvec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);\rgl_Position=worldViewProjection*vPos;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handleVertexShader = { name, shader };\n//# sourceMappingURL=handle.vertex.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"handlePixelShader\";\nconst shader = `uniform vec3 color;\rvoid main(void) {\rgl_FragColor=vec4(color,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handlePixelShader = { name, shader };\n//# sourceMappingURL=handle.fragment.js.map","import { ShaderMaterial } from \"@babylonjs/core/Materials/shaderMaterial.js\";\nimport { Color3, TmpColors } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport \"./shaders/handle.vertex.js\";\nimport \"./shaders/handle.fragment.js\";\n/**\n * Class used to render gizmo handles with fluent design\n */\nexport class HandleMaterial extends ShaderMaterial {\n    /**\n     * Is the material indicating hovering state\n     */\n    get hover() {\n        return this._hover;\n    }\n    set hover(b) {\n        this._hover = b;\n        this._updateInterpolationTarget();\n    }\n    /**\n     * Is the material indicating drag state\n     */\n    get drag() {\n        return this._drag;\n    }\n    set drag(b) {\n        this._drag = b;\n        this._updateInterpolationTarget();\n    }\n    /**\n     * Creates a handle material\n     * @param name Name of the material\n     * @param scene Scene\n     */\n    constructor(name, scene) {\n        super(name, scene, \"handle\", {\n            attributes: [\"position\"],\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\n            needAlphaBlending: false,\n            needAlphaTesting: false,\n        });\n        this._hover = false;\n        this._drag = false;\n        this._color = new Color3();\n        this._scale = 1;\n        this._lastTick = -1;\n        /**\n         * Length of animation\n         */\n        this.animationLength = 100;\n        /**\n         * Color of the handle when hovered\n         */\n        this.hoverColor = new Color3(0, 0.467, 0.84);\n        /**\n         * Color of the handle when idle\n         */\n        this.baseColor = new Color3(1, 1, 1);\n        /**\n         * Scale of the handle when hovered\n         */\n        this.hoverScale = 0.75;\n        /**\n         * Scale of the handle when idle\n         */\n        this.baseScale = 0.35;\n        /**\n         * Scale of the handle when dragged\n         */\n        this.dragScale = 0.55;\n        /**\n         * @internal\n         */\n        this._positionOffset = Vector3.Zero();\n        this._updateInterpolationTarget();\n        // Register callback for scene after render\n        this._lastTick = Date.now();\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\n            const tick = Date.now();\n            const delta = tick - this._lastTick;\n            const scaleDiff = this._targetScale - this._scale;\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\n            this._color.addToRef(colorDiff, this._color);\n            this.setColor3(\"color\", this._color);\n            this.setFloat(\"scale\", this._scale);\n            this.setVector3(\"positionOffset\", this._positionOffset);\n            this._lastTick = tick;\n        });\n    }\n    _updateInterpolationTarget() {\n        if (this.drag) {\n            this._targetColor = this.hoverColor;\n            this._targetScale = this.dragScale;\n        }\n        else if (this.hover) {\n            this._targetColor = this.hoverColor;\n            this._targetScale = this.hoverScale;\n        }\n        else {\n            this._targetColor = this.baseColor;\n            this._targetScale = this.baseScale;\n        }\n    }\n    /**\n     * Disposes the handle material\n     */\n    dispose() {\n        super.dispose();\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\n    }\n}\n//# sourceMappingURL=handleMaterial.js.map","import { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { HandleMaterial } from \"../materials/handle/handleMaterial.js\";\nimport { BaseSixDofDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/baseSixDofDragBehavior.js\";\n/**\n * State of the handle regarding user interaction\n */\nexport var HandleState;\n(function (HandleState) {\n    /**\n     * Handle is idle\n     */\n    HandleState[HandleState[\"IDLE\"] = 0] = \"IDLE\";\n    /**\n     * Handle is hovered\n     */\n    HandleState[HandleState[\"HOVER\"] = 1] = \"HOVER\";\n    /**\n     * Handle is dragged\n     */\n    HandleState[HandleState[\"DRAG\"] = 2] = \"DRAG\";\n})(HandleState || (HandleState = {}));\n/**\n * Base class for SlateGizmo handles\n */\nexport class GizmoHandle {\n    /**\n     * The current state of the handle\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Returns the gizmo carrying this handle\n     */\n    get gizmo() {\n        return this._gizmo;\n    }\n    /**\n     * Sets hover state\n     */\n    set hover(value) {\n        if (value) {\n            this._state |= HandleState.HOVER;\n        }\n        else {\n            this._state &= ~HandleState.HOVER;\n        }\n        this._updateMaterial();\n    }\n    /**\n     * Sets drag state\n     */\n    set drag(value) {\n        if (value) {\n            this._state |= HandleState.DRAG;\n        }\n        else {\n            this._state &= ~HandleState.DRAG;\n        }\n        this._updateMaterial();\n    }\n    /**\n     * Creates a handle for a SlateGizmo\n     * @param gizmo associated SlateGizmo\n     * @param scene scene\n     */\n    constructor(gizmo, scene) {\n        this._state = HandleState.IDLE;\n        this._materials = [];\n        this._scene = scene;\n        this._gizmo = gizmo;\n        this.node = this.createNode();\n        this.node.reservedDataStore = {\n            handle: this,\n        };\n    }\n    _createMaterial(positionOffset) {\n        const mat = new HandleMaterial(\"handle\", this._scene);\n        if (positionOffset) {\n            mat._positionOffset = positionOffset;\n        }\n        return mat;\n    }\n    _updateMaterial() {\n        const state = this._state;\n        for (const mat of this._materials) {\n            mat.hover = false;\n            mat.drag = false;\n        }\n        if (state & HandleState.DRAG) {\n            for (const mat of this._materials) {\n                mat.drag = true;\n            }\n        }\n        else if (state & HandleState.HOVER) {\n            for (const mat of this._materials) {\n                mat.hover = true;\n            }\n        }\n    }\n    /**\n     * Binds callbacks from dragging interaction\n     * @param dragStartFn Function to call on drag start\n     * @param dragFn Function to call on drag\n     * @param dragEndFn Function to call on drag end\n     */\n    setDragBehavior(dragStartFn, dragFn, dragEndFn) {\n        const dragBehavior = new BaseSixDofDragBehavior();\n        this._dragBehavior = dragBehavior;\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\n        this._dragBehavior.attach(this.node);\n    }\n    /**\n     * Disposes the handle\n     */\n    dispose() {\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\n        this._dragBehavior.detach();\n        for (const material of this._materials) {\n            material.dispose();\n        }\n        this.node.dispose();\n    }\n}\n/**\n * Side handle class that rotates the slate\n */\nexport class SideHandle extends GizmoHandle {\n    /**\n     * Creates the meshes and parent node of the handle\n     * @returns created node\n     */\n    createNode() {\n        // Create a simple vertical rectangle\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\n        const sideNode = new TransformNode(\"side\", this._scene);\n        verticalBox.parent = sideNode;\n        const mat = this._createMaterial();\n        verticalBox.material = mat;\n        verticalBox.isNearGrabbable = true;\n        this._materials.push(mat);\n        return sideNode;\n    }\n}\n/**\n * Corner handle that resizes the slate\n */\nexport class CornerHandle extends GizmoHandle {\n    /**\n     * Creates the meshes and parent node of the handle\n     * @returns created node\n     */\n    createNode() {\n        // Create 2 boxes making a bottom left corner\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\n        const angleNode = new TransformNode(\"angle\", this._scene);\n        horizontalBox.parent = angleNode;\n        verticalBox.parent = angleNode;\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\n        verticalBox.isNearGrabbable = true;\n        horizontalBox.isNearGrabbable = true;\n        this._materials.push(horizontalBox.material);\n        this._materials.push(verticalBox.material);\n        return angleNode;\n    }\n}\n//# sourceMappingURL=gizmoHandle.js.map","import { Gizmo } from \"@babylonjs/core/Gizmos/gizmo.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode.js\";\nimport { PivotTools } from \"@babylonjs/core/Misc/pivotTools.js\";\nimport { CornerHandle, SideHandle } from \"./gizmoHandle.js\";\n/**\n * Gizmo to resize 2D slates\n */\nexport class SlateGizmo extends Gizmo {\n    /**\n     * The slate attached to this gizmo\n     */\n    set attachedSlate(control) {\n        if (control) {\n            this.attachedMesh = control.mesh;\n            this.updateBoundingBox();\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\n                    this._handleHovered.hover = false;\n                    this._handleHovered = null;\n                }\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\n                    const handle = pickedMesh.parent.reservedDataStore.handle;\n                    if (handle.gizmo === this) {\n                        this._handleHovered = handle;\n                        this._handleHovered.hover = true;\n                    }\n                }\n            });\n        }\n        else if (this._attachedSlate) {\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\n        }\n        this._attachedSlate = control;\n    }\n    get attachedSlate() {\n        return this._attachedSlate;\n    }\n    constructor(utilityLayer) {\n        super(utilityLayer);\n        this._boundingDimensions = new Vector3(0, 0, 0);\n        this._renderObserver = null;\n        this._tmpQuaternion = new Quaternion();\n        this._tmpVector = new Vector3(0, 0, 0);\n        // Ordered bl, br, tr, tl\n        this._corners = [];\n        // Ordered left, bottom, right, top\n        this._sides = [];\n        this._boundingBoxGizmo = {\n            min: new Vector3(),\n            max: new Vector3(),\n        };\n        /**\n         * Value we use to offset handles from mesh\n         */\n        this._margin = 0.35;\n        this._handleSize = 0.075;\n        this._attachedSlate = null;\n        this._existingSlateScale = new Vector3();\n        /**\n         * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\n         */\n        this.fixedScreenSize = false;\n        /**\n         * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\n         */\n        this.fixedScreenSizeDistanceFactor = 10;\n        this._createNode();\n        this.updateScale = false;\n        this._renderObserver = this.gizmoLayer.originalScene.onBeforeRenderObservable.add(() => {\n            // Only update the bounding box if scaling has changed\n            if (this.attachedMesh && !this._existingSlateScale.equals(this.attachedMesh.scaling)) {\n                this.updateBoundingBox();\n            }\n        });\n    }\n    _createNode() {\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\n        const masksCorners = [\n            {\n                dimensions: new Vector3(-1, -1, 0),\n                origin: new Vector3(1, 0, 0),\n            },\n            {\n                dimensions: new Vector3(1, -1, 0),\n                origin: new Vector3(0, 0, 0),\n            },\n            {\n                dimensions: new Vector3(1, 1, 0),\n                origin: new Vector3(0, 1, 0),\n            },\n            {\n                dimensions: new Vector3(-1, 1, 0),\n                origin: new Vector3(1, 1, 0),\n            },\n        ];\n        for (let i = 0; i < 4; i++) {\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\n            this._corners.push(corner);\n            corner.node.rotation.z = (Math.PI / 2) * i;\n            corner.node.parent = this._handlesParent;\n            this._assignDragBehaviorCorners(corner, (originStart, dimensionsStart, offset, masks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true), masksCorners[i]);\n        }\n        for (let i = 0; i < 4; i++) {\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\n            this._sides.push(side);\n            side.node.rotation.z = (Math.PI / 2) * i;\n            side.node.parent = this._handlesParent;\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\n        }\n        this._handlesParent.parent = this._rootMesh;\n    }\n    _keepAspectRatio(vector, aspectRatio, invertDiagonal = false) {\n        const axis = TmpVectors.Vector3[0];\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\n        if (invertDiagonal) {\n            axis.y *= -1;\n        }\n        const dot = Vector3.Dot(vector, axis);\n        vector.copyFrom(axis).scaleInPlace(dot);\n    }\n    _clampDimensions(vector, dimensions, mask, keepAspectRatio = false) {\n        const impact = TmpVectors.Vector3[0];\n        impact.copyFrom(vector).multiplyInPlace(mask);\n        const clampedDimensions = TmpVectors.Vector3[1];\n        clampedDimensions.copyFromFloats(Math.max(this._attachedSlate.minDimensions.x, impact.x + dimensions.x), Math.max(this._attachedSlate.minDimensions.y, impact.y + dimensions.y), 0);\n        if (keepAspectRatio) {\n            // Extra logic to ensure the ratio is maintained when the vector has been clamped\n            const ratio = dimensions.x / dimensions.y;\n            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);\n            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);\n        }\n        // Calculating the real impact of vector on clamped dimensions\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\n        vector.x = Math.sign(vector.x) * Math.abs(impact.x);\n        vector.y = Math.sign(vector.y) * Math.abs(impact.y);\n    }\n    _moveHandle(originStart, dimensionsStart, offset, masks, isCorner) {\n        if (!this._attachedSlate) {\n            return;\n        }\n        if (isCorner) {\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\n        }\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\n        const offsetOriginMasked = TmpVectors.Vector3[0];\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\n        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);\n    }\n    _assignDragBehaviorCorners(handle, moveFn, masks) {\n        const dimensionsStart = new Vector3();\n        const originStart = new Vector3();\n        const dragOrigin = new Vector3();\n        const toObjectFrame = new Matrix();\n        const dragPlaneNormal = new Vector3();\n        const projectToRef = (position, normal, origin, ref) => {\n            // Projects on the plane with its normal and origin\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\n            TmpVectors.Vector3[0].addToRef(origin, ref);\n        };\n        const dragStart = (event) => {\n            if (this.attachedSlate && this.attachedMesh) {\n                dimensionsStart.set(this.attachedSlate.dimensions.x, this.attachedSlate.dimensions.y, Epsilon);\n                originStart.copyFrom(this.attachedSlate.origin);\n                dragOrigin.copyFrom(event.position);\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\n                toObjectFrame.invert();\n                this.attachedSlate._followButton.isToggled = false;\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\n                dragPlaneNormal.normalize();\n                if (this._handleHovered) {\n                    this._handleDragged = this._handleHovered;\n                    this._handleDragged.drag = true;\n                }\n            }\n        };\n        const dragging = (event) => {\n            if (this.attachedSlate && this.attachedMesh) {\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\n                this._tmpVector.subtractInPlace(dragOrigin);\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\n                this.attachedSlate._positionElements();\n                this.updateBoundingBox();\n            }\n        };\n        const dragEnd = () => {\n            if (this.attachedSlate && this.attachedNode) {\n                this.attachedSlate._updatePivot();\n                if (this._handleDragged) {\n                    this._handleDragged.drag = false;\n                    this._handleDragged = null;\n                }\n            }\n        };\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\n    }\n    _assignDragBehaviorSides(handle, dragPlaneNormal) {\n        const quaternionOrigin = new Quaternion();\n        const dragOrigin = new Vector3();\n        const directionOrigin = new Vector3();\n        const worldPivot = new Vector3();\n        const worldPlaneNormal = new Vector3();\n        const dragStart = (event) => {\n            if (this.attachedSlate && this.attachedMesh) {\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion);\n                dragOrigin.copyFrom(event.position);\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\n                this.attachedSlate._followButton.isToggled = false;\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\n                worldPlaneNormal.normalize();\n                if (this._handleHovered) {\n                    this._handleDragged = this._handleHovered;\n                    this._handleDragged.drag = true;\n                }\n            }\n        };\n        const dragging = (event) => {\n            if (this.attachedSlate && this.attachedMesh) {\n                this._tmpVector.copyFrom(event.position);\n                this._tmpVector.subtractInPlace(worldPivot);\n                this._tmpVector.normalize();\n                const angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion);\n            }\n        };\n        const dragEnd = () => {\n            if (this.attachedSlate && this.attachedNode) {\n                this.attachedSlate._updatePivot();\n                if (this._handleDragged) {\n                    this._handleDragged.drag = false;\n                    this._handleDragged = null;\n                }\n            }\n        };\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\n    }\n    _attachedNodeChanged(value) {\n        if (value) {\n            this.updateBoundingBox();\n        }\n    }\n    /**\n     * Updates the bounding box information for the gizmo\n     */\n    updateBoundingBox() {\n        if (this.attachedMesh) {\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\n            // Store original parent\n            const originalParent = this.attachedMesh.parent;\n            this.attachedMesh.setParent(null);\n            this._update();\n            // Rotate based on axis\n            if (!this.attachedMesh.rotationQuaternion) {\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\n            }\n            // Store original position and reset mesh to origin before computing the bounding box\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\n            this._tmpVector.copyFrom(this.attachedMesh.position);\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\n            this.attachedMesh.position.set(0, 0, 0);\n            // Update bounding dimensions/positions\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\n            this._boundingBoxGizmo.min = boundingMinMax.min;\n            this._boundingBoxGizmo.max = boundingMinMax.max;\n            // Update handles of the gizmo\n            this._updateHandlesPosition();\n            this._updateHandlesScaling();\n            // Restore position/rotation values\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\n            this.attachedMesh.position.copyFrom(this._tmpVector);\n            PivotTools._RestorePivotPoint(this.attachedMesh);\n            // Restore original parent\n            this.attachedMesh.setParent(originalParent);\n            this.attachedMesh.computeWorldMatrix(true);\n            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);\n        }\n    }\n    _updateHandlesPosition() {\n        const min = this._boundingBoxGizmo.min.clone();\n        const max = this._boundingBoxGizmo.max.clone();\n        const handleScaling = this._corners[0].node.scaling.length();\n        min.x -= this._margin * handleScaling;\n        min.y -= this._margin * handleScaling;\n        max.x += this._margin * handleScaling;\n        max.y += this._margin * handleScaling;\n        const center = min.add(max).scaleInPlace(0.5);\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\n    }\n    _updateHandlesScaling() {\n        if (this._attachedSlate && this._attachedSlate.mesh) {\n            const scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;\n            const scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;\n            const scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;\n            for (let index = 0; index < this._corners.length; index++) {\n                this._corners[index].node.scaling.setAll(scale);\n            }\n            for (let index = 0; index < this._sides.length; index++) {\n                this._sides[index].node.scaling.setAll(scale);\n            }\n        }\n    }\n    _update() {\n        super._update();\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\n            return;\n        }\n        if (this._attachedSlate && this._attachedSlate.mesh) {\n            if (this.fixedScreenSize) {\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\n                const distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\n                for (let i = 0; i < this._corners.length; i++) {\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\n                }\n                for (let i = 0; i < this._sides.length; i++) {\n                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\n                }\n            }\n            this._updateHandlesPosition();\n        }\n    }\n    dispose() {\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\n        // Will dispose rootMesh and all descendants\n        super.dispose();\n        for (const corner of this._corners) {\n            corner.dispose();\n        }\n        for (const side of this._sides) {\n            side.dispose();\n        }\n    }\n}\n//# sourceMappingURL=slateGizmo.js.map","import { ContentDisplay3D } from \"./contentDisplay3D.js\";\nimport { TouchHolographicButton } from \"./touchHolographicButton.js\";\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture.js\";\nimport { Control } from \"../../2D/controls/control.js\";\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock.js\";\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior.js\";\nimport { SlateGizmo } from \"../gizmos/slateGizmo.js\";\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial.js\";\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial.js\";\nimport { PointerDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Vector4 } from \"@babylonjs/core/Maths/math.js\";\nimport { Epsilon } from \"@babylonjs/core/Maths/math.constants.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\nimport { Quaternion, Vector2, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Viewport } from \"@babylonjs/core/Maths/math.viewport.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { CreatePlane } from \"@babylonjs/core/Meshes/Builders/planeBuilder.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { VertexData } from \"@babylonjs/core/Meshes/mesh.vertexData.js\";\n/**\n * Class used to create a holographic slate\n * @since 5.0.0\n */\nexport class HolographicSlate extends ContentDisplay3D {\n    /**\n     * Regroups all mesh behaviors for the slate\n     */\n    get defaultBehavior() {\n        return this._defaultBehavior;\n    }\n    /**\n     * 2D dimensions of the slate\n     */\n    get dimensions() {\n        return this._dimensions;\n    }\n    set dimensions(value) {\n        //clamp, respecting ratios\n        let scale = 1.0;\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\n            const newRatio = value.x / value.y;\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\n            if (minRatio > newRatio) {\n                // We just need to make sure the x-val is greater than the min\n                scale = this.minDimensions.x / value.x;\n            }\n            else {\n                // We just need to make sure the y-val is greater than the min\n                scale = this.minDimensions.y / value.y;\n            }\n        }\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\n        this._updatePivot();\n        this._positionElements();\n    }\n    /**\n     * Height of the title bar component\n     */\n    get titleBarHeight() {\n        return this._titleBarHeight;\n    }\n    set titleBarHeight(value) {\n        this._titleBarHeight = value;\n    }\n    /**\n     * Rendering ground id of all the meshes\n     */\n    set renderingGroupId(id) {\n        this._titleBar.renderingGroupId = id;\n        this._titleBarTitle.renderingGroupId = id;\n        this._contentPlate.renderingGroupId = id;\n        this._backPlate.renderingGroupId = id;\n    }\n    get renderingGroupId() {\n        return this._titleBar.renderingGroupId;\n    }\n    /**\n     * The title text displayed at the top of the slate\n     */\n    set title(title) {\n        this._titleText = title;\n        if (this._titleTextComponent) {\n            this._titleTextComponent.text = title;\n        }\n    }\n    get title() {\n        return this._titleText;\n    }\n    /**\n     * Creates a new slate\n     * @param name defines the control name\n     */\n    constructor(name) {\n        super(name);\n        /**\n         * Margin between title bar and contentplate\n         */\n        this.titleBarMargin = 0.005;\n        /**\n         * Origin in local coordinates (top left corner)\n         */\n        this.origin = new Vector3(0, 0, 0);\n        this._dimensions = new Vector2(21.875, 12.5);\n        this._titleBarHeight = 0.625;\n        this._titleText = \"\";\n        this._contentScaleRatio = 1;\n        /**\n         * Minimum dimensions of the slate\n         */\n        this.minDimensions = new Vector2(15.625, 6.25);\n        /**\n         * Default dimensions of the slate\n         */\n        this.defaultDimensions = this._dimensions.clone();\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\n        this._followButton.isToggleButton = true;\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\n        this._contentViewport = new Viewport(0, 0, 1, 1);\n        this._contentDragBehavior = new PointerDragBehavior({\n            dragPlaneNormal: new Vector3(0, 0, -1),\n        });\n    }\n    /**\n     * Apply the facade texture (created from the content property).\n     * This function can be overloaded by child classes\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\n     */\n    _applyFacade(facadeTexture) {\n        this._contentMaterial.albedoTexture = facadeTexture;\n        this._resetContentPositionAndZoom();\n        this._applyContentViewport();\n        facadeTexture.attachToMesh(this._contentPlate, true);\n    }\n    _addControl(control) {\n        control._host = this._host;\n        if (this._host.utilityLayer) {\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\n        }\n    }\n    _getTypeName() {\n        return \"HolographicSlate\";\n    }\n    /**\n     * @internal\n     */\n    _positionElements() {\n        const followButton = this._followButton;\n        const closeButton = this._closeButton;\n        const titleBar = this._titleBar;\n        const titleBarTitle = this._titleBarTitle;\n        const contentPlate = this._contentPlate;\n        const backPlate = this._backPlate;\n        if (followButton && closeButton && titleBar) {\n            closeButton.scaling.setAll(this.titleBarHeight);\n            followButton.scaling.setAll(this.titleBarHeight);\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\n            titleBarTitle.position\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\n                .addInPlace(this.origin);\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\n            backPlate.position\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\n                .addInPlace(this.origin);\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\n            this._titleTextComponent.host.scaleTo((HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y, HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y);\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\n            this._contentViewport.width = this._contentScaleRatio;\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\n            this._applyContentViewport();\n            if (this._gizmo) {\n                this._gizmo.updateBoundingBox();\n            }\n        }\n    }\n    _applyContentViewport() {\n        var _a;\n        if (((_a = this._contentPlate) === null || _a === void 0 ? void 0 : _a.material) && this._contentPlate.material.albedoTexture) {\n            const tex = this._contentPlate.material.albedoTexture;\n            tex.uScale = this._contentScaleRatio;\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\n            tex.uOffset = this._contentViewport.x;\n            tex.vOffset = this._contentViewport.y;\n        }\n    }\n    _resetContentPositionAndZoom() {\n        this._contentViewport.x = 0;\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\n        this._contentScaleRatio = 1;\n    }\n    /**\n     * @internal\n     */\n    _updatePivot() {\n        if (!this.mesh) {\n            return;\n        }\n        // Update pivot point so it is at the center of geometry\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\n        center.addInPlace(this.origin);\n        center.z = 0;\n        const origin = new Vector3(0, 0, 0);\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\n        this.mesh.setPivotPoint(center);\n        const origin2 = new Vector3(0, 0, 0);\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\n    }\n    // Mesh association\n    _createNode(scene) {\n        const node = new Mesh(\"slate_\" + this.name, scene);\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\n        this._titleBarTitle.parent = node;\n        this._titleBarTitle.isPickable = false;\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this._titleTextComponent.color = \"white\";\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\n        adt.addControl(this._titleTextComponent);\n        if (scene.useRightHandedSystem) {\n            const faceUV = new Vector4(0, 0, 1, 1);\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\n        }\n        else {\n            const faceUV = new Vector4(0, 0, 1, 1);\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\n        }\n        this._titleBar.parent = node;\n        this._titleBar.isNearGrabbable = true;\n        this._contentPlate.parent = node;\n        this._backPlate.parent = node;\n        this._attachContentPlateBehavior();\n        this._addControl(this._followButton);\n        this._addControl(this._closeButton);\n        const followButton = this._followButton;\n        const closeButton = this._closeButton;\n        followButton.node.parent = node;\n        closeButton.node.parent = node;\n        this._positionElements();\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\n        this._followButton.isBackplateVisible = false;\n        this._closeButton.isBackplateVisible = false;\n        this._followButton.onToggleObservable.add((isToggled) => {\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\n            if (this._defaultBehavior.followBehaviorEnabled) {\n                this._defaultBehavior.followBehavior.recenter();\n            }\n        });\n        this._closeButton.onPointerClickObservable.add(() => {\n            this.dispose();\n        });\n        node.rotationQuaternion = Quaternion.Identity();\n        node.isVisible = false;\n        return node;\n    }\n    _attachContentPlateBehavior() {\n        this._contentDragBehavior.attach(this._contentPlate);\n        this._contentDragBehavior.moveAttached = false;\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\n        this._contentDragBehavior.updateDragPlane = false;\n        const origin = new Vector3();\n        const worldDimensions = new Vector3();\n        const upWorld = new Vector3();\n        const rightWorld = new Vector3();\n        const projectedOffset = new Vector2();\n        let startViewport;\n        let worldMatrix;\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\n            if (!this.node) {\n                return;\n            }\n            startViewport = this._contentViewport.clone();\n            worldMatrix = this.node.computeWorldMatrix(true);\n            origin.copyFrom(event.dragPlanePoint);\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\n            upWorld.copyFromFloats(0, 1, 0);\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\n            rightWorld.copyFromFloats(1, 0, 0);\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\n            upWorld.normalize();\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\n            rightWorld.normalize();\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\n        });\n        const offset = new Vector3();\n        this._contentDragBehavior.onDragObservable.add((event) => {\n            offset.copyFrom(event.dragPlanePoint);\n            offset.subtractInPlace(origin);\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\n            // By default, content takes full width available and height is cropped to keep aspect ratio\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\n            this._applyContentViewport();\n        });\n    }\n    _affectMaterial(mesh) {\n        // TODO share materials\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\n        this._contentMaterial.renderBorders = true;\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\n        this._backMaterial.lineWidth = Epsilon;\n        this._backMaterial.radius = 0.005;\n        this._backMaterial.backFaceCulling = true;\n        this._titleBar.material = this._titleBarMaterial;\n        this._contentPlate.material = this._contentMaterial;\n        this._backPlate.material = this._backMaterial;\n        this._resetContent();\n        this._applyContentViewport();\n    }\n    /**\n     * @internal*\n     */\n    _prepareNode(scene) {\n        super._prepareNode(scene);\n        this._gizmo = new SlateGizmo(this._host.utilityLayer);\n        this._gizmo.attachedSlate = this;\n        this._defaultBehavior = new DefaultBehavior();\n        this._defaultBehavior.attach(this.node, [this._titleBar]);\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\n            this._followButton.isToggled = false;\n        });\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\n            this._gizmo.updateBoundingBox();\n        });\n        this._updatePivot();\n        this.resetDefaultAspectAndPose(false);\n    }\n    /**\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\n     */\n    resetDefaultAspectAndPose(resetAspect = true) {\n        if (!this._host || !this._host.utilityLayer || !this.node) {\n            return;\n        }\n        const scene = this._host.utilityLayer.utilityLayerScene;\n        const camera = scene.activeCamera;\n        if (camera) {\n            const worldMatrix = camera.getWorldMatrix();\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\n            this.origin.setAll(0);\n            this._gizmo.updateBoundingBox();\n            const pivot = this.node.getAbsolutePivotPoint();\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\n            if (resetAspect) {\n                this.dimensions = this.defaultDimensions;\n            }\n        }\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        super.dispose();\n        this._titleBarMaterial.dispose();\n        this._contentMaterial.dispose();\n        this._titleBar.dispose();\n        this._titleBarTitle.dispose();\n        this._contentPlate.dispose();\n        this._backPlate.dispose();\n        this._followButton.dispose();\n        this._closeButton.dispose();\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\n        this._defaultBehavior.detach();\n        this._gizmo.dispose();\n        this._contentDragBehavior.detach();\n    }\n}\n/**\n * Base Url for the assets.\n */\nHolographicSlate.ASSETS_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the close icon.\n */\nHolographicSlate.CLOSE_ICON_FILENAME = \"IconClose.png\";\n/**\n * File name for the close icon.\n */\nHolographicSlate.FOLLOW_ICON_FILENAME = \"IconFollowMe.png\";\nHolographicSlate._DEFAULT_TEXT_RESOLUTION_Y = 102.4;\n//# sourceMappingURL=holographicSlate.js.map","import { Button3D } from \"./button3D.js\";\n/**\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\n */\nexport class MeshButton3D extends Button3D {\n    /**\n     * Creates a new 3D button based on a mesh\n     * @param mesh mesh to become a 3D button\n     * @param name defines the control name\n     */\n    constructor(mesh, name) {\n        super(name);\n        this._currentMesh = mesh;\n        /**\n         * Provides a default behavior on hover/out & up/down\n         * Override those function to create your own desired behavior specific to your mesh\n         */\n        this.pointerEnterAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.1);\n        };\n        this.pointerOutAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\n        };\n        this.pointerDownAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(0.95);\n        };\n        this.pointerUpAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\n        };\n    }\n    _getTypeName() {\n        return \"MeshButton3D\";\n    }\n    // Mesh association\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _createNode(scene) {\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\n            this._injectGUI3DReservedDataStore(mesh).control = this;\n        });\n        return this._currentMesh;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _affectMaterial(mesh) { }\n}\n//# sourceMappingURL=meshButton3D.js.map","import { TouchHolographicButton } from \"./touchHolographicButton.js\";\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior.js\";\nimport { TouchHolographicMenu } from \"./touchHolographicMenu.js\";\n/**\n * NearMenu that displays buttons and follows the camera\n * @since 5.0.0\n */\nexport class NearMenu extends TouchHolographicMenu {\n    /**\n     * Regroups all mesh behaviors for the near menu\n     */\n    get defaultBehavior() {\n        return this._defaultBehavior;\n    }\n    /**\n     * Indicates if the near menu is world-pinned\n     */\n    get isPinned() {\n        return this._isPinned;\n    }\n    set isPinned(value) {\n        // Tell the pin button to toggle if this was called manually, for clean state control\n        if (this._pinButton.isToggled !== value) {\n            this._pinButton.isToggled = value;\n            return;\n        }\n        this._isPinned = value;\n        if (value) {\n            this._defaultBehavior.followBehaviorEnabled = false;\n        }\n        else {\n            this._defaultBehavior.followBehaviorEnabled = true;\n        }\n    }\n    _createPinButton(parent) {\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\n        control.parent = this;\n        control._host = this._host;\n        control.isToggleButton = true;\n        control.onToggleObservable.add((newState) => {\n            this.isPinned = newState;\n        });\n        if (this._host.utilityLayer) {\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\n            if (control.node) {\n                control.node.parent = parent;\n            }\n        }\n        return control;\n    }\n    _createNode(scene) {\n        const node = super._createNode(scene);\n        this._pinButton = this._createPinButton(node);\n        this.isPinned = false;\n        this._defaultBehavior.attach(node, [this._backPlate]);\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\n        this._backPlate.isNearGrabbable = true;\n        node.isVisible = false;\n        return node;\n    }\n    _finalProcessing() {\n        super._finalProcessing();\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\n    }\n    /**\n     * Creates a near menu GUI 3D control\n     * @param name name of the near menu\n     */\n    constructor(name) {\n        super(name);\n        this._isPinned = false;\n        this._defaultBehavior = new DefaultBehavior();\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\n            this.isPinned = true;\n        });\n        this.backPlateMargin = 1;\n    }\n    /**\n     * Disposes the near menu\n     */\n    dispose() {\n        super.dispose();\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\n        this._defaultBehavior.detach();\n    }\n}\n/**\n * Base Url for the assets.\n */\nNearMenu._ASSETS_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the close icon.\n */\nNearMenu._PIN_ICON_FILENAME = \"IconPin.png\";\n//# sourceMappingURL=nearMenu.js.map","import { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Container3D } from \"./container3D.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\n/**\n * Class used to create a container panel deployed on the surface of a plane\n */\nexport class PlanePanel extends VolumeBasedPanel {\n    _mapGridNode(control, nodePosition) {\n        const mesh = control.mesh;\n        if (!mesh) {\n            return;\n        }\n        control.position = nodePosition.clone();\n        const target = TmpVectors.Vector3[0];\n        target.copyFrom(nodePosition);\n        switch (this.orientation) {\n            case Container3D.FACEORIGIN_ORIENTATION:\n            case Container3D.FACEFORWARD_ORIENTATION:\n                target.addInPlace(new Vector3(0, 0, 1));\n                mesh.lookAt(target);\n                break;\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\n                target.addInPlace(new Vector3(0, 0, -1));\n                mesh.lookAt(target);\n                break;\n        }\n    }\n}\n//# sourceMappingURL=planePanel.js.map","import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\nimport { Container3D } from \"./container3D.js\";\n/**\n * Class used to create a container panel where items get randomized planar mapping\n */\nexport class ScatterPanel extends VolumeBasedPanel {\n    constructor() {\n        super(...arguments);\n        this._iteration = 100.0;\n    }\n    /**\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\n     */\n    get iteration() {\n        return this._iteration;\n    }\n    set iteration(value) {\n        if (this._iteration === value) {\n            return;\n        }\n        this._iteration = value;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    _mapGridNode(control, nodePosition) {\n        const mesh = control.mesh;\n        const newPos = this._scatterMapping(nodePosition);\n        if (!mesh) {\n            return;\n        }\n        switch (this.orientation) {\n            case Container3D.FACEORIGIN_ORIENTATION:\n            case Container3D.FACEFORWARD_ORIENTATION:\n                mesh.lookAt(new Vector3(0, 0, 1));\n                break;\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\n                mesh.lookAt(new Vector3(0, 0, -1));\n                break;\n        }\n        control.position = newPos;\n    }\n    _scatterMapping(source) {\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\n        return source;\n    }\n    _finalProcessing() {\n        const meshes = [];\n        for (const child of this._children) {\n            if (!child.mesh) {\n                continue;\n            }\n            meshes.push(child.mesh);\n        }\n        for (let count = 0; count < this._iteration; count++) {\n            meshes.sort((a, b) => {\n                const distance1 = a.position.lengthSquared();\n                const distance2 = b.position.lengthSquared();\n                if (distance1 < distance2) {\n                    return 1;\n                }\n                else if (distance1 > distance2) {\n                    return -1;\n                }\n                return 0;\n            });\n            const radiusPaddingSquared = Math.pow(this.margin, 2.0);\n            const cellSize = Math.max(this._cellWidth, this._cellHeight);\n            const difference2D = TmpVectors.Vector2[0];\n            const difference = TmpVectors.Vector3[0];\n            for (let i = 0; i < meshes.length - 1; i++) {\n                for (let j = i + 1; j < meshes.length; j++) {\n                    if (i != j) {\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\n                        // Ignore Z axis\n                        difference2D.x = difference.x;\n                        difference2D.y = difference.y;\n                        const combinedRadius = cellSize;\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\n                        const minSeparation = Math.min(distance, radiusPaddingSquared);\n                        distance -= minSeparation;\n                        if (distance < Math.pow(combinedRadius, 2.0)) {\n                            difference2D.normalize();\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\n                            meshes[j].position.addInPlace(difference);\n                            meshes[i].position.subtractInPlace(difference);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=scatterPanel.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlSliderBarPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B30(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B42(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B59(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B121(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B79(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B77(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B67(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B68(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B91(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B73(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B122(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B51(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B50(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B65(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B74(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B64(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B108(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B114(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B75(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B110(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B132(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q30;\r#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\r#else\nBlob_Color_Q30=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q38=normalize(vNormal);\rvec3 Normalized_Q71=normalize(vTangent);\rvec4 Color_Q83;\r#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\r#else\nColor_Q83=vec4(0,0,0,0);\r#endif\nfloat X_Q90;\rfloat Y_Q90;\rfloat Z_Q90;\rfloat W_Q90;\rX_Q90=vExtra1.x;\rY_Q90=vExtra1.y;\rZ_Q90=vExtra1.z;\rW_Q90=vExtra1.w;\rvec4 Linear_Q43;\rLinear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q43.a=_Sky_Color_.a;\rvec4 Linear_Q44;\rLinear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q44.a=_Horizon_Color_.a;\rvec4 Linear_Q45;\rLinear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q45.a=_Ground_Color_.a;\rvec3 Left_Index_Q64;\rvec3 Right_Index_Q64;\rvec3 Left_Index_Middle_Q64;\rvec3 Right_Index_Middle_Q64;\rFinger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);\rvec4 Linear_Q46;\rLinear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q46.a=_Albedo_.a;\rvec3 Normalized_Q107=normalize(vBinormal);\rvec3 Incident_Q70=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q79;\rBulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);\rfloat Result_Q77;\rSSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);\rvec4 Result_Q91;\rScale_Color_B91(Color_Q83,X_Q90,Result_Q91);\rfloat Transmit_Q122;\rfloat Reflect_Q122;\rFast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);\rfloat Product_Q125=Y_Q90*Y_Q90;\rvec3 NearP_Q65;\rvec3 NearQ_Q65;\rfloat Distance_Q65;\rMin_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);\rvec3 NearP_Q63;\rvec3 NearQ_Q63;\rfloat Distance_Q63;\rMin_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);\rvec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);\rvec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);\rvec4 Result_Q132;\rRim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);\rfloat Dot_Q72=dot(Incident_Q70, Normalized_Q71);\rfloat MaxAB_Q123=max(Reflect_Q122,Product_Q125);\rfloat NotInShadow_Q67;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\r#else\nNotInShadow_Q67=1.0;\r#endif\nfloat NotInShadow_Q68;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\r#else\nNotInShadow_Q68=1.0;\r#endif\nvec4 Reflected_Color_Q51;\rvec4 Indirect_Diffuse_Q51;\r#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\r#else\nReflected_Color_Q51=vec4(0,0,0,1);\rIndirect_Diffuse_Q51=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q50;\rvec4 Indirect_Color_Q50;\r#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\r#else\nReflected_Color_Q50=vec4(0,0,0,1);\rIndirect_Color_Q50=vec4(0,0,0,1);\r#endif\nfloat Hue_Q75;\rfloat Saturation_Q75;\rfloat Value_Q75;\rfloat Alpha_Q75;\rvec3 HSV_Q75;\rTo_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);\rfloat Hue_Q127;\rfloat Saturation_Q127;\rfloat Value_Q127;\rfloat Alpha_Q127;\rvec3 HSV_Q127;\rTo_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);\rfloat Result_Q110;\rCode_B110(Dot_Q72,Result_Q110);\rfloat AbsA_Q76=abs(Result_Q110);\rfloat MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);\rvec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;\rvec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;\rvec3 HSV_Out_Q126;\rVaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);\rfloat Out_Q114;\rRemap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);\rfloat Product_Q106;\rProduct_Q106=AbsA_Q76*_Hue_Shift_;\rfloat X_Q128;\rfloat Y_Q128;\rfloat Z_Q128;\rTo_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);\rvec2 Vec2_Q112=vec2(Out_Q114,0.5);\rvec3 HSV_Out_Q108;\rVaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);\rvec4 Color_Q129;\rFrom_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);\rvec4 Color_Q111;\r#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\r#else\nColor_Q111=vec4(0,0,0,0);\r#endif\nfloat X_Q74;\rfloat Y_Q74;\rfloat Z_Q74;\rTo_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);\rvec4 Result_Q131=_Rim_Intensity_*Color_Q129;\rvec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;\rvec4 Color_Q73;\rFrom_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);\rvec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;\rvec4 Result_Q121;\rFragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);\rvec4 Result_Q59;\rScale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);\rvec4 sRGB_Q42;\rFastLinearTosRGB_B42(Result_Q59,sRGB_Q42);\rvec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;\rvec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;\rvec4 Out_Color=Result_Q40;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarPixelShader = { name, shader };\n//# sourceMappingURL=mrdlSliderBar.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlSliderBarVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B12(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B32(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B23(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B24(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B130(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B60(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B78(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B93(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B28(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B69(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B36(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B37(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B105(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q85;\rXY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q27;\rvec3 Tangent_World_N_Q27;\rfloat Tangent_Length_Q27;\rTangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q27=length(Tangent_World_Q27);\rTangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;\rvec3 Normal_World_Q60;\rvec3 Normal_World_N_Q60;\rfloat Normal_Length_Q60;\rObject_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);\rfloat X_Q78;\rfloat Y_Q78;\rfloat Z_Q78;\rTo_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);\rvec3 Nrm_World_Q26;\rNrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q28;\rvec3 Binormal_World_N_Q28;\rfloat Binormal_Length_Q28;\rObject_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);\rfloat Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;\rfloat Result_Q69;\rPick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);\rfloat Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;\rbool Not_Greater_Than_Q37;\rbool Greater_Than_Q37;\rGreater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);\rvec4 Linear_Q101;\rLinear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q101.a=_Left_Color_.a;\rvec4 Linear_Q102;\rLinear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q102.a=_Right_Color_.a;\rvec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;\rvec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);\rfloat Result_Q36;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);\rfloat Result_Q94;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);\rvec3 New_P_Q130;\rvec2 New_UV_Q130;\rfloat Radial_Gradient_Q130;\rvec3 Radial_Dir_Q130;\rvec3 New_Normal_Q130;\rMove_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);\rfloat X_Q98;\rfloat Y_Q98;\rX_Q98=New_UV_Q130.x;\rY_Q98=New_UV_Q130.y;\rvec3 Pos_World_Q12;\rObject_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);\rvec3 Nrm_World_Q32;\rObject_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);\rvec4 Blob_Info_Q23;\r#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\r#else\nBlob_Info_Q23=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q24;\r#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\r#else\nBlob_Info_Q24=vec4(0,0,0,0);\r#endif\nfloat Out_Q105;\rRemap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);\rfloat X_Q86;\rfloat Y_Q86;\rfloat Z_Q86;\rTo_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);\rvec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);\rfloat Minus_F_Q87=-Z_Q86;\rfloat R_Q99;\rfloat G_Q99;\rfloat B_Q99;\rfloat A_Q99;\rR_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;\rfloat ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);\rfloat Result_Q93;\rConditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);\rvec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);\rvec3 Position=Pos_World_Q12;\rvec3 Normal=Nrm_World_Q32;\rvec2 UV=XY_Q85;\rvec3 Tangent=Tangent_World_N_Q27;\rvec3 Binormal=Difference_Q61;\rvec4 Color=Out_Color_Q34;\rvec4 Extra1=Vec4_Q89;\rvec4 Extra2=Blob_Info_Q23;\rvec4 Extra3=Blob_Info_Q24;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarVertexShader = { name, shader };\n//# sourceMappingURL=mrdlSliderBar.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector2, Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/mrdlSliderBar.fragment.js\";\nimport \"./shaders/mrdlSliderBar.vertex.js\";\n/** @internal */\nclass MRDLSliderBarMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        /*\n            \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\n        */\n        this.SKY_ENABLED = true;\n        this.BLOB_ENABLE_2 = true;\n        this.IRIDESCENCE_ENABLED = true;\n        this._needNormals = true;\n        this._needUVs = true;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render Slider Bar material with MRDL\n */\nexport class MRDLSliderBarMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the corner Radius on the slider bar.\n         */\n        this.radius = 0.6;\n        /**\n         * Gets or sets the Bevel Front on the slider bar.\n         */\n        this.bevelFront = 0.6;\n        /**\n         * Gets or sets the Bevel Front Stretch on the slider bar.\n         */\n        this.bevelFrontStretch = 0.077;\n        /**\n         * Gets or sets the Bevel Back on the slider bar.\n         */\n        this.bevelBack = 0;\n        /**\n         * Gets or sets the Bevel Back Stretch on the slider bar.\n         */\n        this.bevelBackStretch = 0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopRight = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomRight = 1.0;\n        /**\n         * Gets or sets whether Bulge is enabled.\n         * Default is false.\n         */\n        this.bulgeEnabled = false;\n        /**\n         * Gets or sets the Bulge Height.\n         */\n        this.bulgeHeight = -0.323;\n        /**\n         * Gets or sets the Bulge Radius.\n         */\n        this.bulgeRadius = 0.73;\n        /**\n         * Gets or sets the Sun Intensity.\n         */\n        this.sunIntensity = 1.102;\n        /**\n         * Gets or sets the Sun Theta.\n         */\n        this.sunTheta = 0.76;\n        /**\n         * Gets or sets the Sun Phi.\n         */\n        this.sunPhi = 0.526;\n        /**\n         * Gets or sets the Indirect Diffuse.\n         */\n        this.indirectDiffuse = 0.658;\n        /**\n         * Gets or sets the base albedo.\n         */\n        this.albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the Specular value.\n         */\n        this.specular = 0;\n        /**\n         * Gets or sets the Shininess value.\n         */\n        this.shininess = 10;\n        /**\n         * Gets or sets the Sharpness value.\n         */\n        this.sharpness = 0;\n        /**\n         * Gets or sets the Subsurface value.\n         */\n        this.subsurface = 0;\n        /**\n         * Gets or sets the left gradient color.\n         */\n        this.leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the right gradient color.\n         */\n        this.rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the reflection value.\n         */\n        this.reflection = 0.749;\n        /**\n         * Gets or sets the front reflect value.\n         */\n        this.frontReflect = 0;\n        /**\n         * Gets or sets the edge reflect value.\n         */\n        this.edgeReflect = 0.09;\n        /**\n         * Gets or sets the power value.\n         */\n        this.power = 8.13;\n        /**\n         * Gets or sets the sky color.\n         */\n        this.skyColor = new Color4(0.0117647, 0.964706, 0.996078, 1);\n        /**\n         * Gets or sets the horizon color.\n         */\n        this.horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\n        /**\n         * Gets or sets the ground color.\n         */\n        this.groundColor = new Color4(0, 0.254902, 0.996078, 1);\n        /**\n         * Gets or sets the horizon power value.\n         */\n        this.horizonPower = 1;\n        /**\n         * Gets or sets the finger occlusion width value.\n         */\n        this.width = 0.02;\n        /**\n         * Gets or sets the finger occlusion fuzz value.\n         */\n        this.fuzz = 0.5;\n        /**\n         * Gets or sets the minimum finger occlusion fuzz value.\n         */\n        this.minFuzz = 0.001;\n        /**\n         * Gets or sets the finger occlusion clip fade value.\n         */\n        this.clipFade = 0.01;\n        /**\n         * Gets or sets the hue shift value.\n         */\n        this.hueShift = 0;\n        /**\n         * Gets or sets the saturation shift value.\n         */\n        this.saturationShift = 0;\n        /**\n         * Gets or sets the value shift.\n         */\n        this.valueShift = 0;\n        /**\n         * Gets or sets the position of the hover glow effect.\n         */\n        this.blobPosition = new Vector3(0, 0, 0.1);\n        /**\n         * Gets or sets the intensity of the hover glow effect.\n         */\n        this.blobIntensity = 0.5;\n        /**\n         * Gets or sets the near size of the hover glow effect.\n         */\n        this.blobNearSize = 0.01;\n        /**\n         * Gets or sets the far size of the hover glow effect.\n         */\n        this.blobFarSize = 0.03;\n        /**\n         * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\n         */\n        this.blobNearDistance = 0;\n        /**\n         * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\n         */\n        this.blobFarDistance = 0.08;\n        /**\n         * Gets or sets the length of the hover glow effect fade.\n         */\n        this.blobFadeLength = 0.576;\n        /**\n         * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\n         */\n        this.blobPulse = 0;\n        /**\n         * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\n         */\n        this.blobFade = 1;\n        /**\n         * Gets or sets the position of the hover glow effect.\n         */\n        this.blobPosition2 = new Vector3(0.2, 0, 0.1);\n        /**\n         * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\n         */\n        this.blobNearSize2 = 0.01;\n        /**\n         * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\n         */\n        this.blobPulse2 = 0;\n        /**\n         * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\n         */\n        this.blobFade2 = 1;\n        /**\n         * Gets or sets the texture of the hover glow effect.\n         */\n        this.blobTexture = new Texture(\"\", this.getScene());\n        /**\n         * Gets or sets the finger position for left index.\n         */\n        this.leftIndexPosition = new Vector3(0, 0, 1);\n        /**\n         * Gets or sets the finger position for right index.\n         */\n        this.rightIndexPosition = new Vector3(-1, -1, -1);\n        /**\n         * Gets or sets the finger position for left index middle position.\n         */\n        this.leftIndexMiddlePosition = new Vector3(0, 0, 0);\n        /**\n         * Gets or sets the finger position for right index middle position.\n         */\n        this.rightIndexMiddlePosition = new Vector3(0, 0, 0);\n        /**\n         * Gets or sets the Decal Scle for XY.\n         */\n        this.decalScaleXY = new Vector2(1.5, 1.5);\n        /**\n         * Gets or sets decalFrontOnly\n         * Default is true\n         */\n        this.decalFrontOnly = true;\n        /**\n         * Gets or sets the Rim Light intensity.\n         */\n        this.rimIntensity = 0.287;\n        /**\n         * Gets or sets the Rim Light hue shift value.\n         */\n        this.rimHueShift = 0;\n        /**\n         * Gets or sets the Rim Light saturation shift value.\n         */\n        this.rimSaturationShift = 0;\n        /**\n         * Gets or sets the Rim Light value shift.\n         */\n        this.rimValueShift = -1;\n        /**\n         * Gets or sets the intensity of the iridescence effect.\n         */\n        this.iridescenceIntensity = 0;\n        /**\n         * @internal\n         */\n        this.useGlobalLeftIndex = 1.0;\n        /**\n         * @internal\n         */\n        this.useGlobalRightIndex = 1.0;\n        /**\n         * @internal\n         */\n        this.globalLeftIndexTipProximity = 0.0;\n        /**\n         * @internal\n         */\n        this.globalRightIndexTipProximity = 0.0;\n        /**\n         * @internal\n         */\n        this.globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        /**\n         * @internal\n         */\n        this.globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        /**\n         * @internal\n         */\n        this.globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        this.alphaMode = Constants.ALPHA_DISABLE;\n        this.backFaceCulling = false;\n        this._blueGradientTexture = new Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n        this._decalTexture = new Texture(\"\", this.getScene());\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\n    }\n    needAlphaBlending() {\n        return false;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"mrdlSliderBar\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Radius_\",\n                \"_Bevel_Front_\",\n                \"_Bevel_Front_Stretch_\",\n                \"_Bevel_Back_\",\n                \"_Bevel_Back_Stretch_\",\n                \"_Radius_Top_Left_\",\n                \"_Radius_Top_Right_\",\n                \"_Radius_Bottom_Left_\",\n                \"_Radius_Bottom_Right_\",\n                \"_Bulge_Enabled_\",\n                \"_Bulge_Height_\",\n                \"_Bulge_Radius_\",\n                \"_Sun_Intensity_\",\n                \"_Sun_Theta_\",\n                \"_Sun_Phi_\",\n                \"_Indirect_Diffuse_\",\n                \"_Albedo_\",\n                \"_Specular_\",\n                \"_Shininess_\",\n                \"_Sharpness_\",\n                \"_Subsurface_\",\n                \"_Left_Color_\",\n                \"_Right_Color_\",\n                \"_Reflection_\",\n                \"_Front_Reflect_\",\n                \"_Edge_Reflect_\",\n                \"_Power_\",\n                \"_Sky_Color_\",\n                \"_Horizon_Color_\",\n                \"_Ground_Color_\",\n                \"_Horizon_Power_\",\n                \"_Reflection_Map_\",\n                \"_Indirect_Environment_\",\n                \"_Width_\",\n                \"_Fuzz_\",\n                \"_Min_Fuzz_\",\n                \"_Clip_Fade_\",\n                \"_Hue_Shift_\",\n                \"_Saturation_Shift_\",\n                \"_Value_Shift_\",\n                \"_Blob_Position_\",\n                \"_Blob_Intensity_\",\n                \"_Blob_Near_Size_\",\n                \"_Blob_Far_Size_\",\n                \"_Blob_Near_Distance_\",\n                \"_Blob_Far_Distance_\",\n                \"_Blob_Fade_Length_\",\n                \"_Blob_Pulse_\",\n                \"_Blob_Fade_\",\n                \"_Blob_Texture_\",\n                \"_Blob_Position_2_\",\n                \"_Blob_Near_Size_2_\",\n                \"_Blob_Pulse_2_\",\n                \"_Blob_Fade_2_\",\n                \"_Left_Index_Pos_\",\n                \"_Right_Index_Pos_\",\n                \"_Left_Index_Middle_Pos_\",\n                \"_Right_Index_Middle_Pos_\",\n                \"_Decal_\",\n                \"_Decal_Scale_XY_\",\n                \"_Decal_Front_Only_\",\n                \"_Rim_Intensity_\",\n                \"_Rim_Texture_\",\n                \"_Rim_Hue_Shift_\",\n                \"_Rim_Saturation_Shift_\",\n                \"_Rim_Value_Shift_\",\n                \"_Iridescence_Intensity_\",\n                \"_Iridescence_Texture_\",\n                \"Use_Global_Left_Index\",\n                \"Use_Global_Right_Index\",\n                \"Global_Left_Index_Tip_Position\",\n                \"Global_Right_Index_Tip_Position\",\n                \"Global_Left_Thumb_Tip_Position\",\n                \"Global_Right_Thumb_Tip_Position\",\n                \"Global_Left_Index_Middle_Position;\",\n                \"Global_Right_Index_Middle_Position\",\n                \"Global_Left_Index_Tip_Proximity\",\n                \"Global_Right_Index_Tip_Proximity\",\n            ];\n            const samplers = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines, this._materialContext);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera.position);\n        // \"Round Rect\"\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\n        // \"Radii Multipliers\"\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\n        // \"Bulge\"\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\n        // \"Sun\"\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\n        // \"Diffuse And Specular\"\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\n        // \"Gradient\"\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\n        // \"Reflection\"\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\n        this._activeEffect.setFloat(\"_Power_\", this.power);\n        // \"Sky Environment\"\n        //define SKY_ENABLED true;\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\n        // \"Mapped Environment\"\n        //define ENV_ENABLE false;\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\n        // \"FingerOcclusion\"\n        //define OCCLUSION_ENABLED false;\n        this._activeEffect.setFloat(\"_Width_\", this.width);\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\n        // \"View Based Color Shift\"\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\n        // \"Blob\"\n        //define BLOB_ENABLE false;\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\n        // \"Blob Texture\"\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\n        // \"Blob 2\"\n        //define BLOB_ENABLE_2 true;\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\n        // \"Finger Positions\"\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\n        // \"Decal Texture\"\n        //define DECAL_ENABLE false;\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\n        // \"Rim Light\"\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\n        // \"Iridescence\"\n        //define IRIDESCENCE_ENABLED true;\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\n        // Global inputs\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n        this._reflectionMapTexture.dispose();\n        this._indirectEnvTexture.dispose();\n        this._blueGradientTexture.dispose();\n        this._decalTexture.dispose();\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new MRDLSliderBarMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.MRDLSliderBarMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"MRDLSliderBarMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new MRDLSliderBarMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n/**\n * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\n */\nMRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bevelFront\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bevelFrontStretch\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bevelBack\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bevelBackStretch\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"radiusTopLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"radiusTopRight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"radiusBottomLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"radiusBottomRight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bulgeEnabled\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bulgeHeight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"bulgeRadius\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"sunIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"sunTheta\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"sunPhi\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"indirectDiffuse\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"albedo\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"specular\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"shininess\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"sharpness\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"subsurface\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"leftGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rightGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"reflection\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"frontReflect\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"edgeReflect\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"power\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"skyColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"horizonColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"groundColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"horizonPower\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"width\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"fuzz\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"minFuzz\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"clipFade\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"hueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"saturationShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"valueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobNearSize\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobPulse\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobFade\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobPosition2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobNearSize2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobPulse2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobFade2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"blobTexture\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"leftIndexPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rightIndexPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"leftIndexMiddlePosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rightIndexMiddlePosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"decalScaleXY\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"decalFrontOnly\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rimIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rimHueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rimSaturationShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"rimValueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderBarMaterial.prototype, \"iridescenceIntensity\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLSliderBarMaterial\", MRDLSliderBarMaterial);\n//# sourceMappingURL=mrdlSliderBarMaterial.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlSliderThumbPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B180(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B192(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B209(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B271(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B229(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B227(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B217(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B218(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B241(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B223(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B272(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B201(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B200(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B215(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B224(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B214(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B258(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B264(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B225(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B260(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B282(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q180;\r#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\r#else\nBlob_Color_Q180=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q188=normalize(vNormal);\rvec3 Normalized_Q221=normalize(vTangent);\rvec4 Color_Q233;\r#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\r#else\nColor_Q233=vec4(0,0,0,0);\r#endif\nfloat X_Q240;\rfloat Y_Q240;\rfloat Z_Q240;\rfloat W_Q240;\rX_Q240=vExtra1.x;\rY_Q240=vExtra1.y;\rZ_Q240=vExtra1.z;\rW_Q240=vExtra1.w;\rvec4 Linear_Q193;\rLinear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q193.a=_Sky_Color_.a;\rvec4 Linear_Q194;\rLinear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q194.a=_Horizon_Color_.a;\rvec4 Linear_Q195;\rLinear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q195.a=_Ground_Color_.a;\rvec3 Left_Index_Q214;\rvec3 Right_Index_Q214;\rvec3 Left_Index_Middle_Q214;\rvec3 Right_Index_Middle_Q214;\rFinger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);\rvec4 Linear_Q196;\rLinear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q196.a=_Albedo_.a;\rvec3 Normalized_Q257=normalize(vBinormal);\rvec3 Incident_Q220=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q229;\rBulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);\rfloat Result_Q227;\rSSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);\rvec4 Result_Q241;\rScale_Color_B241(Color_Q233,X_Q240,Result_Q241);\rfloat Transmit_Q272;\rfloat Reflect_Q272;\rFast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);\rfloat Product_Q275=Y_Q240*Y_Q240;\rvec3 NearP_Q215;\rvec3 NearQ_Q215;\rfloat Distance_Q215;\rMin_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);\rvec3 NearP_Q213;\rvec3 NearQ_Q213;\rfloat Distance_Q213;\rMin_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);\rvec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);\rvec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);\rvec4 Result_Q282;\rRim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);\rfloat Dot_Q222=dot(Incident_Q220, Normalized_Q221);\rfloat MaxAB_Q273=max(Reflect_Q272,Product_Q275);\rfloat NotInShadow_Q217;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\r#else\nNotInShadow_Q217=1.0;\r#endif\nfloat NotInShadow_Q218;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\r#else\nNotInShadow_Q218=1.0;\r#endif\nvec4 Reflected_Color_Q201;\rvec4 Indirect_Diffuse_Q201;\r#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\r#else\nReflected_Color_Q201=vec4(0,0,0,1);\rIndirect_Diffuse_Q201=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q200;\rvec4 Indirect_Color_Q200;\r#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\r#else\nReflected_Color_Q200=vec4(0,0,0,1);\rIndirect_Color_Q200=vec4(0,0,0,1);\r#endif\nfloat Hue_Q225;\rfloat Saturation_Q225;\rfloat Value_Q225;\rfloat Alpha_Q225;\rvec3 HSV_Q225;\rTo_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);\rfloat Hue_Q277;\rfloat Saturation_Q277;\rfloat Value_Q277;\rfloat Alpha_Q277;\rvec3 HSV_Q277;\rTo_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);\rfloat Result_Q260;\rCode_B260(Dot_Q222,Result_Q260);\rfloat AbsA_Q226=abs(Result_Q260);\rfloat MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);\rvec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;\rvec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;\rvec3 HSV_Out_Q276;\rVaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);\rfloat Out_Q264;\rRemap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);\rfloat Product_Q256;\rProduct_Q256=AbsA_Q226*_Hue_Shift_;\rfloat X_Q278;\rfloat Y_Q278;\rfloat Z_Q278;\rTo_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);\rvec2 Vec2_Q262=vec2(Out_Q264,0.5);\rvec3 HSV_Out_Q258;\rVaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);\rvec4 Color_Q279;\rFrom_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);\rvec4 Color_Q261;\r#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\r#else\nColor_Q261=vec4(0,0,0,0);\r#endif\nfloat X_Q224;\rfloat Y_Q224;\rfloat Z_Q224;\rTo_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);\rvec4 Result_Q281=_Rim_Intensity_*Color_Q279;\rvec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;\rvec4 Color_Q223;\rFrom_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);\rvec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;\rvec4 Result_Q271;\rFragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);\rvec4 Result_Q209;\rScale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);\rvec4 sRGB_Q192;\rFastLinearTosRGB_B192(Result_Q209,sRGB_Q192);\rvec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;\rvec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;\rvec4 Out_Color=Result_Q190;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbPixelShader = { name, shader };\n//# sourceMappingURL=mrdlSliderThumb.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlSliderThumbVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B162(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B182(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B173(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B174(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B280(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B210(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B228(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B243(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B178(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B219(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B186(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B187(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B255(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q235;\rXY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q177;\rvec3 Tangent_World_N_Q177;\rfloat Tangent_Length_Q177;\rTangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q177=length(Tangent_World_Q177);\rTangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;\rvec3 Normal_World_Q210;\rvec3 Normal_World_N_Q210;\rfloat Normal_Length_Q210;\rObject_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);\rfloat X_Q228;\rfloat Y_Q228;\rfloat Z_Q228;\rTo_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);\rvec3 Nrm_World_Q176;\rNrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q178;\rvec3 Binormal_World_N_Q178;\rfloat Binormal_Length_Q178;\rObject_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);\rfloat Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;\rfloat Result_Q219;\rPick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);\rfloat Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;\rbool Not_Greater_Than_Q187;\rbool Greater_Than_Q187;\rGreater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);\rvec4 Linear_Q251;\rLinear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q251.a=_Left_Color_.a;\rvec4 Linear_Q252;\rLinear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q252.a=_Right_Color_.a;\rvec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;\rvec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);\rfloat Result_Q186;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);\rfloat Result_Q244;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);\rvec3 New_P_Q280;\rvec2 New_UV_Q280;\rfloat Radial_Gradient_Q280;\rvec3 Radial_Dir_Q280;\rvec3 New_Normal_Q280;\rMove_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);\rfloat X_Q248;\rfloat Y_Q248;\rX_Q248=New_UV_Q280.x;\rY_Q248=New_UV_Q280.y;\rvec3 Pos_World_Q162;\rObject_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);\rvec3 Nrm_World_Q182;\rObject_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);\rvec4 Blob_Info_Q173;\r#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\r#else\nBlob_Info_Q173=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q174;\r#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\r#else\nBlob_Info_Q174=vec4(0,0,0,0);\r#endif\nfloat Out_Q255;\rRemap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);\rfloat X_Q236;\rfloat Y_Q236;\rfloat Z_Q236;\rTo_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);\rvec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);\rfloat Minus_F_Q237=-Z_Q236;\rfloat R_Q249;\rfloat G_Q249;\rfloat B_Q249;\rfloat A_Q249;\rR_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;\rfloat ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);\rfloat Result_Q243;\rConditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);\rvec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);\rvec3 Position=Pos_World_Q162;\rvec3 Normal=Nrm_World_Q182;\rvec2 UV=XY_Q235;\rvec3 Tangent=Tangent_World_N_Q177;\rvec3 Binormal=Difference_Q211;\rvec4 Color=Out_Color_Q184;\rvec4 Extra1=Vec4_Q239;\rvec4 Extra2=Blob_Info_Q173;\rvec4 Extra3=Blob_Info_Q174;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbVertexShader = { name, shader };\n//# sourceMappingURL=mrdlSliderThumb.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector2, Vector3, Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/mrdlSliderThumb.fragment.js\";\nimport \"./shaders/mrdlSliderThumb.vertex.js\";\n/** @internal */\nclass MRDLSliderThumbMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        /*\n            \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\n        */\n        this.SKY_ENABLED = true;\n        this.BLOB_ENABLE_2 = true;\n        this.IRIDESCENCE_ENABLED = true;\n        this._needNormals = true;\n        this._needUVs = true;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render Slider Thumb material with MRDL\n */\nexport class MRDLSliderThumbMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the corner Radius on the slider thumb.\n         */\n        this.radius = 0.157;\n        /**\n         * Gets or sets the Bevel Front on the slider thumb.\n         */\n        this.bevelFront = 0.065;\n        /**\n         * Gets or sets the Bevel Front Stretch on the slider thumb.\n         */\n        this.bevelFrontStretch = 0.077;\n        /**\n         * Gets or sets the Bevel Back on the slider thumb.\n         */\n        this.bevelBack = 0.031;\n        /**\n         * Gets or sets the Bevel Back Stretch on the slider thumb.\n         */\n        this.bevelBackStretch = 0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopRight = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomRight = 1.0;\n        /**\n         * Gets or sets whether Bulge is enabled.\n         * Default is false.\n         */\n        this.bulgeEnabled = false;\n        /**\n         * Gets or sets the Bulge Height.\n         */\n        this.bulgeHeight = -0.323;\n        /**\n         * Gets or sets the Bulge Radius.\n         */\n        this.bulgeRadius = 0.73;\n        /**\n         * Gets or sets the Sun Intensity.\n         */\n        this.sunIntensity = 2;\n        /**\n         * Gets or sets the Sun Theta.\n         */\n        this.sunTheta = 0.937;\n        /**\n         * Gets or sets the Sun Phi.\n         */\n        this.sunPhi = 0.555;\n        /**\n         * Gets or sets the Indirect Diffuse.\n         */\n        this.indirectDiffuse = 1;\n        /**\n         * Gets or sets the base albedo.\n         */\n        this.albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the Specular value.\n         */\n        this.specular = 0;\n        /**\n         * Gets or sets the Shininess value.\n         */\n        this.shininess = 10;\n        /**\n         * Gets or sets the Sharpness value.\n         */\n        this.sharpness = 0;\n        /**\n         * Gets or sets the Subsurface value.\n         */\n        this.subsurface = 0.31;\n        /**\n         * Gets or sets the left gradient color.\n         */\n        this.leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the right gradient color.\n         */\n        this.rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\n        /**\n         * Gets or sets the reflection value.\n         */\n        this.reflection = 0.749;\n        /**\n         * Gets or sets the front reflect value.\n         */\n        this.frontReflect = 0;\n        /**\n         * Gets or sets the edge reflect value.\n         */\n        this.edgeReflect = 0.09;\n        /**\n         * Gets or sets the power value.\n         */\n        this.power = 8.1;\n        /**\n         * Gets or sets the sky color.\n         */\n        this.skyColor = new Color4(0.0117647, 0.960784, 0.996078, 1);\n        /**\n         * Gets or sets the horizon color.\n         */\n        this.horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\n        /**\n         * Gets or sets the ground color.\n         */\n        this.groundColor = new Color4(0, 0.254902, 0.996078, 1);\n        /**\n         * Gets or sets the horizon power value.\n         */\n        this.horizonPower = 1;\n        /**\n         * Gets or sets the finger occlusion width value.\n         */\n        this.width = 0.02;\n        /**\n         * Gets or sets the finger occlusion fuzz value.\n         */\n        this.fuzz = 0.5;\n        /**\n         * Gets or sets the minimum finger occlusion fuzz value.\n         */\n        this.minFuzz = 0.001;\n        /**\n         * Gets or sets the finger occlusion clip fade value.\n         */\n        this.clipFade = 0.01;\n        /**\n         * Gets or sets the hue shift value.\n         */\n        this.hueShift = 0;\n        /**\n         * Gets or sets the saturation shift value.\n         */\n        this.saturationShift = 0;\n        /**\n         * Gets or sets the value shift.\n         */\n        this.valueShift = 0;\n        /**\n         * Gets or sets the position of the hover glow effect.\n         */\n        this.blobPosition = new Vector3(0, 0, 0.1);\n        /**\n         * Gets or sets the intensity of the hover glow effect.\n         */\n        this.blobIntensity = 0.5;\n        /**\n         * Gets or sets the near size of the hover glow effect.\n         */\n        this.blobNearSize = 0.01;\n        /**\n         * Gets or sets the far size of the hover glow effect.\n         */\n        this.blobFarSize = 0.03;\n        /**\n         * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\n         */\n        this.blobNearDistance = 0;\n        /**\n         * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\n         */\n        this.blobFarDistance = 0.08;\n        /**\n         * Gets or sets the length of the hover glow effect fade.\n         */\n        this.blobFadeLength = 0.576;\n        /**\n         * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\n         */\n        this.blobPulse = 0;\n        /**\n         * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\n         */\n        this.blobFade = 1;\n        /**\n         * Gets or sets the position of the hover glow effect.\n         */\n        this.blobPosition2 = new Vector3(0.2, 0, 0.1);\n        /**\n         * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\n         */\n        this.blobNearSize2 = 0.01;\n        /**\n         * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\n         */\n        this.blobPulse2 = 0;\n        /**\n         * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\n         */\n        this.blobFade2 = 1;\n        /**\n         * Gets or sets the texture of the hover glow effect.\n         */\n        this.blobTexture = new Texture(\"\", this.getScene());\n        /**\n         * Gets or sets the finger position for left index.\n         */\n        this.leftIndexPosition = new Vector3(0, 0, 1);\n        /**\n         * Gets or sets the finger position for right index.\n         */\n        this.rightIndexPosition = new Vector3(-1, -1, -1);\n        /**\n         * Gets or sets the finger position for left index middle position.\n         */\n        this.leftIndexMiddlePosition = new Vector3(0, 0, 0);\n        /**\n         * Gets or sets the finger position for right index middle position.\n         */\n        this.rightIndexMiddlePosition = new Vector3(0, 0, 0);\n        /**\n         * Gets or sets the Decal Scale for XY.\n         */\n        this.decalScaleXY = new Vector2(1.5, 1.5);\n        /**\n         * Gets or sets decalFrontOnly\n         * Default is true\n         */\n        this.decalFrontOnly = true;\n        /**\n         * Gets or sets the Rim Light intensity.\n         */\n        this.rimIntensity = 0.287;\n        /**\n         * Gets or sets the Rim Light hue shift value.\n         */\n        this.rimHueShift = 0;\n        /**\n         * Gets or sets the Rim Light saturation shift value.\n         */\n        this.rimSaturationShift = 0;\n        /**\n         * Gets or sets the Rim Light value shift.\n         */\n        this.rimValueShift = -1;\n        /**\n         * Gets or sets the intensity of the iridescence effect.\n         */\n        this.iridescenceIntensity = 0;\n        /**\n         * @internal\n         */\n        this.useGlobalLeftIndex = 1.0;\n        /**\n         * @internal\n         */\n        this.useGlobalRightIndex = 1.0;\n        /**\n         * @internal\n         */\n        this.globalLeftIndexTipProximity = 0.0;\n        /**\n         * @internal\n         */\n        this.globalRightIndexTipProximity = 0.0;\n        /**\n         * @internal\n         */\n        this.globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        /**\n         * @internal\n         */\n        this.globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        /**\n         * @internal\n         */\n        this.globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\n        /**\n         * @internal\n         */\n        this.globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\n        this.alphaMode = Constants.ALPHA_DISABLE;\n        this.backFaceCulling = false;\n        this._blueGradientTexture = new Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\n        this._decalTexture = new Texture(\"\", this.getScene());\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\n    }\n    needAlphaBlending() {\n        return false;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"mrdlSliderThumb\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Radius_\",\n                \"_Bevel_Front_\",\n                \"_Bevel_Front_Stretch_\",\n                \"_Bevel_Back_\",\n                \"_Bevel_Back_Stretch_\",\n                \"_Radius_Top_Left_\",\n                \"_Radius_Top_Right_\",\n                \"_Radius_Bottom_Left_\",\n                \"_Radius_Bottom_Right_\",\n                \"_Bulge_Enabled_\",\n                \"_Bulge_Height_\",\n                \"_Bulge_Radius_\",\n                \"_Sun_Intensity_\",\n                \"_Sun_Theta_\",\n                \"_Sun_Phi_\",\n                \"_Indirect_Diffuse_\",\n                \"_Albedo_\",\n                \"_Specular_\",\n                \"_Shininess_\",\n                \"_Sharpness_\",\n                \"_Subsurface_\",\n                \"_Left_Color_\",\n                \"_Right_Color_\",\n                \"_Reflection_\",\n                \"_Front_Reflect_\",\n                \"_Edge_Reflect_\",\n                \"_Power_\",\n                \"_Sky_Color_\",\n                \"_Horizon_Color_\",\n                \"_Ground_Color_\",\n                \"_Horizon_Power_\",\n                \"_Reflection_Map_\",\n                \"_Indirect_Environment_\",\n                \"_Width_\",\n                \"_Fuzz_\",\n                \"_Min_Fuzz_\",\n                \"_Clip_Fade_\",\n                \"_Hue_Shift_\",\n                \"_Saturation_Shift_\",\n                \"_Value_Shift_\",\n                \"_Blob_Position_\",\n                \"_Blob_Intensity_\",\n                \"_Blob_Near_Size_\",\n                \"_Blob_Far_Size_\",\n                \"_Blob_Near_Distance_\",\n                \"_Blob_Far_Distance_\",\n                \"_Blob_Fade_Length_\",\n                \"_Blob_Pulse_\",\n                \"_Blob_Fade_\",\n                \"_Blob_Texture_\",\n                \"_Blob_Position_2_\",\n                \"_Blob_Near_Size_2_\",\n                \"_Blob_Pulse_2_\",\n                \"_Blob_Fade_2_\",\n                \"_Left_Index_Pos_\",\n                \"_Right_Index_Pos_\",\n                \"_Left_Index_Middle_Pos_\",\n                \"_Right_Index_Middle_Pos_\",\n                \"_Decal_\",\n                \"_Decal_Scale_XY_\",\n                \"_Decal_Front_Only_\",\n                \"_Rim_Intensity_\",\n                \"_Rim_Texture_\",\n                \"_Rim_Hue_Shift_\",\n                \"_Rim_Saturation_Shift_\",\n                \"_Rim_Value_Shift_\",\n                \"_Iridescence_Intensity_\",\n                \"_Iridescence_Texture_\",\n                \"Use_Global_Left_Index\",\n                \"Use_Global_Right_Index\",\n                \"Global_Left_Index_Tip_Position\",\n                \"Global_Right_Index_Tip_Position\",\n                \"Global_Left_Thumb_Tip_Position\",\n                \"Global_Right_Thumb_Tip_Position\",\n                \"Global_Left_Index_Middle_Position;\",\n                \"Global_Right_Index_Middle_Position\",\n                \"Global_Left_Index_Tip_Proximity\",\n                \"Global_Right_Index_Tip_Proximity\",\n            ];\n            const samplers = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera.position);\n        // \"Round Rect\"\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\n        // \"Radii Multipliers\"\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\n        // \"Bulge\"\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\n        // \"Sun\"\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\n        // \"Diffuse And Specular\"\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\n        // \"Gradient\"\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\n        // \"Reflection\"\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\n        this._activeEffect.setFloat(\"_Power_\", this.power);\n        // \"Sky Environment\"\n        //define SKY_ENABLED true;\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\n        // \"Mapped Environment\"\n        //define ENV_ENABLE false;\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\n        // \"FingerOcclusion\"\n        //define OCCLUSION_ENABLED false;\n        this._activeEffect.setFloat(\"_Width_\", this.width);\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\n        // \"View Based Color Shift\"\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\n        // \"Blob\"\n        //define BLOB_ENABLE false;\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\n        // \"Blob Texture\"\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\n        // \"Blob 2\"\n        //define BLOB_ENABLE_2 true;\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\n        // \"Finger Positions\"\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\n        // \"Decal Texture\"\n        //define DECAL_ENABLE false;\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\n        // \"Rim Light\"\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\n        // \"Iridescence\"\n        //define IRIDESCENCE_ENABLED true;\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\n        // Global inputs\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n        this._reflectionMapTexture.dispose();\n        this._indirectEnvTexture.dispose();\n        this._blueGradientTexture.dispose();\n        this._decalTexture.dispose();\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new MRDLSliderThumbMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.MRDLSliderThumbMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"MRDLSliderThumbMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new MRDLSliderThumbMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n/**\n * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\n */\nMRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bevelFront\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bevelFrontStretch\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bevelBack\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bevelBackStretch\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"radiusTopLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"radiusTopRight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"radiusBottomLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"radiusBottomRight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bulgeEnabled\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bulgeHeight\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"bulgeRadius\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"sunIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"sunTheta\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"sunPhi\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"indirectDiffuse\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"albedo\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"specular\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"shininess\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"sharpness\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"subsurface\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"leftGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rightGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"reflection\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"frontReflect\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"edgeReflect\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"power\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"skyColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"horizonColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"groundColor\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"horizonPower\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"width\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"fuzz\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"minFuzz\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"clipFade\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"hueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"saturationShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"valueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobNearSize\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobFarSize\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobNearDistance\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobFarDistance\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobFadeLength\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobPulse\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobFade\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobPosition2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobNearSize2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobPulse2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobFade2\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"blobTexture\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"leftIndexPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rightIndexPosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"leftIndexMiddlePosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rightIndexMiddlePosition\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"decalScaleXY\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"decalFrontOnly\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rimIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rimHueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rimSaturationShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"rimValueShift\", void 0);\n__decorate([\n    serialize()\n], MRDLSliderThumbMaterial.prototype, \"iridescenceIntensity\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLSliderThumbMaterial\", MRDLSliderThumbMaterial);\n//# sourceMappingURL=mrdlSliderThumbMaterial.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Vector4 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport \"./shaders/mrdlBackplate.fragment.js\";\nimport \"./shaders/mrdlBackplate.vertex.js\";\n/** @internal */\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        /*\n            \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\n        */\n        this.IRIDESCENCE_ENABLE = true;\n        this.SMOOTH_EDGES = true;\n        this._needNormals = true;\n        this.rebuild();\n    }\n}\n/**\n * Class used to render backplate material with MRDL\n */\nexport class MRDLBackplateMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\n         */\n        this.radius = 0.3;\n        /**\n         * Gets or sets the line width of the backplate.\n         */\n        this.lineWidth = 0.003;\n        /**\n         * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\n         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n         */\n        this.absoluteSizes = false;\n        /** @internal */\n        this._filterWidth = 1;\n        /**\n         * Gets or sets the base color of the backplate.\n         */\n        this.baseColor = new Color4(0, 0, 0, 1);\n        /**\n         * Gets or sets the line color of the backplate.\n         */\n        this.lineColor = new Color4(0.2, 0.262745, 0.4, 1);\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusTopRight = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomLeft = 1.0;\n        /**\n         * Gets or sets the top left Radii Multiplier.\n         */\n        this.radiusBottomRight = 1.0;\n        /** @internal */\n        this._rate = 0;\n        /**\n         * Gets or sets the color of the highlights on the backplate line.\n         */\n        this.highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\n        /**\n         * Gets or sets the width of the highlights on the backplate line.\n         */\n        this.highlightWidth = 0;\n        /** @internal */\n        this._highlightTransform = new Vector4(1, 1, 0, 0);\n        /** @internal */\n        this._highlight = 1;\n        /**\n         * Gets or sets the intensity of the iridescence effect.\n         */\n        this.iridescenceIntensity = 0.45;\n        /**\n         * Gets or sets the intensity of the iridescence effect on the backplate edges.\n         */\n        this.iridescenceEdgeIntensity = 1;\n        /**\n         * Gets or sets the Tint of the iridescence effect on the backplate.\n         */\n        this.iridescenceTint = new Color4(1, 1, 1, 1);\n        /** @internal */\n        this._angle = -45;\n        /**\n         * Gets or sets the opacity of the backplate (0.0 - 1.0).\n         */\n        this.fadeOut = 1;\n        /** @internal */\n        this._reflected = true;\n        /** @internal */\n        this._frequency = 1;\n        /** @internal */\n        this._verticalOffset = 0;\n        /**\n         * Gets or sets the gradient color effect on the backplate.\n         */\n        this.gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\n        /**\n         * Gets or sets the top left gradient color effect on the backplate.\n         */\n        this.topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\n        /**\n         * Gets or sets the top right gradient color effect on the backplate.\n         */\n        this.topRightGradientColor = new Color4(0.305882, 0, 1, 1);\n        /**\n         * Gets or sets the bottom left gradient color effect on the backplate.\n         */\n        this.bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\n        /**\n         * Gets or sets the bottom right gradient color effect on the backplate.\n         */\n        this.bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\n        /**\n         * Gets or sets the edge width of the backplate.\n         */\n        this.edgeWidth = 0.5;\n        /**\n         * Gets or sets the edge width of the backplate.\n         */\n        this.edgePower = 1;\n        /**\n         * Gets or sets the edge width of the backplate.\n         */\n        this.edgeLineGradientBlend = 0.5;\n        this.alphaMode = Constants.ALPHA_DISABLE;\n        this.backFaceCulling = false;\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\n    }\n    needAlphaBlending() {\n        return false;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"mrdlBackplate\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Radius_\",\n                \"_Line_Width_\",\n                \"_Absolute_Sizes_\",\n                \"_Filter_Width_\",\n                \"_Base_Color_\",\n                \"_Line_Color_\",\n                \"_Radius_Top_Left_\",\n                \"_Radius_Top_Right_\",\n                \"_Radius_Bottom_Left_\",\n                \"_Radius_Bottom_Right_\",\n                \"_Rate_\",\n                \"_Highlight_Color_\",\n                \"_Highlight_Width_\",\n                \"_Highlight_Transform_\",\n                \"_Highlight_\",\n                \"_Iridescence_Intensity_\",\n                \"_Iridescence_Edge_Intensity_\",\n                \"_Iridescence_Tint_\",\n                \"_Iridescent_Map_\",\n                \"_Angle_\",\n                \"_Reflected_\",\n                \"_Frequency_\",\n                \"_Vertical_Offset_\",\n                \"_Gradient_Color_\",\n                \"_Top_Left_\",\n                \"_Top_Right_\",\n                \"_Bottom_Left_\",\n                \"_Bottom_Right_\",\n                \"_Edge_Width_\",\n                \"_Edge_Power_\",\n                \"_Line_Gradient_Blend_\",\n                \"_Fade_Out_\",\n            ];\n            const samplers = [\"_Iridescent_Map_\"];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera.position);\n        // \"Round Rect\"\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\n        // \"Radii Multipliers\"\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\n        // \"Line Highlight\"\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\n        // \"Iridescence\"\n        //define IRIDESCENCE_ENABLE true;\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\n        // \"Gradient\"\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\n        //define EDGE_ONLY false;\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\n        // \"Fade\"\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\n        // \"Antialiasing\"\n        //define SMOOTH_EDGES true;\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"MRDLBackplateMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n/**\n * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\n */\nMRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"lineWidth\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"baseColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"lineColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"radiusTopLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"radiusTopRight\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"radiusBottomLeft\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"radiusBottomRight\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"highlightColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"highlightWidth\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"iridescenceIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"iridescenceEdgeIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"iridescenceTint\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"fadeOut\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"gradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"topLeftGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"topRightGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"bottomLeftGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"bottomRightGradientColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"edgeWidth\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"edgePower\", void 0);\n__decorate([\n    serialize()\n], MRDLBackplateMaterial.prototype, \"edgeLineGradientBlend\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\n//# sourceMappingURL=mrdlBackplateMaterial.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Control3D } from \"./control3D.js\";\nimport { CreateBox } from \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\nimport { PointerDragBehavior } from \"@babylonjs/core/Behaviors/Meshes/pointerDragBehavior.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial.js\";\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial.js\";\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial.js\";\nconst SLIDER_MIN = 0;\nconst SLIDER_MAX = 100;\nconst SLIDER_VAL = 50;\nconst SLIDER_STEP = 0;\nconst SLIDER_SCALING = 1.0;\nconst SLIDER_MARGIN = 0.2;\n/**\n * Class used to create a slider in 3D\n */\nexport class Slider3D extends Control3D {\n    /**\n     * Creates a new slider\n     * @param name defines the control name\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\n     */\n    constructor(name, sliderBackplateVisible) {\n        super(name);\n        /** Observable raised when the sldier value changes */\n        this.onValueChangedObservable = new Observable();\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\n        this._minimum = SLIDER_MIN;\n        this._maximum = SLIDER_MAX;\n        this._step = SLIDER_STEP;\n        this._value = SLIDER_VAL;\n    }\n    /**\n     * Gets the mesh used to render this control\n     */\n    get mesh() {\n        if (this.node) {\n            return this._sliderThumb;\n        }\n        return null;\n    }\n    /** Gets or sets minimum value */\n    get minimum() {\n        return this._minimum;\n    }\n    set minimum(value) {\n        if (this._minimum === value) {\n            return;\n        }\n        this._minimum = Math.max(value, SLIDER_MIN);\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\n    }\n    /** Gets or sets maximum value */\n    get maximum() {\n        return this._maximum;\n    }\n    set maximum(value) {\n        if (this._maximum === value) {\n            return;\n        }\n        this._maximum = Math.max(value, this._minimum);\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\n    }\n    /** Gets or sets step value */\n    get step() {\n        return this._step;\n    }\n    set step(value) {\n        if (this._step === value) {\n            return;\n        }\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\n    }\n    /** Gets or sets current value */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value === value) {\n            return;\n        }\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\n        if (this._sliderThumb) {\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\n        }\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n    get start() {\n        if (!this.node) {\n            return -SLIDER_SCALING / 2;\n        }\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\n    }\n    get end() {\n        if (!this.node) {\n            return SLIDER_SCALING / 2;\n        }\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\n    }\n    /**\n     * Gets the slider bar material used by this control\n     */\n    get sliderBarMaterial() {\n        return this._sliderBarMaterial;\n    }\n    /**\n     * Gets the slider thumb material used by this control\n     */\n    get sliderThumbMaterial() {\n        return this._sliderThumbMaterial;\n    }\n    /**\n     * Gets the slider backplate material used by this control\n     */\n    get sliderBackplateMaterial() {\n        return this._sliderBackplateMaterial;\n    }\n    /** Sets a boolean indicating if the control is visible */\n    set isVisible(value) {\n        var _a;\n        if (this._isVisible === value) {\n            return;\n        }\n        this._isVisible = value;\n        (_a = this.node) === null || _a === void 0 ? void 0 : _a.setEnabled(value);\n    }\n    // Mesh association\n    _createNode(scene) {\n        const sliderBackplate = CreateBox(`${this.name}_sliderbackplate`, {\n            width: 1.0,\n            height: 1.0,\n            depth: 1.0,\n        }, scene);\n        sliderBackplate.isPickable = false;\n        sliderBackplate.visibility = 0;\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\n            result.meshes.forEach((m) => {\n                m.isPickable = false;\n            });\n            const sliderBackplateModel = result.meshes[1];\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\n            sliderBackplateModel.visibility = 0;\n            if (this._sliderBackplateVisible) {\n                sliderBackplateModel.visibility = 1;\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\n                sliderBackplateModel.scaling.x = 1;\n                sliderBackplateModel.scaling.z = 0.2;\n                sliderBackplateModel.parent = sliderBackplate;\n                if (this._sliderBackplateMaterial) {\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\n                }\n                this._sliderBackplate = sliderBackplateModel;\n            }\n            if (sliderBarModel) {\n                sliderBarModel.parent = sliderBackplate;\n                sliderBarModel.position.z = -0.1;\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\n                if (this._sliderBarMaterial) {\n                    sliderBarModel.material = this._sliderBarMaterial;\n                }\n                this._sliderBar = sliderBarModel;\n            }\n            if (sliderThumbModel) {\n                sliderThumbModel.parent = sliderBackplate;\n                sliderThumbModel.isPickable = true;\n                sliderThumbModel.position.z = -0.115;\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\n                sliderThumbModel.addBehavior(this._createBehavior());\n                if (this._sliderThumbMaterial) {\n                    sliderThumbModel.material = this._sliderThumbMaterial;\n                }\n                this._sliderThumb = sliderThumbModel;\n            }\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\n                this._injectGUI3DReservedDataStore(mesh).control = this;\n            });\n        });\n        this._affectMaterial(sliderBackplate);\n        return sliderBackplate;\n    }\n    _affectMaterial(mesh) {\n        var _a, _b, _c;\n        this._sliderBackplateMaterial = (_a = this._sliderBackplateMaterial) !== null && _a !== void 0 ? _a : new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\n        this._sliderBarMaterial = (_b = this._sliderBarMaterial) !== null && _b !== void 0 ? _b : new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\n        this._sliderThumbMaterial = (_c = this._sliderThumbMaterial) !== null && _c !== void 0 ? _c : new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\n    }\n    _createBehavior() {\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\n        pointerDragBehavior.moveAttached = false;\n        pointerDragBehavior.onDragStartObservable.add(() => {\n            this._draggedPosition = this._sliderThumb.position.x;\n        });\n        pointerDragBehavior.onDragObservable.add((event) => {\n            this._draggedPosition += event.dragDistance / this.scaling.x;\n            this.value = this._convertToValue(this._draggedPosition);\n        });\n        return pointerDragBehavior;\n    }\n    _convertToPosition(value) {\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\n        return Math.min(Math.max(position, this.start), this.end);\n    }\n    _convertToValue(position) {\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\n        value = this.step ? Math.round(value / this.step) * this.step : value;\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        var _a, _b, _c, _d, _e, _f;\n        super.dispose();\n        (_a = this._sliderBar) === null || _a === void 0 ? void 0 : _a.dispose();\n        (_b = this._sliderThumb) === null || _b === void 0 ? void 0 : _b.dispose();\n        (_c = this._sliderBarMaterial) === null || _c === void 0 ? void 0 : _c.dispose();\n        (_d = this._sliderThumbMaterial) === null || _d === void 0 ? void 0 : _d.dispose();\n        (_e = this._sliderBackplate) === null || _e === void 0 ? void 0 : _e.dispose();\n        (_f = this._sliderBackplateMaterial) === null || _f === void 0 ? void 0 : _f.dispose();\n    }\n}\n/**\n * Base Url for the models.\n */\nSlider3D.MODEL_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\n/**\n * File name for the 8x4 model.\n */\nSlider3D.MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\n//# sourceMappingURL=slider3D.js.map","import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { VolumeBasedPanel } from \"./volumeBasedPanel.js\";\nimport { Container3D } from \"./container3D.js\";\nimport { Axis, Space } from \"@babylonjs/core/Maths/math.axis.js\";\n/**\n * Class used to create a container panel deployed on the surface of a sphere\n */\nexport class SpherePanel extends VolumeBasedPanel {\n    constructor() {\n        super(...arguments);\n        this._radius = 5.0;\n    }\n    /**\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\n     */\n    get radius() {\n        return this._radius;\n    }\n    set radius(value) {\n        if (this._radius === value) {\n            return;\n        }\n        this._radius = value;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    _mapGridNode(control, nodePosition) {\n        const mesh = control.mesh;\n        if (!mesh) {\n            return;\n        }\n        const newPos = this._sphericalMapping(nodePosition);\n        control.position = newPos;\n        switch (this.orientation) {\n            case Container3D.FACEORIGIN_ORIENTATION:\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\n                break;\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\n                break;\n            case Container3D.FACEFORWARD_ORIENTATION:\n                break;\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\n                break;\n        }\n    }\n    _sphericalMapping(source) {\n        const newPos = new Vector3(0, 0, this._radius);\n        const xAngle = source.y / this._radius;\n        const yAngle = -(source.x / this._radius);\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\n    }\n}\n//# sourceMappingURL=spherePanel.js.map","import { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { Container3D } from \"./container3D.js\";\n/**\n * Class used to create a stack panel in 3D on XY plane\n */\nexport class StackPanel3D extends Container3D {\n    /**\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\n     */\n    get isVertical() {\n        return this._isVertical;\n    }\n    set isVertical(value) {\n        if (this._isVertical === value) {\n            return;\n        }\n        this._isVertical = value;\n        Tools.SetImmediate(() => {\n            this._arrangeChildren();\n        });\n    }\n    /**\n     * Creates new StackPanel\n     * @param isVertical\n     */\n    constructor(isVertical = false) {\n        super();\n        this._isVertical = false;\n        /**\n         * Gets or sets the distance between elements\n         */\n        this.margin = 0.1;\n        this._isVertical = isVertical;\n    }\n    _arrangeChildren() {\n        let width = 0;\n        let height = 0;\n        let controlCount = 0;\n        const extendSizes = [];\n        const currentInverseWorld = Matrix.Invert(this.node.computeWorldMatrix(true));\n        // Measure\n        for (const child of this._children) {\n            if (!child.mesh) {\n                continue;\n            }\n            controlCount++;\n            child.mesh.computeWorldMatrix(true);\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\n            extendSizes.push(extendSize);\n            if (this._isVertical) {\n                height += extendSize.y;\n            }\n            else {\n                width += extendSize.x;\n            }\n        }\n        if (this._isVertical) {\n            height += ((controlCount - 1) * this.margin) / 2;\n        }\n        else {\n            width += ((controlCount - 1) * this.margin) / 2;\n        }\n        // Arrange\n        let offset;\n        if (this._isVertical) {\n            offset = -height;\n        }\n        else {\n            offset = -width;\n        }\n        let index = 0;\n        for (const child of this._children) {\n            if (!child.mesh) {\n                continue;\n            }\n            controlCount--;\n            const extendSize = extendSizes[index++];\n            if (this._isVertical) {\n                child.position.y = offset + extendSize.y;\n                child.position.x = 0;\n                offset += extendSize.y * 2;\n            }\n            else {\n                child.position.x = offset + extendSize.x;\n                child.position.y = 0;\n                offset += extendSize.x * 2;\n            }\n            offset += controlCount > 0 ? this.margin : 0;\n        }\n    }\n}\n//# sourceMappingURL=stackPanel3D.js.map","import { TouchButton3D } from \"./touchButton3D.js\";\n/**\n * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene\n * @since 5.0.0\n */\nexport class TouchMeshButton3D extends TouchButton3D {\n    /**\n     * Creates a new 3D button based on a mesh\n     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking\n     * @param name defines the control name\n     */\n    constructor(mesh, name) {\n        super(name, mesh);\n        this._currentMesh = mesh;\n        /**\n         * Provides a default behavior on hover/out & up/down\n         * Override those function to create your own desired behavior specific to your mesh\n         */\n        this.pointerEnterAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.1);\n        };\n        this.pointerOutAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\n        };\n        this.pointerDownAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(0.95);\n        };\n        this.pointerUpAnimation = () => {\n            if (!this.mesh) {\n                return;\n            }\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\n        };\n    }\n    _getTypeName() {\n        return \"TouchMeshButton3D\";\n    }\n    // Mesh association\n    _createNode() {\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\n            this._injectGUI3DReservedDataStore(mesh).control = this;\n        });\n        return this._currentMesh;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _affectMaterial(mesh) { }\n}\n//# sourceMappingURL=touchMeshButton3D.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlBackglowPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rfloat BiasFunc(float b,float v) {\rreturn pow(v,log(clamp(b,0.001,0.999))/log(0.5));\r}\rvoid Fuzzy_Round_Rect_B33(\rfloat Size_X,\rfloat Size_Y,\rfloat Radius_X,\rfloat Radius_Y,\rfloat Line_Width,\rvec2 UV,\rfloat Outer_Fuzz,\rfloat Max_Outer_Fuzz,\rout float Rect_Distance,\rout float Inner_Distance)\r{\rvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\rvec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));\rfloat radius=min(r.x,r.y)-Max_Outer_Fuzz;\rvec2 v=abs(UV);\rvec2 nearestp=min(v,halfSize-r);\rfloat d=distance(nearestp,v);\rInner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);\rRect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;\r}\rvoid main()\r{\rfloat X_Q42;\rfloat Y_Q42;\rX_Q42=vNormal.x;\rY_Q42=vNormal.y;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Sqrt_F_Q27=sqrt(MaxAB_Q24);\rfloat Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);\rfloat Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);\rfloat Product_Q23=_Max_Intensity_*Power_Q43;\rfloat Rect_Distance_Q33;\rfloat Inner_Distance_Q33;\rFuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);\rfloat Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);\rfloat Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);\rvec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);\rfloat Product_Q22=Result_Q45*Product_Q23;\rvec4 Result_Q28=Product_Q22*Color_At_T_Q25;\rvec4 Out_Color=Result_Q28;\rfloat Clip_Threshold=0.0;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowPixelShader = { name, shader };\n//# sourceMappingURL=mrdlBackglow.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nconst name = \"mrdlBackglowVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvoid main()\r{\rvec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;\rvec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Length_Q16=length(Dir_World_Q41);\rfloat Length_Q17=length(Dir_World_Q40);\rbool Greater_Than_Q37=MaxAB_Q24>0.0;\rvec3 Sizes_Q35;\rvec2 XY_Q35;\rSizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));\rXY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;\rvec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);\rvec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;\rvec3 Position=Pos_World_Q39;\rvec3 Normal=Sizes_Q35;\rvec2 UV=XY_Q35;\rvec3 Tangent=vec3(0,0,0);\rvec3 Binormal=vec3(0,0,0);\rvec4 Color=vec4(1,1,1,1);\rgl_Position=viewProjection*vec4(Position,1);\rvNormal=Normal;\rvUV=UV;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowVertexShader = { name, shader };\n//# sourceMappingURL=mrdlBackglow.vertex.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport \"./shaders/mrdlBackglow.fragment.js\";\nimport \"./shaders/mrdlBackglow.vertex.js\";\n/** @hidden */\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this._needNormals = true;\n        this._needUVs = true;\n        this.rebuild();\n    }\n}\nexport class MRDLBackglowMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\n         */\n        this.bevelRadius = 0.16;\n        /**\n         * Gets or sets the line width of the backglow.\n         */\n        this.lineWidth = 0.16;\n        /**\n         * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\n         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\n         */\n        this.absoluteSizes = false;\n        /**\n         * Gets or sets the tuning motion of the backglow.\n         */\n        this.tuningMotion = 0.0;\n        /**\n         * Gets or sets the motion of the backglow.\n         */\n        this.motion = 1.0;\n        /**\n         * Gets or sets the maximum intensity of the backglow.\n         */\n        this.maxIntensity = 0.7;\n        /**\n         * Gets or sets the fade-in exponent of the intensity of the backglow.\n         */\n        this.intensityFadeInExponent = 2.0;\n        /**\n         * Gets or sets the start of the outer fuzz effect on the backglow.\n         */\n        this.outerFuzzStart = 0.04;\n        /**\n         * Gets or sets the end of the outer fuzz effect on the backglow.\n         */\n        this.outerFuzzEnd = 0.04;\n        /**\n         * Gets or sets the color of the backglow.\n         */\n        this.color = new Color4(0.682353, 0.698039, 1, 1);\n        /**\n         * Gets or sets the inner color of the backglow.\n         */\n        this.innerColor = new Color4(0.356863, 0.392157, 0.796078, 1);\n        /**\n         * Gets or sets the blend exponent of the backglow.\n         */\n        this.blendExponent = 1.5;\n        /**\n         * Gets or sets the falloff of the backglow.\n         */\n        this.falloff = 2.0;\n        /**\n         * Gets or sets the bias of the backglow.\n         */\n        this.bias = 0.5;\n        this.alphaMode = Constants.ALPHA_ADD;\n        this.disableDepthWrite = true;\n        this.backFaceCulling = false;\n    }\n    needAlphaBlending() {\n        return true;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"mrdlBackglow\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"worldView\",\n                \"worldViewProjection\",\n                \"view\",\n                \"projection\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Bevel_Radius_\",\n                \"_Line_Width_\",\n                \"_Absolute_Sizes_\",\n                \"_Tuning_Motion_\",\n                \"_Motion_\",\n                \"_Max_Intensity_\",\n                \"_Intensity_Fade_In_Exponent_\",\n                \"_Outer_Fuzz_Start_\",\n                \"_Outer_Fuzz_End_\",\n                \"_Color_\",\n                \"_Inner_Color_\",\n                \"_Blend_Exponent_\",\n                \"_Falloff_\",\n                \"_Bias_\",\n            ];\n            const samplers = [];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n        // \"Rounded Rectangle\"\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\n        // \"Animation\"\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\n        // \"Color\"\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\n        // \"Inner Transition\"\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"MRDLBackglowMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"bevelRadius\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"lineWidth\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"absoluteSizes\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"tuningMotion\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"motion\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"maxIntensity\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"intensityFadeInExponent\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"outerFuzzStart\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"outerFuzzEnd\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"color\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"innerColor\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"blendExponent\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"falloff\", void 0);\n__decorate([\n    serialize()\n], MRDLBackglowMaterial.prototype, \"bias\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\n//# sourceMappingURL=mrdlBackglowMaterial.js.map","import { __decorate } from \"@babylonjs/core/tslib.es6.js\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Constants } from \"@babylonjs/core/Engines/constants.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"@babylonjs/core/Misc/decorators.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport \"./shaders/mrdlInnerquad.fragment.js\";\nimport \"./shaders/mrdlInnerquad.vertex.js\";\nclass MRDLInnerquadMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this._needNormals = true;\n        this._needUVs = true;\n        this.rebuild();\n    }\n}\nexport class MRDLInnerquadMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Gets or sets the color of the innerquad.\n         */\n        this.color = new Color4(1, 1, 1, 0.05);\n        /**\n         * Gets or sets the corner radius on the innerquad. If this value is changed, update the lineWidth to match.\n         */\n        this.radius = 0.12;\n        /**\n         * Gets or sets whether the radius of the innerquad should be fixed.\n         */\n        this.fixedRadius = true;\n        /** @hidden */\n        this._filterWidth = 1.0;\n        /**\n         * Gets or sets the glow fraction of the innerquad.\n         */\n        this.glowFraction = 0.0;\n        /**\n         * Gets or sets the maximum glow intensity of the innerquad.\n         */\n        this.glowMax = 0.5;\n        /**\n         * Gets or sets the glow falloff effect of the innerquad.\n         */\n        this.glowFalloff = 2.0;\n        this.alphaMode = Constants.ALPHA_COMBINE;\n        this.backFaceCulling = false;\n    }\n    needAlphaBlending() {\n        return true;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh) {\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new MRDLInnerquadMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            // Legacy browser patch\n            const shaderName = \"mrdlInnerquad\";\n            const join = defines.toString();\n            const uniforms = [\n                \"world\",\n                \"worldView\",\n                \"worldViewProjection\",\n                \"view\",\n                \"projection\",\n                \"viewProjection\",\n                \"cameraPosition\",\n                \"_Color_\",\n                \"_Radius_\",\n                \"_Fixed_Radius_\",\n                \"_Filter_Width_\",\n                \"_Glow_Fraction_\",\n                \"_Glow_Max_\",\n                \"_Glow_Falloff_\",\n            ];\n            const samplers = [];\n            const uniformBuffers = new Array();\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 4,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 4 },\n            }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera.position);\n        // \"Color\"\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\n        // \"Shape\"\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\n        this._activeEffect.setFloat(\"_Fixed_Radius_\", this.fixedRadius ? 1.0 : 0.0);\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\n        // \"Glow\"\n        this._activeEffect.setFloat(\"_Glow_Fraction_\", this.glowFraction);\n        this._activeEffect.setFloat(\"_Glow_Max_\", this.glowMax);\n        this._activeEffect.setFloat(\"_Glow_Falloff_\", this.glowFalloff);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        return [];\n    }\n    dispose(forceDisposeEffect) {\n        super.dispose(forceDisposeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new MRDLInnerquadMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.MRDLInnerquadMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"MRDLInnerquadMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new MRDLInnerquadMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"color\", void 0);\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"radius\", void 0);\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"fixedRadius\", void 0);\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"glowFraction\", void 0);\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"glowMax\", void 0);\n__decorate([\n    serialize()\n], MRDLInnerquadMaterial.prototype, \"glowFalloff\", void 0);\nRegisterClass(\"BABYLON.GUI.MRDLInnerquadMaterial\", MRDLInnerquadMaterial);\n//# sourceMappingURL=mrdlInnerquadMaterial.js.map","import { Observable } from \"@babylonjs/core/Misc/observable.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { PointerEventTypes } from \"@babylonjs/core/Events/pointerEvents.js\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight.js\";\nimport { UtilityLayerRenderer } from \"@babylonjs/core/Rendering/utilityLayerRenderer.js\";\nimport { EngineStore } from \"@babylonjs/core/Engines/engineStore.js\";\nimport { Container3D } from \"./controls/container3D.js\";\n/**\n * Class used to manage 3D user interface\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\n */\nexport class GUI3DManager {\n    /** Gets the hosting scene */\n    get scene() {\n        return this._scene;\n    }\n    /** Gets associated utility layer */\n    get utilityLayer() {\n        return this._utilityLayer;\n    }\n    /** Gets the scaling for all UI elements owned by this manager */\n    get controlScaling() {\n        return this._customControlScaling;\n    }\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\n    set controlScaling(newScale) {\n        if (this._customControlScaling !== newScale && newScale > 0) {\n            const scaleRatio = newScale / this._customControlScaling;\n            this._customControlScaling = newScale;\n            this._rootContainer.children.forEach((control) => {\n                control.scaling.scaleInPlace(scaleRatio);\n                if (newScale !== 1) {\n                    control._isScaledByManager = true;\n                }\n            });\n        }\n    }\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\n    get useRealisticScaling() {\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\n    }\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\n    set useRealisticScaling(newValue) {\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\n    }\n    /**\n     * Creates a new GUI3DManager\n     * @param scene\n     */\n    constructor(scene) {\n        this._customControlScaling = 1.0;\n        /** @internal */\n        this._lastControlOver = {};\n        /** @internal */\n        this._lastControlDown = {};\n        /**\n         * Observable raised when the point picked by the pointer events changed\n         */\n        this.onPickedPointChangedObservable = new Observable();\n        /**\n         * Observable raised when a picking happens\n         */\n        this.onPickingObservable = new Observable();\n        // Shared resources\n        /** @internal */\n        this._sharedMaterials = {};\n        /** @internal */\n        this._touchSharedMaterials = {};\n        this._scene = scene || EngineStore.LastCreatedScene;\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\n            this._sceneDisposeObserver = null;\n            this._utilityLayer = null;\n            this.dispose();\n        });\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\n        this._utilityLayer.pickUtilitySceneFirst = false;\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh) => {\n            var _a, _b, _c;\n            return mesh && ((_c = (_b = (_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c._node);\n        };\n        // Root\n        this._rootContainer = new Container3D(\"RootContainer\");\n        this._rootContainer._host = this;\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\n        // Events\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\n            this._handlePointerOut(pointerId, true);\n        });\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\n            this._doPicking(pi);\n        });\n        // Scene\n        this._utilityLayer.utilityLayerScene.autoClear = false;\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\n    }\n    _handlePointerOut(pointerId, isPointerUp) {\n        const previousControlOver = this._lastControlOver[pointerId];\n        if (previousControlOver) {\n            previousControlOver._onPointerOut(previousControlOver);\n            delete this._lastControlOver[pointerId];\n        }\n        if (isPointerUp) {\n            if (this._lastControlDown[pointerId]) {\n                this._lastControlDown[pointerId].forcePointerUp();\n                delete this._lastControlDown[pointerId];\n            }\n        }\n        this.onPickedPointChangedObservable.notifyObservers(null);\n    }\n    _doPicking(pi) {\n        var _a, _b, _c;\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\n            return false;\n        }\n        const pointerEvent = pi.event;\n        const pointerId = pointerEvent.pointerId || 0;\n        const buttonIndex = pointerEvent.button;\n        const pickingInfo = pi.pickInfo;\n        if (pickingInfo) {\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\n        }\n        if (!pickingInfo || !pickingInfo.hit) {\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\n            return false;\n        }\n        if (pickingInfo.pickedPoint) {\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\n        }\n        const control = (_b = (_a = pickingInfo.pickedMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control;\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint, ((_c = pickingInfo.originMesh) === null || _c === void 0 ? void 0 : _c.position) || null, pointerId, buttonIndex)) {\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        }\n        if (pi.type === PointerEventTypes.POINTERUP) {\n            if (this._lastControlDown[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\n                this._handlePointerOut(pointerId, false);\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets the root container\n     */\n    get rootContainer() {\n        return this._rootContainer;\n    }\n    /**\n     * Gets a boolean indicating if the given control is in the root child list\n     * @param control defines the control to check\n     * @returns true if the control is in the root child list\n     */\n    containsControl(control) {\n        return this._rootContainer.containsControl(control);\n    }\n    /**\n     * Adds a control to the root child list\n     * @param control defines the control to add\n     * @returns the current manager\n     */\n    addControl(control) {\n        this._rootContainer.addControl(control);\n        if (this._customControlScaling !== 1) {\n            control.scaling.scaleInPlace(this._customControlScaling);\n            control._isScaledByManager = true;\n        }\n        return this;\n    }\n    /**\n     * Removes a control from the root child list\n     * @param control defines the control to remove\n     * @returns the current container\n     */\n    removeControl(control) {\n        this._rootContainer.removeControl(control);\n        if (control._isScaledByManager) {\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\n            control._isScaledByManager = false;\n        }\n        return this;\n    }\n    /**\n     * Releases all associated resources\n     */\n    dispose() {\n        this._rootContainer.dispose();\n        for (const materialName in this._sharedMaterials) {\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\n                continue;\n            }\n            this._sharedMaterials[materialName].dispose();\n        }\n        this._sharedMaterials = {};\n        for (const materialName in this._touchSharedMaterials) {\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\n                continue;\n            }\n            this._touchSharedMaterials[materialName].dispose();\n        }\n        this._touchSharedMaterials = {};\n        if (this._pointerOutObserver && this._utilityLayer) {\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\n            this._pointerOutObserver = null;\n        }\n        this.onPickedPointChangedObservable.clear();\n        this.onPickingObservable.clear();\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\n        if (utilityLayerScene) {\n            if (this._pointerObserver) {\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n                this._pointerObserver = null;\n            }\n        }\n        if (this._scene) {\n            if (this._sceneDisposeObserver) {\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\n                this._sceneDisposeObserver = null;\n            }\n        }\n        if (this._utilityLayer) {\n            this._utilityLayer.dispose();\n        }\n    }\n}\nGUI3DManager.MRTK_REALISTIC_SCALING = 0.032;\n//# sourceMappingURL=gui3DManager.js.map"],"names":["FaceDirectionInfo","direction","rotatedDirection","Vector3","diff","ignore","AttachToBoxBehavior","_ui","Matrix","targetDirection","v","Quaternion","min","p","pos","up","ref","target","cameraPos","facing","facingUp","FadeInOutBehavior","value","ownerNode","fadeIn","mesh","c","_a","MultiPointerScaleBehavior","PointerDragBehavior","behavior","ratio","change","SurfaceMagnetismBehavior","scene","pickingInfo","pickedNormal","pickedPoint","worldTarget","TmpVectors","pickInfo","subPicking","pose","storedQuat","boundingMinMax","center","invWorld","elapsed","oldParent","worldOffset","interpolatedPosition","currentRotation","pointerInfo","PointerEventTypes","tick","FollowBehavior","camera","followedCamera","vector","normal","currentToTarget","moveToDefault","minDistance","maxDistance","defaultDistance","currentDistance","currentDistance2D","clampedDistance","Scalar","quaternion","invertView","forward","right","Epsilon","angularClamped","rotationQuat","angle","minMaxAngle","rotationQuaternion","toFollowed","length","leashToFollow","worldMatrix","pivot","position","nodeForward","distanceClamped","currentDirection","StereoscopicScreenUniversalCamera","UniversalCamera","newValue","name","distanceToProjectionPlane","distanceBetweenEyes","Camera","TargetCamera","transform","TransformNode","cameraIndex","cam","b","z","m","Viewport","LayerSceneComponent","SceneComponentConstants","EngineStore","layers","layer","predicate","isBackground","applyPostProcess","cameraLayerMask","renderTargetTexture","renderTarget","container","dispose","index","Layer","callback","imgUrl","color","Vector2","Observable","Texture","Color4","layerComponent","engine","DrawWrapper","vertices","vertexBuffer","VertexBuffer","indices","vb","defines","currentEffect","Material","OcclusionMaterial","ShaderMaterial","CustomProceduralTexture","ProceduralTexture","texturePath","size","fallbackTexture","generateMipMaps","skipJson","jsonUrl","noConfigFile","Logger","configFileUrl","xhr","WebRequest","useCameraPostProcess","i","j","uniform","Color3","RawTexture3D","data","width","height","depth","format","invertY","samplingMode","textureType","RefractionTexture","RenderTargetTexture","Plane","textureSize","newTexture","serializationObject","ThinRenderTargetTexture","ThinTexture","options","disposeOnlyFramebuffers","TrailMesh","Mesh","generator","diameter","autoStart","VertexData","positions","normals","meshCenter","AbstractMesh","alpha","wm","l","newGenerator","parsedMesh","HighlightsPostProcess","PostProcess","reusable","LensRenderingPipeline","PostProcessRenderPipeline","parameters","cameras","PostProcessRenderEffect","amount","disableDepthRender","effect","DynamicTexture","context","rand","max","x","y","ValueAndUnit","unit","negativeValueAllowed","host","refValue","decimals","percentage","pixels","source","match","sourceValue","sourceUnit","tmpRect","tmpRect2","tmpV1","tmpV2","Measure","left","top","other","a","result","bottom","addX","addY","addWidth","addHeight","Vector2WithInfo","buttonIndex","Matrix2D","m00","m01","m10","m11","m20","m21","l0","l1","l2","l3","l4","l5","det","detDiv","det4","det5","r0","r1","r2","r3","r4","r5","s","tx","ty","scaleX","scaleY","parentMatrix","MathTools","precision","Control","offset","fontSizeToUse","recursivelyFirePointerOut","control","pointer","className","force","globalCoordinates","Tools","globalViewport","projectedPosition","results","directDescendantsOnly","paddingTop","paddingRight","paddingBottom","paddingLeft","oldLeft","oldTop","parentMeasure","newLeft","newTop","leftAndTopIgnoreAdaptiveScaling","rect","shadowOffsetX","shadowOffsetY","shadowBlur","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","rebuildCount","parentWidth","parentHeight","invalidatedRectangle","intersection","pi","type","pointerId","deltaX","deltaY","coordinates","canNotify","notifyClick","canNotifyClick","key","previousControlOver","child","serialization","controlType","cloned","serializedObject","SerializationHelper","animationIndex","parsedAnimation","internalClass","GetClass","font","__decorate","serialize","RegisterClass","Container","children","linkedMesh","wasAdded","Constants","_b","computedWidth","computedHeight","renderToIntermediateTextureThisDraw","contextToDrawTo","item","contains","childSerializationObject","childData","Rectangle","TextWrapping","TextBlock","text","maxLineWidth","line","newWidth","newHeight","lineSpacing","textWidth","xFrom","yFrom","xTo","yTo","currentStroke","refWidth","refHeight","_lines","_line","lineWidth","lineLength","charWidth","removeChars","characters","textMetrics","lines","words","n","testLine","testWidth","lastLine","currentLine","linesToRemove","rootY","lineCount","Image","preserveProperties","canvas","dataUrl","rotatedImage","srcImage","dstImage","srcLeft","srcTop","srcWidth","srcHeight","dstLeft","dstTop","dstWidth","dstHeight","mult","imageData","cachedData","waitingCallback","svgsrc","elemid","svgExist","svgDoc","docwidth","docheight","svgImage","svgobj","elem","vb_width","vb_height","elem_bbox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","url","sx","sy","sw","sh","tw","th","rowCount","column","row","hRatio","vRatio","centerX","centerY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","Button","alphaStore","imageUrl","textBlock","iconImage","StackPanel","stackWidth","stackHeight","childrenCount","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","Checkbox","actualWidth","actualHeight","offsetWidth","offsetHeight","title","onValueChanged","panel","checkbox","header","TextWrapper","txt","idxStart","idxEnd","insertTxt","newCharacters","idx","from","temp","to","rWord","InputText","flag","valueAsString","clipboardInfo","ClipboardEventTypes","keyCode","evt","deletePosition","insertPosition","moveLeft","moveRight","ev","clipTextLeft","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","highlightCursorOffsetWidth","highlightCursorLeft","textWrapper","Grid","isPixel","current","cell","childIndex","previousKey","goodContainer","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","rowDefinition","columnDefinition","split","cd","rd","columnValue","rowValue","cellInfo","rowNumber","columnNumber","ColorPicker","radius","wheelThickness","squareSize","hueValue","lgh","lgv","thickness","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","alphaRatio","alphaAmount","maxAlpha","minAlpha","lowerRadius","upperRadius","cx","cy","radiusSq","innerRadiusSq","dx","dy","advancedTexture","resolve","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","currentSwatchesOutlineColor","luminanceLimitColor","luminanceLimit","iconColorDark","iconColorLight","buttonFontSize","butEdit","inputFieldLabels","inputTextBackgroundColor","inputTextColor","swatchNumber","swatchDrawer","editSwatchMode","butSave","lastVal","activeField","dialogContainer","topRow","initialRows","gutterCount","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","closeIconColor","closePicker","currentSwatch","dialogBody","dialogBodyCols","pickerGrid","picker","editSwatches","updateValues","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","newSwatch","revertColor","swatchOutline","currentText","buttonGrid","buttonGridRows","buttonWidth","buttonHeight","butOK","butCancel","disableButton","setEditButtonVisibility","updateSwatches","pickerColorValues","currentColor","rgbValuesQuadrant","labelText","rValInt","updateInt","gValInt","bValInt","rValDec","updateFloat","gValDec","bValDec","hexValueQuadrant","hexVal","minusPound","val","newHexValue","checkHex","leadingZero","inputField","pickedColor","field","channel","newSwatchRGB","deleteSwatch","createSwatch","icon","swatch","swatchColor","metadata","mode","thisButton","button","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","enableButton","disabled","Ellipse","FocusableButton","InputTextArea","code","rightDelta","upperLine","tmpIndex","relativeIndex","currentWidth","upperWidth","upperLineRelativeIndex","underLine","underWidth","underLineRelativeIndex","flushedLine","char","longerString","acc","valueLength","accLength","longerStringWidth","totalHeight","tmpLength","selectedHeight","textTop","deltaIndex","cursorTop","startLineIndex","endLineIndex","highlightRootY","highlightRootX","begin","end","leftOffsetWidth","selectedText","hightlightWidth","globalIndex","lastClickedCoordinateY","relativeCoordinateY","relativeXPosition","_evt","InputPassword","pwdTextWrapper","Line","MultiLinePoint","multiLine","xValue","yValue","MultiLine","items","point","first","previousPoint","RadioButton","childRadio","offseHeight","group","isChecked","radio","BaseSlider","thumbThickness","Slider","thumbPosition","SelectorGroup","label","groupHeading","selectorNb","CheckboxGroup","func","checked","state","_selector","RadioGroup","nb","SliderGroup","onValueChange","SelectionPanel","groups","separator","bar","groupNb","onVal","_ScrollViewerWindow","renderWidth","renderHeight","measure","bStartX","bEndX","bEndY","bStartY","bucket","lstc","scrollLeft","scrollTop","maxWidth","maxHeight","ScrollBar","invert","sign","delta","ImageScrollBar","rotatedValue","ScrollViewer","isImageBased","hb","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","barControl","barContainer","isVertical","rotation","ToggleButton","childToggle","KeyPropertySet","VirtualKeyboard","propertySet","keys","propertySets","maxKey","properties","shiftState","rowContainer","button_tblock","input","onFocusObserver","onBlurObserver","filtered","connectedInputText","returnValue","stackPanel","DisplayGrid","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","backgroundImage","thumbImage","valueBarImage","Style","AdvancedDynamicTexture","rwidth","rheight","typeName","rawEvt","ClipboardInfo","info","KeyboardEventTypes","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","overlapGroup","deltaStep","repelFactor","controlsForGroup","descendants","control1","velocity","control2","diffLength","globalViewPort","targetX","targetY","skipUpdate","skipRender","cursor","viewport","list","tempViewport","originalCameraToUseForPointers","rigViewport","rigCamera","transformedX","transformedY","uv","textureMatrix","homogeneousTextureMatrix","fX","fY","supportPointerMove","friendlyControls","canMoveFocus","otherHost","pick","pickFunction","forcePicking","pointerEvent","scaleToSize","newName","clone","snippetId","appendToAdt","adt","serialized","snippet","reject","request","gui","payload","DecodeBase64ToBinary","onlyAlphaTesting","materialSetupCallback","uniqueId","RandomGUID","texture","internalClassType","material","foreground","sampling","adaptiveScaling","resultScene","newScale","Vector3WithInfo","Control3D","node","originMeshPosition","ContentDisplay3D","facadeTexture","AbstractButton3D","Button3D","faceUV","Vector4","CreateBox","StandardMaterial","Container3D","VolumeBasedPanel","rows","columns","controlCount","currentInverseWorld","boundingBox","extendSize","startOffsetX","startOffsetY","nodeGrid","cellCounter","r","CylinderPanel","nodePosition","newPos","Axis","Space","yAngle","shader","ShaderStore","name$j","shader$j","name$i","shader$i","FluentMaterialDefines","MaterialDefines","FluentMaterial","PushMaterial","subMesh","attribs","shaderName","uniforms","samplers","uniformBuffers","MaterialHelper","join","world","matrix","forceDisposeEffect","rootUrl","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","TouchHolographicMenu","wasLayoutBlocked","_control","HandMenu","xr","HandConstraintBehavior","name$h","shader$h","name$g","shader$g","FluentBackplateMaterialDefines","FluentBackplateMaterial","fallbacks","EffectFallbacks","HolographicBackplate","id","_shareMaterials","collisionMesh","SceneLoader","importedModel","HolographicButton","rightHandedScene","CreatePlane","tooltipBackground","mat","shareMaterials","name$f","shader$f","name$e","shader$e","FluentButtonMaterialDefines","FluentButtonMaterial","TouchButton3D","frontWorldDir","transformedDirection","newState","collidablePos","touchPoint","interactionHeight","interactionPos","basePos","frontDir","d","providedType","nearMeshPosition","activeInteractionCount","TouchHolographicButton","isVisible","scale","hoverPosition","DomManagement","alphaMesh","importedFrontPlate","tn","DefaultBehavior","ownerMesh","draggablesMeshes","sceneUnderstandingMeshes","event","name$d","shader$d","name$c","shader$c","HandleMaterial","scaleDiff","colorDiff","TmpColors","HandleState","GizmoHandle","gizmo","positionOffset","dragStartFn","dragFn","dragEndFn","dragBehavior","BaseSixDofDragBehavior","SideHandle","verticalBox","sideNode","CornerHandle","horizontalBox","angleNode","SlateGizmo","Gizmo","pickedMesh","handle","utilityLayer","masksCorners","corner","originStart","dimensionsStart","masks","side","aspectRatio","invertDiagonal","axis","dot","dimensions","mask","keepAspectRatio","impact","clampedDimensions","isCorner","offsetOriginMasked","offsetDimensionsMasked","moveFn","dragOrigin","toObjectFrame","dragPlaneNormal","projectToRef","origin","dragStart","dragging","dragEnd","quaternionOrigin","directionOrigin","worldPivot","worldPlaneNormal","PivotTools","originalParent","handleScaling","scaledHeight","scaledWidth","distanceFromCamera","HolographicSlate","newRatio","followButton","titleBar","titleBarTitle","contentPlate","backPlate","contentPlateHeight","rightHandScene","tex","origin2","isToggled","worldDimensions","rightWorld","projectedOffset","startViewport","upWorld","resetAspect","backward","parent","NearMenu","PlanePanel","ScatterPanel","meshes","count","distance1","distance2","radiusPaddingSquared","cellSize","difference2D","difference","combinedRadius","distance","minSeparation","name$b","shader$b","name$a","shader$a","MRDLSliderBarMaterialDefines","MRDLSliderBarMaterial","name$9","name$8","shader$8","MRDLSliderThumbMaterialDefines","MRDLSliderThumbMaterial"],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BCnPf,MAAQC,GAAO,8BACfC,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCiKzBhM,GAAK,aAAA+L,EAAA,EAAAC,GAGL,MAAAC,WAAA3L,EAAA,CACA,aAAA,CACA,MAAA,EAIA,KAAmB,YAAQ,GAC3B,KAAmB,cAAmB,GAC7B,KAAA,oBAAA,GACD,KAAA,aAAY,GACf,KAAA,SAAA,GACL,KAAA,QAAA,CACA,CACA,CAIA,MAAA4L,UAAgD1L,EAAK,CACrD,YAAgBj0B,EAASzD,EAAA,CACZ,MAAAyD,EAAAzD,CAAA,EAIL,KAAK,OAAM,KAIP,KAAA,WAA0B,KAItC,KAAgB,kBAAqC,KAI7C,KAAK,UAAA,KAIG,KAAA,iBAAA,EAIR,KAAI,cAAa,EAIZ,KAAA,eAAA,EAIJ,KAAA,ix_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]}