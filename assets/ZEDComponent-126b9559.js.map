{"version":3,"file":"ZEDComponent-126b9559.js","sources":["../../node_modules/@babylonjs/core/Instrumentation/engineInstrumentation.js","../../node_modules/@babylonjs/core/Instrumentation/sceneInstrumentation.js","../../src/data/CacheData.ts","../../node_modules/@hmans/event/dist/hmans-event.esm.js","../../node_modules/@miniplex/bucket/dist/miniplex-bucket.esm.js","../../node_modules/@miniplex/core/dist/miniplex-core.esm.js","../../src/World.ts","../../src/system/GUIDisplaySystem.ts","../../src/system/ReflectorSystem.ts","../../src/util/Utile.ts","../../src/system/TransparentSystem.ts","../../src/system/VideoPlayerSystem.ts","../../src/system/CeilingSystem.ts","../../src/system/TransformSystem.ts","../../src/system/MagnetismGhostSystem.ts","../../src/system/MagnetismSystem.ts","../../src/system/PointerDragSystem.ts","../../src/system/ActiveHomeSystem.ts","../../src/util/AnimationHelper.ts","../../src/util/EasingFunctionType.ts","../../src/system/OpenableSystem.ts","../../src/system/LightControllerSystem.ts","../../src/system/ThingStateSystem.ts","../../src/system/FloorplanSystem.ts","../../src/system/CameraTargetSystem.ts","../../src/system/HallwaySystem.ts","../../src/system/MaterialChangeSystem.ts","../../src/system/StructureSystem.ts","../../src/system/RoomSystem.ts","../../src/manager/CameraManager.ts","../../src/manager/FurnitureManager.ts","../../src/manager/GraphicManager.ts","../../src/manager/SystemManager.ts","../../src/manager/singleton/ObservableManager.ts","../../src/manager/singleton/RenderManager.ts","../../src/material/RoomLightMaterial.ts","../../src/manager/singleton/MaterialPluginManager.ts","../../src/components/VideoPlayer.ts","../../src/components/Structure.ts","../../src/components/ThingState.ts","../../src/util/camera/CameraUtils.ts","../../src/data/CameraType.ts","../../src/manager/PerformanceProfiler.ts","../../src/util/Profile.ts","../../src/data/HomeLoader.ts","../../src/data/PostprocessSettings.ts","../../src/util/camera/ArcRotateCameraPointersInput.ts","../../src/util/camera/CameraAnimationHelper.ts","../../src/util/camera/deviceOrientationCamera.ts","../../src/util/camera/freeCameraDeviceOrientationInput.ts","../../src/ZEDCamera.ts","../../src/util/camera/GyroPinchHandler.ts","../../src/util/camera/GyroVerticalDragHandler.ts","../../src/ZED.ts","../../src/react/hooks/useZed.tsx","../../src/react/ZEDComponent.tsx"],"sourcesContent":["import { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n */\nexport class EngineInstrumentation {\n    // Properties\n    /**\n     * Gets the perf counter used for GPU frame time\n     */\n    get gpuFrameTimeCounter() {\n        return this.engine.getGPUFrameTimeCounter();\n    }\n    /**\n     * Gets the GPU frame time capture status\n     */\n    get captureGPUFrameTime() {\n        return this._captureGPUFrameTime;\n    }\n    /**\n     * Enable or disable the GPU frame time capture\n     */\n    set captureGPUFrameTime(value) {\n        if (value === this._captureGPUFrameTime) {\n            return;\n        }\n        this._captureGPUFrameTime = value;\n        this.engine.captureGPUFrameTime(value);\n    }\n    /**\n     * Gets the perf counter used for shader compilation time\n     */\n    get shaderCompilationTimeCounter() {\n        return this._shaderCompilationTime;\n    }\n    /**\n     * Gets the shader compilation time capture status\n     */\n    get captureShaderCompilationTime() {\n        return this._captureShaderCompilationTime;\n    }\n    /**\n     * Enable or disable the shader compilation time capture\n     */\n    set captureShaderCompilationTime(value) {\n        if (value === this._captureShaderCompilationTime) {\n            return;\n        }\n        this._captureShaderCompilationTime = value;\n        if (value) {\n            this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\n                this._shaderCompilationTime.fetchNewFrame();\n                this._shaderCompilationTime.beginMonitoring();\n            });\n            this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\n                this._shaderCompilationTime.endMonitoring();\n            });\n        }\n        else {\n            this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n            this._onBeforeShaderCompilationObserver = null;\n            this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n            this._onAfterShaderCompilationObserver = null;\n        }\n    }\n    /**\n     * Instantiates a new engine instrumentation.\n     * This class can be used to get instrumentation data from a Babylon engine\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\n     * @param engine Defines the engine to instrument\n     */\n    constructor(\n    /**\n     * Define the instrumented engine.\n     */\n    engine) {\n        this.engine = engine;\n        this._captureGPUFrameTime = false;\n        this._captureShaderCompilationTime = false;\n        this._shaderCompilationTime = new PerfCounter();\n        // Observers\n        this._onBeginFrameObserver = null;\n        this._onEndFrameObserver = null;\n        this._onBeforeShaderCompilationObserver = null;\n        this._onAfterShaderCompilationObserver = null;\n    }\n    /**\n     * Dispose and release associated resources.\n     */\n    dispose() {\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n        this._onBeginFrameObserver = null;\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n        this._onEndFrameObserver = null;\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n        this._onBeforeShaderCompilationObserver = null;\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n        this._onAfterShaderCompilationObserver = null;\n        this.engine = null;\n    }\n}\n//# sourceMappingURL=engineInstrumentation.js.map","import { Tools } from \"../Misc/tools.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\n */\nexport class SceneInstrumentation {\n    // Properties\n    /**\n     * Gets the perf counter used for active meshes evaluation time\n     */\n    get activeMeshesEvaluationTimeCounter() {\n        return this._activeMeshesEvaluationTime;\n    }\n    /**\n     * Gets the active meshes evaluation time capture status\n     */\n    get captureActiveMeshesEvaluationTime() {\n        return this._captureActiveMeshesEvaluationTime;\n    }\n    /**\n     * Enable or disable the active meshes evaluation time capture\n     */\n    set captureActiveMeshesEvaluationTime(value) {\n        if (value === this._captureActiveMeshesEvaluationTime) {\n            return;\n        }\n        this._captureActiveMeshesEvaluationTime = value;\n        if (value) {\n            this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\n                Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n                this._activeMeshesEvaluationTime.beginMonitoring();\n            });\n            this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(() => {\n                Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n                this._activeMeshesEvaluationTime.endMonitoring(false);\n            });\n        }\n        else {\n            this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n            this._onBeforeActiveMeshesEvaluationObserver = null;\n            this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n            this._onAfterActiveMeshesEvaluationObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for render targets render time\n     */\n    get renderTargetsRenderTimeCounter() {\n        return this._renderTargetsRenderTime;\n    }\n    /**\n     * Gets the render targets render time capture status\n     */\n    get captureRenderTargetsRenderTime() {\n        return this._captureRenderTargetsRenderTime;\n    }\n    /**\n     * Enable or disable the render targets render time capture\n     */\n    set captureRenderTargetsRenderTime(value) {\n        if (value === this._captureRenderTargetsRenderTime) {\n            return;\n        }\n        this._captureRenderTargetsRenderTime = value;\n        if (value) {\n            this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(() => {\n                Tools.StartPerformanceCounter(\"Render targets rendering\");\n                this._renderTargetsRenderTime.beginMonitoring();\n            });\n            this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(() => {\n                Tools.EndPerformanceCounter(\"Render targets rendering\");\n                this._renderTargetsRenderTime.endMonitoring(false);\n            });\n        }\n        else {\n            this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n            this._onBeforeRenderTargetsRenderObserver = null;\n            this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n            this._onAfterRenderTargetsRenderObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for particles render time\n     */\n    get particlesRenderTimeCounter() {\n        return this._particlesRenderTime;\n    }\n    /**\n     * Gets the particles render time capture status\n     */\n    get captureParticlesRenderTime() {\n        return this._captureParticlesRenderTime;\n    }\n    /**\n     * Enable or disable the particles render time capture\n     */\n    set captureParticlesRenderTime(value) {\n        if (value === this._captureParticlesRenderTime) {\n            return;\n        }\n        this._captureParticlesRenderTime = value;\n        if (value) {\n            this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(() => {\n                Tools.StartPerformanceCounter(\"Particles\");\n                this._particlesRenderTime.beginMonitoring();\n            });\n            this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(() => {\n                Tools.EndPerformanceCounter(\"Particles\");\n                this._particlesRenderTime.endMonitoring(false);\n            });\n        }\n        else {\n            this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n            this._onBeforeParticlesRenderingObserver = null;\n            this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n            this._onAfterParticlesRenderingObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for sprites render time\n     */\n    get spritesRenderTimeCounter() {\n        return this._spritesRenderTime;\n    }\n    /**\n     * Gets the sprites render time capture status\n     */\n    get captureSpritesRenderTime() {\n        return this._captureSpritesRenderTime;\n    }\n    /**\n     * Enable or disable the sprites render time capture\n     */\n    set captureSpritesRenderTime(value) {\n        if (value === this._captureSpritesRenderTime) {\n            return;\n        }\n        this._captureSpritesRenderTime = value;\n        if (!this.scene.spriteManagers) {\n            return;\n        }\n        if (value) {\n            this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(() => {\n                Tools.StartPerformanceCounter(\"Sprites\");\n                this._spritesRenderTime.beginMonitoring();\n            });\n            this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(() => {\n                Tools.EndPerformanceCounter(\"Sprites\");\n                this._spritesRenderTime.endMonitoring(false);\n            });\n        }\n        else {\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n            this._onBeforeSpritesRenderingObserver = null;\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n            this._onAfterSpritesRenderingObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for physics time\n     */\n    get physicsTimeCounter() {\n        return this._physicsTime;\n    }\n    /**\n     * Gets the physics time capture status\n     */\n    get capturePhysicsTime() {\n        return this._capturePhysicsTime;\n    }\n    /**\n     * Enable or disable the physics time capture\n     */\n    set capturePhysicsTime(value) {\n        if (value === this._capturePhysicsTime) {\n            return;\n        }\n        if (!this.scene.onBeforePhysicsObservable) {\n            return;\n        }\n        this._capturePhysicsTime = value;\n        if (value) {\n            this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(() => {\n                Tools.StartPerformanceCounter(\"Physics\");\n                this._physicsTime.beginMonitoring();\n            });\n            this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(() => {\n                Tools.EndPerformanceCounter(\"Physics\");\n                this._physicsTime.endMonitoring();\n            });\n        }\n        else {\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n            this._onBeforePhysicsObserver = null;\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n            this._onAfterPhysicsObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for animations time\n     */\n    get animationsTimeCounter() {\n        return this._animationsTime;\n    }\n    /**\n     * Gets the animations time capture status\n     */\n    get captureAnimationsTime() {\n        return this._captureAnimationsTime;\n    }\n    /**\n     * Enable or disable the animations time capture\n     */\n    set captureAnimationsTime(value) {\n        if (value === this._captureAnimationsTime) {\n            return;\n        }\n        this._captureAnimationsTime = value;\n        if (value) {\n            this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(() => {\n                this._animationsTime.endMonitoring();\n            });\n        }\n        else {\n            this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n            this._onAfterAnimationsObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for frame time capture\n     */\n    get frameTimeCounter() {\n        return this._frameTime;\n    }\n    /**\n     * Gets the frame time capture status\n     */\n    get captureFrameTime() {\n        return this._captureFrameTime;\n    }\n    /**\n     * Enable or disable the frame time capture\n     */\n    set captureFrameTime(value) {\n        this._captureFrameTime = value;\n    }\n    /**\n     * Gets the perf counter used for inter-frames time capture\n     */\n    get interFrameTimeCounter() {\n        return this._interFrameTime;\n    }\n    /**\n     * Gets the inter-frames time capture status\n     */\n    get captureInterFrameTime() {\n        return this._captureInterFrameTime;\n    }\n    /**\n     * Enable or disable the inter-frames time capture\n     */\n    set captureInterFrameTime(value) {\n        this._captureInterFrameTime = value;\n    }\n    /**\n     * Gets the perf counter used for render time capture\n     */\n    get renderTimeCounter() {\n        return this._renderTime;\n    }\n    /**\n     * Gets the render time capture status\n     */\n    get captureRenderTime() {\n        return this._captureRenderTime;\n    }\n    /**\n     * Enable or disable the render time capture\n     */\n    set captureRenderTime(value) {\n        if (value === this._captureRenderTime) {\n            return;\n        }\n        this._captureRenderTime = value;\n        if (value) {\n            this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(() => {\n                this._renderTime.beginMonitoring();\n                Tools.StartPerformanceCounter(\"Main render\");\n            });\n            this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(() => {\n                this._renderTime.endMonitoring(false);\n                Tools.EndPerformanceCounter(\"Main render\");\n            });\n        }\n        else {\n            this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n            this._onBeforeDrawPhaseObserver = null;\n            this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n            this._onAfterDrawPhaseObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for camera render time capture\n     */\n    get cameraRenderTimeCounter() {\n        return this._cameraRenderTime;\n    }\n    /**\n     * Gets the camera render time capture status\n     */\n    get captureCameraRenderTime() {\n        return this._captureCameraRenderTime;\n    }\n    /**\n     * Enable or disable the camera render time capture\n     */\n    set captureCameraRenderTime(value) {\n        if (value === this._captureCameraRenderTime) {\n            return;\n        }\n        this._captureCameraRenderTime = value;\n        if (value) {\n            this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add((camera) => {\n                this._cameraRenderTime.beginMonitoring();\n                Tools.StartPerformanceCounter(`Rendering camera ${camera.name}`);\n            });\n            this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add((camera) => {\n                this._cameraRenderTime.endMonitoring(false);\n                Tools.EndPerformanceCounter(`Rendering camera ${camera.name}`);\n            });\n        }\n        else {\n            this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n            this._onBeforeCameraRenderObserver = null;\n            this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n            this._onAfterCameraRenderObserver = null;\n        }\n    }\n    /**\n     * Gets the perf counter used for draw calls\n     */\n    get drawCallsCounter() {\n        return this.scene.getEngine()._drawCalls;\n    }\n    /**\n     * Instantiates a new scene instrumentation.\n     * This class can be used to get instrumentation data from a Babylon engine\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#sceneinstrumentation\n     * @param scene Defines the scene to instrument\n     */\n    constructor(\n    /**\n     * Defines the scene to instrument\n     */\n    scene) {\n        this.scene = scene;\n        this._captureActiveMeshesEvaluationTime = false;\n        this._activeMeshesEvaluationTime = new PerfCounter();\n        this._captureRenderTargetsRenderTime = false;\n        this._renderTargetsRenderTime = new PerfCounter();\n        this._captureFrameTime = false;\n        this._frameTime = new PerfCounter();\n        this._captureRenderTime = false;\n        this._renderTime = new PerfCounter();\n        this._captureInterFrameTime = false;\n        this._interFrameTime = new PerfCounter();\n        this._captureParticlesRenderTime = false;\n        this._particlesRenderTime = new PerfCounter();\n        this._captureSpritesRenderTime = false;\n        this._spritesRenderTime = new PerfCounter();\n        this._capturePhysicsTime = false;\n        this._physicsTime = new PerfCounter();\n        this._captureAnimationsTime = false;\n        this._animationsTime = new PerfCounter();\n        this._captureCameraRenderTime = false;\n        this._cameraRenderTime = new PerfCounter();\n        // Observers\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this._onAfterActiveMeshesEvaluationObserver = null;\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this._onAfterRenderTargetsRenderObserver = null;\n        this._onAfterRenderObserver = null;\n        this._onBeforeDrawPhaseObserver = null;\n        this._onAfterDrawPhaseObserver = null;\n        this._onBeforeAnimationsObserver = null;\n        this._onBeforeParticlesRenderingObserver = null;\n        this._onAfterParticlesRenderingObserver = null;\n        this._onBeforeSpritesRenderingObserver = null;\n        this._onAfterSpritesRenderingObserver = null;\n        this._onBeforePhysicsObserver = null;\n        this._onAfterPhysicsObserver = null;\n        this._onAfterAnimationsObserver = null;\n        this._onBeforeCameraRenderObserver = null;\n        this._onAfterCameraRenderObserver = null;\n        // Before render\n        this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\n            if (this._captureActiveMeshesEvaluationTime) {\n                this._activeMeshesEvaluationTime.fetchNewFrame();\n            }\n            if (this._captureRenderTargetsRenderTime) {\n                this._renderTargetsRenderTime.fetchNewFrame();\n            }\n            if (this._captureFrameTime) {\n                Tools.StartPerformanceCounter(\"Scene rendering\");\n                this._frameTime.beginMonitoring();\n            }\n            if (this._captureInterFrameTime) {\n                this._interFrameTime.endMonitoring();\n            }\n            if (this._captureParticlesRenderTime) {\n                this._particlesRenderTime.fetchNewFrame();\n            }\n            if (this._captureSpritesRenderTime) {\n                this._spritesRenderTime.fetchNewFrame();\n            }\n            if (this._captureAnimationsTime) {\n                this._animationsTime.beginMonitoring();\n            }\n            if (this._captureRenderTime) {\n                this._renderTime.fetchNewFrame();\n            }\n            if (this._captureCameraRenderTime) {\n                this._cameraRenderTime.fetchNewFrame();\n            }\n            this.scene.getEngine()._drawCalls.fetchNewFrame();\n        });\n        // After render\n        this._onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\n            if (this._captureFrameTime) {\n                Tools.EndPerformanceCounter(\"Scene rendering\");\n                this._frameTime.endMonitoring();\n            }\n            if (this._captureRenderTime) {\n                this._renderTime.endMonitoring(false);\n            }\n            if (this._captureInterFrameTime) {\n                this._interFrameTime.beginMonitoring();\n            }\n            if (this._captureActiveMeshesEvaluationTime) {\n                this._activeMeshesEvaluationTime.endFrame();\n            }\n            if (this._captureRenderTargetsRenderTime) {\n                this._renderTargetsRenderTime.endFrame();\n            }\n            if (this._captureParticlesRenderTime) {\n                this._particlesRenderTime.endFrame();\n            }\n            if (this._captureSpritesRenderTime) {\n                this._spritesRenderTime.endFrame();\n            }\n            if (this._captureRenderTime) {\n                this._renderTime.endFrame();\n            }\n            if (this._captureCameraRenderTime) {\n                this._cameraRenderTime.endFrame();\n            }\n        });\n    }\n    /**\n     * Dispose and release associated resources.\n     */\n    dispose() {\n        this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        this._onAfterRenderObserver = null;\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n        this._onAfterActiveMeshesEvaluationObserver = null;\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n        this._onAfterRenderTargetsRenderObserver = null;\n        this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n        this._onBeforeAnimationsObserver = null;\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n        this._onBeforeParticlesRenderingObserver = null;\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n        this._onAfterParticlesRenderingObserver = null;\n        if (this._onBeforeSpritesRenderingObserver) {\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n            this._onBeforeSpritesRenderingObserver = null;\n        }\n        if (this._onAfterSpritesRenderingObserver) {\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n            this._onAfterSpritesRenderingObserver = null;\n        }\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n        this._onBeforeDrawPhaseObserver = null;\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n        this._onAfterDrawPhaseObserver = null;\n        if (this._onBeforePhysicsObserver) {\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n            this._onBeforePhysicsObserver = null;\n        }\n        if (this._onAfterPhysicsObserver) {\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n            this._onAfterPhysicsObserver = null;\n        }\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n        this._onAfterAnimationsObserver = null;\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._onBeforeCameraRenderObserver = null;\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        this._onAfterCameraRenderObserver = null;\n        this.scene = null;\n    }\n}\n//# sourceMappingURL=sceneInstrumentation.js.map","export async function cacheJsonData(\r\n  cacheName: string,\r\n  fileName: string,\r\n  data: Record<string, any>\r\n) {\r\n  if (typeof caches === 'undefined') return;\r\n\r\n  const url = `${window.location.origin}/${fileName}`;\r\n  const cache = await caches.open(cacheName);\r\n  const jsonStr = JSON.stringify(data);\r\n  const response = new Response(jsonStr, { headers: { 'content-type': 'application/json' } });\r\n  await cache.put(url, response);\r\n\r\n  console.log(`${cacheName} successfully saved`);\r\n}\r\n\r\nexport async function getJsonDataFromCache<T>(\r\n  cacheName: string,\r\n  fileName: string\r\n): Promise<T | undefined> {\r\n  if (typeof caches === 'undefined') return;\r\n\r\n  if (!(await caches.has(cacheName))) return undefined;\r\n\r\n  const url = `${window.location.origin}/${fileName}`;\r\n  const cache = await caches.open(cacheName);\r\n\r\n  const response = await cache.match(url);\r\n  if (response && response.headers.get('content-type')?.includes('application/json')) {\r\n    const jsonStr = await response.text();\r\n    console.log(`${cacheName} successfully loaded`);\r\n    return JSON.parse(jsonStr) as T;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport async function deleteCache(cacheName: string) {\r\n  if (typeof caches === 'undefined') return;\r\n\r\n  caches\r\n    .delete(cacheName)\r\n    .then(() => {\r\n      console.log(`${cacheName} successfully deleted`);\r\n    })\r\n    .catch((error) => {\r\n      console.error(`${cacheName} deletion failed:`, error);\r\n    });\r\n}\r\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Event = /*#__PURE__*/function () {\n  function Event() {\n    _classCallCheck(this, Event);\n\n    _defineProperty(this, \"listeners\", new Set());\n\n    this.emit = this.emit.bind(this);\n  }\n\n  _createClass(Event, [{\n    key: \"clear\",\n    value: function clear() {\n      this.listeners.clear();\n    }\n  }, {\n    key: \"add\",\n    value: function add(listener) {\n      var _this = this;\n\n      this.listeners.add(listener);\n      return function () {\n        return _this.remove(listener);\n      };\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(listener) {\n      this.listeners[\"delete\"](listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(payload) {\n      var _iterator = _createForOfIteratorHelper(this.listeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener(payload);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return Event;\n}();\n\nexport { Event };\n","import { Event } from '@hmans/event';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nvar _Symbol$iterator;\n\n/**\n * A class wrapping an array of entities of a specific type, providing\n * performance-optimized methods for adding, looking up and removing entities, and events\n * for when entities are added or removed.\n */\n_Symbol$iterator = Symbol.iterator;\nvar Bucket = /*#__PURE__*/function () {\n  function Bucket() {\n    var entities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, Bucket);\n    _defineProperty(this, \"onEntityAdded\", new Event());\n    _defineProperty(this, \"onEntityRemoved\", new Event());\n    _defineProperty(this, \"entityPositions\", new Map());\n    this.entities = entities;\n    this.add = this.add.bind(this);\n    this.remove = this.remove.bind(this);\n\n    /* Register all entity positions */\n    for (var i = 0; i < entities.length; i++) {\n      this.entityPositions.set(entities[i], i);\n    }\n  }\n\n  /**\n   * Fired when an entity has been added to the bucket.\n   */\n  _createClass(Bucket, [{\n    key: _Symbol$iterator,\n    value: /* Custom iterator that iterates over all entities in reverse order. */\n    function value() {\n      var _this = this;\n      var index = this.entities.length;\n      var result = {\n        value: undefined,\n        done: false\n      };\n      return {\n        next: function next() {\n          result.value = _this.entities[--index];\n          result.done = index < 0;\n          return result;\n        }\n      };\n    }\n  }, {\n    key: \"size\",\n    get:\n    /**\n     * Returns the total size of the bucket, i.e. the number of entities it contains.\n     */\n    function get() {\n      return this.entities.length;\n    }\n\n    /**\n     * Returns the first entity in the bucket, or `undefined` if the bucket is empty.\n     */\n  }, {\n    key: \"first\",\n    get: function get() {\n      return this.entities[0];\n    }\n\n    /**\n     * Returns true if the bucket contains the given entity.\n     *\n     * @param entity The entity to check for.\n     * @returns `true` if the specificed entity is in this bucket, `false` otherwise.\n     */\n  }, {\n    key: \"has\",\n    value: function has(entity) {\n      return this.entityPositions.has(entity);\n    }\n\n    /**\n     * Adds the given entity to the bucket. If the entity is already in the bucket, it is\n     * not added again.\n     *\n     * @param entity The entity to add to the bucket.\n     * @returns The entity passed into this function (regardless of whether it was added or not).\n     */\n  }, {\n    key: \"add\",\n    value: function add(entity) {\n      if (entity && !this.has(entity)) {\n        this.entities.push(entity);\n        this.entityPositions.set(entity, this.entities.length - 1);\n\n        /* Emit our own onEntityAdded event */\n        this.onEntityAdded.emit(entity);\n      }\n      return entity;\n    }\n\n    /**\n     * Removes the given entity from the bucket. If the entity is not in the bucket, nothing\n     * happens.\n     *\n     * @param entity The entity to remove from the bucket.\n     * @returns The entity passed into this function (regardless of whether it was removed or not).\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(entity) {\n      if (this.has(entity)) {\n        /* Emit our own onEntityRemoved event. */\n        this.onEntityRemoved.emit(entity);\n\n        /* Get the entity's current position. */\n        var index = this.entityPositions.get(entity);\n        this.entityPositions[\"delete\"](entity);\n\n        /* Perform shuffle-pop if there is more than one entity. */\n        var other = this.entities[this.entities.length - 1];\n        if (other !== entity) {\n          this.entities[index] = other;\n          this.entityPositions.set(other, index);\n        }\n\n        /* Remove the entity from the entities array. */\n        this.entities.pop();\n      }\n      return entity;\n    }\n\n    /**\n     * Removes all entities from the bucket. Will cause the `onEntityRemoved` event to be\n     * fired for each entity.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _iterator = _createForOfIteratorHelper(this),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entity = _step.value;\n          this.remove(entity);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n  return Bucket;\n}();\n\nexport { Bucket };\n","import { Bucket } from '@miniplex/bucket';\nexport * from '@miniplex/bucket';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nvar Memoizer = /*#__PURE__*/function () {\n  function Memoizer() {\n    _classCallCheck(this, Memoizer);\n    _defineProperty(this, \"cache\", new Map());\n  }\n  _createClass(Memoizer, [{\n    key: \"get\",\n    value: function get(key, predicate) {\n      var value = this.cache.get(key);\n      if (value === undefined) {\n        this.cache.set(key, predicate);\n        value = predicate;\n      }\n      return value;\n    }\n  }]);\n  return Memoizer;\n}();\n\nfunction isArchetype(entity) {\n  for (var _len = arguments.length, components = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    components[_key - 1] = arguments[_key];\n  }\n  return hasComponents.apply(void 0, [entity].concat(components));\n}\nfunction hasComponents(entity) {\n  for (var _len2 = arguments.length, components = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    components[_key2 - 1] = arguments[_key2];\n  }\n  return components.every(function (c) {\n    return entity[c] !== undefined;\n  });\n}\nfunction hasAnyComponents(entity) {\n  for (var _len3 = arguments.length, components = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    components[_key3 - 1] = arguments[_key3];\n  }\n  return components.some(function (c) {\n    return entity[c] !== undefined;\n  });\n}\nfunction hasNoComponents(entity) {\n  for (var _len4 = arguments.length, components = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    components[_key4 - 1] = arguments[_key4];\n  }\n  return components.every(function (c) {\n    return entity[c] === undefined;\n  });\n}\n\n/* not */\n\nvar notCache = new Memoizer();\nvar not = function not(predicate) {\n  return notCache.get(predicate, function (entity) {\n    return !predicate(entity);\n  });\n};\n\nvar normalizeComponents = function normalizeComponents(components) {\n  return _toConsumableArray(new Set(components.sort().filter(function (c) {\n    return !!c && c !== \"\";\n  })));\n};\n\n/* Archetype Queries */\n\nvar normalizeQuery = function normalizeQuery(query) {\n  return {\n    \"with\": query[\"with\"] !== undefined ? normalizeComponents(query[\"with\"]) : [],\n    without: query.without !== undefined ? normalizeComponents(query.without) : []\n  };\n};\nvar queryCache = new Memoizer();\nvar memoizeQuery = function memoizeQuery(query) {\n  var normalizedQuery = normalizeQuery(query);\n  var key = JSON.stringify(normalizedQuery);\n  return queryCache.get(key, normalizedQuery);\n};\n\n/**\n * An entity-aware bucket providing methods for creating\n * derived buckets, and tracking the buckets derived from it.\n */\nvar EntityBucket = /*#__PURE__*/function (_Bucket) {\n  _inherits(EntityBucket, _Bucket);\n  var _super = _createSuper(EntityBucket);\n  function EntityBucket() {\n    var _this;\n    _classCallCheck(this, EntityBucket);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"buckets\", new Set());\n    return _this;\n  }\n  _createClass(EntityBucket, [{\n    key: \"wants\",\n    value:\n    /**\n     * Returns `true` if the given entity should be in this bucket. Child classes\n     * should override this method to implement custom bucket logic.\n     *\n     * @param entity The entity to check for.\n     * @returns `true` if this bucket wants the specified entity, `false` otherwise.\n     */\n    function wants(entity) {\n      return true;\n    }\n\n    /**\n     * Evaluates the given entity (`entity`) to check if it should be in this bucket or not.\n     * The entity will be added or removed from this bucket as necessary.\n     *\n     * If you pass a second argument (`future`) into this function, it will be used\n     * for these checks instead of the entity itself. This is useful in sutations\n     * where you're about to make a destructive change to the entity, and want to\n     * give archetype callbacks a chance to run with the entity intact before actually\n     * making the change.\n     *\n     * @param entity The entity that is being evaluated.\n     * @param future An optional future version of the entity that is used in the check.\n     */\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(entity) {\n      var future = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : entity;\n      /* Accept or reject the entity */\n      if (this.wants(future)) {\n        this.add(entity);\n      } else {\n        this.remove(entity);\n      }\n\n      /* If the entity is still in this bucket, update derived buckets. */\n      if (this.has(entity)) {\n        var _iterator = _createForOfIteratorHelper(this.buckets),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var bucket = _step.value;\n            bucket.evaluate(entity, future);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"where\",\n    value: function where(predicate) {\n      var _this2 = this;\n      var index = this.entities.length;\n      var next = function next() {\n        var value;\n        do {\n          value = _this2.entities[--index];\n        } while (value && !predicate(value));\n        return {\n          value: value,\n          done: index < 0\n        };\n      };\n      return _defineProperty({}, Symbol.iterator, function () {\n        return {\n          next: next\n        };\n      });\n    }\n\n    /* with */\n  }, {\n    key: \"with\",\n    value: function _with() {\n      return this.archetype.apply(this, arguments);\n    }\n\n    /* without */\n  }, {\n    key: \"without\",\n    value: function without() {\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n      return this.archetype({\n        without: props\n      });\n    }\n\n    /* Predicate form */\n  }, {\n    key: \"archetype\",\n    value: /* Implementation */\n\n    function archetype(query) {\n      /* Handle the function form */\n      if (typeof query === \"function\") {\n        var _iterator2 = _createForOfIteratorHelper(this.buckets),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _bucket2 = _step2.value;\n            if (_bucket2 instanceof PredicateBucket && _bucket2.predicate === query) {\n              return _bucket2;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var _bucket = new PredicateBucket(this, query);\n        this.buckets.add(_bucket);\n        return _bucket;\n      }\n\n      /* Handle the string form */\n      if (_typeof(query) !== \"object\") {\n        for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          rest[_key3 - 1] = arguments[_key3];\n        }\n        return this.archetype({\n          \"with\": [query].concat(rest)\n        });\n      }\n\n      /* Find and return existing archetype bucket */\n      var memoizedQuery = memoizeQuery(query);\n      var _iterator3 = _createForOfIteratorHelper(this.buckets),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _bucket3 = _step3.value;\n          if (_bucket3 instanceof ArchetypeBucket && _bucket3.query === memoizedQuery) {\n            return _bucket3;\n          }\n        }\n\n        /* Create a new bucket */\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var bucket = new ArchetypeBucket(this, memoizedQuery);\n      this.buckets.add(bucket);\n      return bucket;\n    }\n  }]);\n  return EntityBucket;\n}(Bucket);\nvar DerivedEntityBucket = /*#__PURE__*/function (_EntityBucket) {\n  _inherits(DerivedEntityBucket, _EntityBucket);\n  var _super2 = _createSuper(DerivedEntityBucket);\n  function DerivedEntityBucket(source) {\n    var _this3;\n    _classCallCheck(this, DerivedEntityBucket);\n    _this3 = _super2.call(this);\n    _this3.source = source;\n    return _this3;\n  }\n  _createClass(DerivedEntityBucket, [{\n    key: \"startUpdating\",\n    value: function startUpdating() {\n      var _this4 = this;\n      this.source.onEntityAdded.add(function (e) {\n        if (_this4.wants(e)) _this4.add(e);\n      });\n      this.source.onEntityRemoved.add(function (e) {\n        _this4.remove(e);\n      });\n      this.update();\n    }\n\n    /**\n     * Updates the contents of this bucket by iterating over the entities\n     * in its source bucket, re-checking each one to see if it should be\n     * in this bucket or not.\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _iterator4 = _createForOfIteratorHelper(this.source),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var entity = _step4.value;\n          this.evaluate(entity);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }]);\n  return DerivedEntityBucket;\n}(EntityBucket);\n\n/**\n * A bucket representing a subset of entities that satisfy\n * a given predicate.\n */\nvar PredicateBucket = /*#__PURE__*/function (_DerivedEntityBucket) {\n  _inherits(PredicateBucket, _DerivedEntityBucket);\n  var _super3 = _createSuper(PredicateBucket);\n  function PredicateBucket(source, predicate) {\n    var _this5;\n    _classCallCheck(this, PredicateBucket);\n    _this5 = _super3.call(this, source);\n    _this5.source = source;\n    _this5.predicate = predicate;\n    _this5.startUpdating();\n    return _this5;\n  }\n  _createClass(PredicateBucket, [{\n    key: \"wants\",\n    value: function wants(entity) {\n      return this.predicate(entity);\n    }\n  }]);\n  return PredicateBucket;\n}(DerivedEntityBucket);\n\n/**\n * A bucket representing a subset of entities that have a\n * specific set of components.\n */\nvar ArchetypeBucket = /*#__PURE__*/function (_DerivedEntityBucket2) {\n  _inherits(ArchetypeBucket, _DerivedEntityBucket2);\n  var _super4 = _createSuper(ArchetypeBucket);\n  function ArchetypeBucket(source, query) {\n    var _this6;\n    _classCallCheck(this, ArchetypeBucket);\n    _this6 = _super4.call(this, source);\n    _this6.source = source;\n    _this6.query = query;\n    _this6.startUpdating();\n    return _this6;\n  }\n  _createClass(ArchetypeBucket, [{\n    key: \"wants\",\n    value: function wants(entity) {\n      return hasComponents.apply(void 0, [entity].concat(_toConsumableArray(this.query[\"with\"] || []))) && hasNoComponents.apply(void 0, [entity].concat(_toConsumableArray(this.query.without || [])));\n    }\n  }]);\n  return ArchetypeBucket;\n}(DerivedEntityBucket);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n\nvar World = /*#__PURE__*/function (_EntityBucket) {\n  _inherits(World, _EntityBucket);\n  var _super = _createSuper(World);\n  function World() {\n    var _this;\n    var entities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, World);\n    _this = _super.call(this, entities);\n\n    /* When entities are removed, also make sure to forget about their IDs. */\n    _defineProperty(_assertThisInitialized(_this), \"entityToId\", new Map());\n    _defineProperty(_assertThisInitialized(_this), \"idToEntity\", new Map());\n    _defineProperty(_assertThisInitialized(_this), \"nextId\", 0);\n    _this.onEntityRemoved.add(function (entity) {\n      /* Remove the entity from the ID map */\n      if (_this.entityToId.has(entity)) {\n        var id = _this.entityToId.get(entity);\n        _this.idToEntity[\"delete\"](id);\n        _this.entityToId[\"delete\"](entity);\n      }\n    });\n    return _this;\n  }\n  _createClass(World, [{\n    key: \"update\",\n    value: function (_update) {\n      function update(_x, _x2, _x3) {\n        return _update.apply(this, arguments);\n      }\n      update.toString = function () {\n        return _update.toString();\n      };\n      return update;\n    }(function (entity, update, value) {\n      if (typeof update === \"function\") {\n        var partial = update(entity);\n        partial && Object.assign(entity, partial);\n      } else if (typeof update === \"string\") {\n        entity[update] = value;\n      } else if (update) {\n        Object.assign(entity, update);\n      }\n\n      /* If this world knows about the entity, notify any derived buckets about the change. */\n      if (this.has(entity)) {\n        this.evaluate(entity);\n      }\n      return entity;\n    })\n  }, {\n    key: \"addComponent\",\n    value: function addComponent(entity, component, value) {\n      /* Return early if the entity already has the component. */\n      if (entity[component] !== undefined) return;\n\n      /* Set the component */\n      entity[component] = value;\n\n      /* Touch the entity, triggering re-checks of indices */\n      if (this.has(entity)) {\n        this.evaluate(entity);\n      }\n    }\n  }, {\n    key: \"removeComponent\",\n    value: function removeComponent(entity, component) {\n      /* Return early if the entity doesn't even have the component. */\n      if (entity[component] === undefined) return;\n\n      /* If this world knows about the entity, notify any derived buckets about the change. */\n      if (this.has(entity)) {\n        var future = _objectSpread2({}, entity);\n        delete future[component];\n        this.evaluate(entity, future);\n      }\n\n      /* Remove the component. */\n      delete entity[component];\n    }\n\n    /* IDs */\n  }, {\n    key: \"id\",\n    value: function id(entity) {\n      /* We only ever want to generate IDs for entities that are actually in the world. */\n      if (!this.has(entity)) return undefined;\n\n      /* Lazily generate an ID. */\n      if (!this.entityToId.has(entity)) {\n        var id = this.nextId++;\n        this.entityToId.set(entity, id);\n        this.idToEntity.set(id, entity);\n      }\n      return this.entityToId.get(entity);\n    }\n  }, {\n    key: \"entity\",\n    value: function entity(id) {\n      return this.idToEntity.get(id);\n    }\n  }]);\n  return World;\n}(EntityBucket);\n\nexport { ArchetypeBucket, DerivedEntityBucket, EntityBucket, PredicateBucket, World, hasAnyComponents, hasComponents, hasNoComponents, isArchetype, memoizeQuery, normalizeComponents, normalizeQuery, not };\n","import { GUID } from '@babylonjs/core';\r\nimport { ArchetypeBucket, World } from 'miniplex';\r\n\r\nimport { type Entity } from '@/components';\r\n\r\nconst world = new World<Entity>();\r\nexport { world as World };\r\n\r\nexport const createEntity = (components?: Omit<Entity, 'entityId'>) => {\r\n  const entity = world.add({\r\n    entityId: GUID.RandomId(),\r\n    ...components,\r\n  });\r\n\r\n  const transformNode = entity.TransformNode;\r\n  if (transformNode) {\r\n    // TODO: bindBabylon 내용 중복 해소\r\n    transformNode.metadata = {\r\n      ...transformNode.metadata,\r\n      entity: entity,\r\n    };\r\n  }\r\n  return entity;\r\n};\r\n\r\nexport const clearArchetype = <E>(archetype: ArchetypeBucket<E>) => {\r\n  archetype.clear();\r\n  archetype.onEntityAdded.clear();\r\n  archetype.onEntityRemoved.clear();\r\n};\r\n","import {\r\n  ArcRotateCamera,\r\n  type DeepImmutableObject,\r\n  Matrix,\r\n  Scene,\r\n  Vector3,\r\n  Viewport,\r\n} from '@babylonjs/core';\r\n\r\nimport { type StateByThingType, ThingType } from '@/components';\r\nimport { ObservableManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport type GuiState = {\r\n  key: string;\r\n  /** thing 이름 */\r\n  name: string;\r\n  /** 화면 x 좌표 */\r\n  x: number;\r\n  /** 화면 y 좌표 */\r\n  y: number;\r\n  // /** thing 객체 onCLick() 등 호출 가능 */\r\n  // thing: IThings;\r\n  /** 현재 camera zoom 값에 따라 0~1 사이의 값 반환 min + (max - min) * iconSize로 활용 가능 */\r\n  iconSize: number;\r\n  /** thing type */\r\n  thingType?: ThingType;\r\n  /** thing state */\r\n  thingState?: StateByThingType;\r\n};\r\n\r\nexport class GUIDisplaySystem {\r\n  private targetArchetype = World.with(\r\n    'ActiveHome',\r\n    'Identifier',\r\n    'TransformNode',\r\n    'GUIDisplayable'\r\n  );\r\n  private viewPort?: Viewport;\r\n  private transformMatrix?: Matrix;\r\n\r\n  dispose() {\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  public afterRenderExecute = (scene: Scene) => {\r\n    const guiData = this.guiUpdate(scene);\r\n    ObservableManager.instance.onUpdateGUIPosition.notifyObservers(guiData);\r\n  };\r\n\r\n  private guiUpdate = (scene: Scene): GuiState[] | undefined => {\r\n    const camera = scene.activeCamera;\r\n\r\n    if (camera === null || !(camera instanceof ArcRotateCamera)) return;\r\n\r\n    const engine = scene.getEngine();\r\n    const scalingLevel = engine.getHardwareScalingLevel();\r\n    const viewport = camera.viewport.clone();\r\n    viewport.y = 1 - viewport.y; // bjs origin is SW\r\n\r\n    this.viewPort = viewport.toGlobal(\r\n      engine.getRenderWidth() * scalingLevel,\r\n      engine.getRenderHeight() * scalingLevel\r\n    );\r\n\r\n    if (!this.transformMatrix) {\r\n      this.transformMatrix = scene.getTransformMatrix();\r\n    }\r\n\r\n    if (!!this.viewPort && !!this.transformMatrix) {\r\n      const iconSize = this.getIconSize(camera);\r\n      const transformMatrix = this.transformMatrix as DeepImmutableObject<Matrix>;\r\n      const viewPort = this.viewPort as DeepImmutableObject<Viewport>;\r\n\r\n      return (\r\n        this.targetArchetype.entities.map((entity) => {\r\n          const transform = entity.TransformNode;\r\n          const coordinates = Vector3.Project(\r\n            transform.getAbsolutePosition(),\r\n            Matrix.Identity(),\r\n            transformMatrix,\r\n            viewPort\r\n          );\r\n\r\n          return {\r\n            key: entity.entityId,\r\n            name: transform.name,\r\n            x: coordinates.x,\r\n            y: coordinates.y - viewPort.height,\r\n            iconSize: iconSize,\r\n            thingType: entity.ThingState ? entity.ThingState.type : undefined,\r\n            thingState: entity.ThingState ? entity.ThingState.state : undefined,\r\n          };\r\n        }) ?? []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  // defaultIconSize = 36;\r\n  // minIconSize = 24;\r\n  // maxIconSize = 50;\r\n  private getIconSize = (camera: ArcRotateCamera) => {\r\n    const radius = camera.radius;\r\n    const minRadius = camera.lowerRadiusLimit;\r\n    const maxRadius = camera.upperRadiusLimit;\r\n    if (minRadius === null || maxRadius === null) {\r\n      return 1;\r\n    } else {\r\n      const radiusGap = maxRadius - minRadius;\r\n      return radiusGap === 0 ? 1 : 1 - Math.min(1, (radius - minRadius) / radiusGap);\r\n    }\r\n  };\r\n}\r\n","import { AbstractMesh, EngineStore, MirrorTexture, Plane, Scene, Vector3 } from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { Reflector } from '@/components';\r\n\r\nexport class ReflectorSystem {\r\n  private static instance: ReflectorSystem | undefined;\r\n  public static getReflectorEntities() {\r\n    return this.instance?.getReflectors() ?? [];\r\n  }\r\n  public static getReflectorsInFloorplan(floorplanId: string) {\r\n    return this.instance?.getReflectorsInFloorplan(floorplanId) ?? [];\r\n  }\r\n  public static changeReflectorSettings(reflector: Reflector, level: number, blurKernel: number) {\r\n    this.instance?.changeReflectorSettings(reflector, level, blurKernel);\r\n  }\r\n  public static getReflectionTexture(floorplanId: string) {\r\n    return this.instance?.getReflectionTexture(floorplanId) ?? null;\r\n  }\r\n\r\n  private targetArchetype = World.with('Identifier', 'Reflector');\r\n  private floorplanArchetype = World.with('Identifier', 'Floorplan');\r\n  private reflectionTargetArchetype = World.with('Identifier', 'TransformNode', 'ReflectionTarget');\r\n\r\n  private reflectionTextureList = new Map<string, MirrorTexture>();\r\n  constructor() {\r\n    ReflectorSystem.instance = this;\r\n    this.reflectionTargetArchetype.onEntityAdded.add((e) => this.initReflectionTarget(e));\r\n    this.floorplanArchetype.onEntityAdded.add((e) => this.initFloorplan(e));\r\n  }\r\n  public dispose() {\r\n    ReflectorSystem.instance = undefined;\r\n    this.reflectionTextureList.forEach((r) => r.dispose());\r\n    this.reflectionTextureList.clear();\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.floorplanArchetype);\r\n    clearArchetype(this.reflectionTargetArchetype);\r\n  }\r\n\r\n  beforeRenderExecute(scene: Scene) {\r\n    for (const entity of this.targetArchetype.entities) {\r\n      const reflector = entity.Reflector;\r\n      if (reflector && reflector.reflectionTexture.isReady()) {\r\n        const reflectionTexture = reflector.reflectionTexture;\r\n        if (reflectionTexture.level !== reflector.level) {\r\n          reflectionTexture.level = reflector.level;\r\n        }\r\n        if (reflectionTexture.adaptiveBlurKernel !== reflector.blurKernel) {\r\n          reflectionTexture.adaptiveBlurKernel = reflector.blurKernel;\r\n          RenderManager.RenderUpdate();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initReflectionTarget(entity: (typeof this.reflectionTargetArchetype.entities)[number]) {\r\n    World.removeComponent(entity, 'ReflectionTarget');\r\n    const floorplanId = entity.Identifier.floorplanId;\r\n    const meshes = entity.TransformNode.getChildMeshes();\r\n    const reflectionTexture = this.getReflectionTexture(floorplanId);\r\n    if (reflectionTexture) {\r\n      reflectionTexture.renderList?.push(...meshes);\r\n    }\r\n  }\r\n  private initFloorplan(entity: (typeof this.floorplanArchetype.entities)[number]) {\r\n    const floorplanId = entity.Identifier.floorplanId;\r\n    const reflectionTexture = this.getReflectionTexture(floorplanId);\r\n    if (reflectionTexture) {\r\n      reflectionTexture.mirrorPlane = Plane.FromPositionAndNormal(\r\n        entity.Floorplan.pivotPosition,\r\n        Vector3.Up().scale(-1)\r\n      );\r\n      World.addComponent(entity, 'Reflector', {\r\n        reflectionTexture: reflectionTexture,\r\n        level: reflectionTexture.level,\r\n        blurKernel: reflectionTexture.blurKernel,\r\n      });\r\n    }\r\n  }\r\n  private getReflectionTexture(floorplanId: string) {\r\n    if (!this.reflectionTextureList.has(floorplanId)) {\r\n      const reflectionTexture = new MirrorTexture('mirror', 1024, undefined, true);\r\n      reflectionTexture.level = 0.1;\r\n      reflectionTexture.adaptiveBlurKernel = 40;\r\n      reflectionTexture.renderList = [];\r\n      this.reflectionTextureList.set(floorplanId, reflectionTexture);\r\n    }\r\n\r\n    return this.reflectionTextureList.get(floorplanId)!;\r\n  }\r\n\r\n  public getReflectors() {\r\n    return this.targetArchetype.entities ?? [];\r\n  }\r\n  public getReflectorsInFloorplan(floorplanId: string) {\r\n    return (\r\n      this.targetArchetype.entities.filter((e) => e.Identifier.floorplanId === floorplanId) ?? []\r\n    );\r\n  }\r\n\r\n  public changeReflectorSettings(reflector: Reflector, level: number, blurKernel: number) {\r\n    reflector.level = level;\r\n    if (blurKernel > 0) reflector.blurKernel = blurKernel;\r\n    RenderManager.RenderUpdate();\r\n  }\r\n}\r\n","import { Scalar, Vector3 } from '@babylonjs/core';\r\n\r\n/**\r\n * Unity와 Babylon의 좌표계가 달라 Unity에서 추출한 Vector 값을 Babylon 좌표계에 알맞는 Vector 값으로 변환해 반환합니다.\r\n * @param vector Unity Vector\r\n * @returns Babylon Vector\r\n */\r\nexport const convertUnityCoordsToBabylon = (vector: Vector3) => {\r\n  return new Vector3(-vector.x, vector.y, vector.z);\r\n};\r\nexport const convertUnityRotationYToBabylon = (value: number) => {\r\n  return -value;\r\n};\r\nexport const convertUnityScaleToBabylon = (vector: Vector3) => {\r\n  return new Vector3(vector.x, vector.y, vector.z);\r\n};\r\n\r\nexport const toRadian = (angle: number) => {\r\n  return angle * (Math.PI / 180);\r\n};\r\n\r\n/**\r\n * 입력한 src 경로의 JSON 파일을 제너릭 Type으로 변환해 반환합니다.\r\n * @param src Load할 JSON 파일의 경로\r\n * @returns 입력한 제너릭 Type\r\n */\r\nexport const loadJson = async <T>(src: string) => {\r\n  const metadata = (await new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', src);\r\n    xhr.onload = (evt) => {\r\n      resolve(JSON.parse(xhr.responseText));\r\n    };\r\n    xhr.onerror = (evt) => {\r\n      reject(evt);\r\n    };\r\n    xhr.send();\r\n  })) as T;\r\n\r\n  return metadata;\r\n};\r\n\r\n/**\r\n * @see https://www.gamedev.net/forums/topic/552906-closest-point-on-triangle/\r\n */\r\nexport function getClosestPointOnTriangle(\r\n  coordinate: Vector3,\r\n  triangle: readonly [Vector3, Vector3, Vector3]\r\n) {\r\n  const edge0 = triangle[1].subtract(triangle[0]);\r\n  const edge1 = triangle[2].subtract(triangle[0]);\r\n  const v0 = triangle[0].subtract(coordinate);\r\n\r\n  const a = Vector3.Dot(edge0, edge0);\r\n  const b = Vector3.Dot(edge0, edge1);\r\n  const c = Vector3.Dot(edge1, edge1);\r\n  const d = Vector3.Dot(edge0, v0);\r\n  const e = Vector3.Dot(edge1, v0);\r\n\r\n  const det = a * c - b * b;\r\n  let s = b * e - c * d;\r\n  let t = b * d - a * e;\r\n\r\n  if (s + t < det) {\r\n    if (s < 0.0) {\r\n      if (t < 0.0) {\r\n        if (d < 0.0) {\r\n          s = Scalar.Clamp(-d / a, 0.0, 1.0);\r\n          t = 0.0;\r\n        } else {\r\n          s = 0.0;\r\n          t = Scalar.Clamp(-e / c, 0.0, 1.0);\r\n        }\r\n      } else {\r\n        s = 0.0;\r\n        t = Scalar.Clamp(-e / c, 0.0, 1.0);\r\n      }\r\n    } else if (t < 0.0) {\r\n      s = Scalar.Clamp(-d / a, 0.0, 1.0);\r\n      t = 0.0;\r\n    } else {\r\n      let invDet = 1.0 / det;\r\n      s *= invDet;\r\n      t *= invDet;\r\n    }\r\n  } else {\r\n    if (s < 0.0) {\r\n      let tmp0 = b + d;\r\n      let tmp1 = c + e;\r\n      if (tmp1 > tmp0) {\r\n        const numerator = tmp1 - tmp0;\r\n        const denominator = a - 2 * b + c;\r\n        s = Scalar.Clamp(numerator / denominator, 0.0, 1.0);\r\n        t = 1 - s;\r\n      } else {\r\n        t = Scalar.Clamp(-e / c, 0.0, 1.0);\r\n        s = 0.0;\r\n      }\r\n    } else if (t < 0.0) {\r\n      if (a + d > b + e) {\r\n        const numerator = c + e - b - d;\r\n        const denominator = a - 2 * b + c;\r\n        s = Scalar.Clamp(numerator / denominator, 0.0, 1.0);\r\n        t = 1 - s;\r\n      } else {\r\n        s = Scalar.Clamp(-e / c, 0.0, 1.0);\r\n        t = 0.0;\r\n      }\r\n    } else {\r\n      const numerator = c + e - b - d;\r\n      const denominator = a - 2 * b + c;\r\n      s = Scalar.Clamp(numerator / denominator, 0.0, 1.0);\r\n      t = 1 - s;\r\n    }\r\n  }\r\n\r\n  return triangle[0].add(edge0.scale(s)).add(edge1.scale(t));\r\n}\r\n","import { ArcRotateCamera, PBRMaterial, Scene } from '@babylonjs/core';\r\n\r\nimport { toRadian } from '@/util/Utile';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport class TransparentSystem {\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'Structure', 'Transparentable');\r\n\r\n  constructor() {\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initTransparentable(e));\r\n  }\r\n  dispose() {\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  private initTransparentable = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    entity.Structure.meshes.forEach((mesh) => {\r\n      if (mesh.material && mesh.material instanceof PBRMaterial) {\r\n        mesh.material.transparencyMode = 2;\r\n      }\r\n    });\r\n  };\r\n\r\n  public afterRenderExecute = (scene: Scene) => {\r\n    const camera = scene.activeCamera;\r\n\r\n    if (camera === null || !(camera instanceof ArcRotateCamera)) return;\r\n\r\n    const beta = camera.beta;\r\n    const alpha = 0.55;\r\n    const radianStart = toRadian(20);\r\n    const radianEnd = radianStart + toRadian(60);\r\n\r\n    let ratio = (beta - radianStart) / (radianEnd - radianStart);\r\n    if (ratio > 1) ratio = 1;\r\n    if (ratio < 0) ratio = 0;\r\n\r\n    // change material\r\n    const targetAlpha = 1 - ratio * (1 - alpha);\r\n    if (!Number.isNaN(targetAlpha)) {\r\n      for (const entity of this.targetArchetype.entities) {\r\n        const structure = entity.Structure;\r\n        structure.meshes.forEach((mesh) => {\r\n          if (mesh.material && mesh.material instanceof PBRMaterial) {\r\n            mesh.material.alpha = targetAlpha;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { PointerInfo } from '@babylonjs/core';\r\n\r\nimport { pause, play, setVolume, type VideoPlayerIO } from '@/components';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport class VideoPlayerSystem {\r\n  private static instance: VideoPlayerSystem | undefined;\r\n  public static getVideoPlayers(): VideoPlayerIO[] {\r\n    return this.instance?.getVideoPlayers() ?? [];\r\n  }\r\n\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'VideoPlayer');\r\n\r\n  constructor() {\r\n    VideoPlayerSystem.instance = this;\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initVideoPlayer(e));\r\n  }\r\n  private initVideoPlayer = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    entity.VideoPlayer.mesh.isPickable = true;\r\n  };\r\n\r\n  public dispose() {\r\n    VideoPlayerSystem.instance = undefined;\r\n    for (const entity of this.targetArchetype.entities) {\r\n      const videoPlayer = entity.VideoPlayer;\r\n      if (!!videoPlayer.videoTexture) {\r\n        const videoEl = videoPlayer.videoTexture.video;\r\n        videoPlayer.videoTexture.dispose();\r\n\r\n        while (videoEl.firstChild) {\r\n          if (!!videoEl.lastChild) videoEl.removeChild(videoEl.lastChild);\r\n        }\r\n        videoEl.src = '';\r\n        videoEl.removeAttribute('src');\r\n        videoEl.remove();\r\n      }\r\n    }\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  public onPointerUp(pointerInfo: PointerInfo) {\r\n    const info = pointerInfo.pickInfo;\r\n    if (!info) return;\r\n\r\n    for (const entity of this.targetArchetype.entities) {\r\n      const videoPlayer = entity.VideoPlayer;\r\n      if (info.pickedMesh === videoPlayer.mesh) {\r\n        if (!!videoPlayer.videoTexture) {\r\n          if (videoPlayer.videoTexture.video.paused) {\r\n            play(videoPlayer);\r\n          } else {\r\n            pause(videoPlayer);\r\n          }\r\n        } else {\r\n          play(videoPlayer);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getVideoPlayers(): VideoPlayerIO[] {\r\n    return (\r\n      this.targetArchetype.entities.map((entity) => {\r\n        const videoPlayer = entity.VideoPlayer;\r\n        return {\r\n          play: () => play(videoPlayer),\r\n          pause: () => pause(videoPlayer),\r\n          setVolume: (volume: number) => setVolume(videoPlayer, volume),\r\n        };\r\n      }) ?? []\r\n    );\r\n  }\r\n}\r\n","import { ArcRotateCamera, Scene } from '@babylonjs/core';\r\n\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { Entity } from '@/Entity';\r\n\r\nexport class CeilingSystem {\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'Structure', 'Ceiling');\r\n\r\n  private hideHeights: Map<string, number[]> = new Map();\r\n\r\n  constructor() {\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initCeiling(e));\r\n  }\r\n\r\n  dispose() {\r\n    clearArchetype(this.targetArchetype);\r\n    this.hideHeights.clear();\r\n  }\r\n\r\n  private initCeiling = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    let hideHeights = this.hideHeights.get(entity.entityId);\r\n    if (!hideHeights) {\r\n      hideHeights = entity.Structure.meshes\r\n        .flatMap((mesh) => mesh.getBoundingInfo().boundingBox)\r\n        .flatMap((bb) => {\r\n          return bb.centerWorld.y - bb.extendSizeWorld.y;\r\n        });\r\n      this.hideHeights.set(entity.entityId, hideHeights);\r\n    }\r\n  };\r\n\r\n  public afterRenderExecute = (scene: Scene) => {\r\n    if (!scene._activeCamera) return;\r\n\r\n    for (const entity of this.targetArchetype.entities) {\r\n      const structure = entity.Structure;\r\n\r\n      let hideHeights = this.hideHeights.get(entity.entityId);\r\n      if (!hideHeights) return;\r\n\r\n      for (let i = 0; i < structure.meshes.length; i++) {\r\n        const visible = scene._activeCamera.position.y <= hideHeights[i];\r\n        structure.meshes[i].visibility = visible ? 1 : 0;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { AbstractMesh, Angle, BoundingInfo, Matrix, Scene, Vector3 } from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { Entity } from '@/components';\r\nimport type { MagnetismFixture } from '@/components/Magnestism';\r\n\r\nexport class TransformSystem {\r\n  private static instance: TransformSystem | undefined;\r\n  public static updateTransform(entityId: string, position?: Vector3, rotationY?: number) {\r\n    this.instance?.updateTransform(entityId, position, rotationY);\r\n  }\r\n  public static getMovableTransformEntities() {\r\n    return this.instance?.getMovableTransformEntities() ?? [];\r\n  }\r\n  public static getMovableTransformEntitiesInFloorplan(floorplanId: string) {\r\n    return this.instance?.getMovableTransformEntitiesInFloorplan(floorplanId) ?? [];\r\n  }\r\n\r\n  private transforms = World.with('TransformNode');\r\n  private transformsDirty = this.transforms.with('TransformDirty');\r\n\r\n  private dynamicTransforms = this.transforms.with('TransformMovable');\r\n  private staticTransforms = this.transforms.without('TransformMovable');\r\n\r\n  private staticTransformsDirty = this.transformsDirty.without('TransformMovable');\r\n\r\n  private activeDynamicTransforms = this.dynamicTransforms.with('ActiveHome', 'Identifier');\r\n\r\n  private lastTransforms = new Map<Entity, Matrix>();\r\n\r\n  constructor() {\r\n    TransformSystem.instance = this;\r\n    this.dynamicTransforms.onEntityAdded.add((e) => this.whenDynamicTransform(e));\r\n    this.staticTransforms.onEntityAdded.add((e) => this.whenStaticTransform(e));\r\n  }\r\n  dispose() {\r\n    TransformSystem.instance = undefined;\r\n    clearArchetype(this.transforms);\r\n    clearArchetype(this.transformsDirty);\r\n    clearArchetype(this.dynamicTransforms);\r\n    clearArchetype(this.staticTransforms);\r\n    clearArchetype(this.staticTransformsDirty);\r\n    clearArchetype(this.activeDynamicTransforms);\r\n    this.lastTransforms.clear();\r\n  }\r\n\r\n  private whenDynamicTransform = (entity: (typeof this.dynamicTransforms.entities)[number]) => {\r\n    const { TransformNode, TransformMovable } = entity;\r\n    TransformNode.unfreezeWorldMatrix();\r\n    TransformNode.getChildMeshes().forEach((mesh) => {\r\n      mesh.unfreezeWorldMatrix();\r\n      mesh.doNotSyncBoundingInfo = false;\r\n    });\r\n    this.lastTransforms.set(entity, TransformNode.getWorldMatrix().clone());\r\n\r\n    if (TransformNode instanceof AbstractMesh) {\r\n      const scene = TransformNode.getScene();\r\n      scene.selectionOctree?.dynamicContent.push(TransformNode);\r\n    }\r\n\r\n    const magneticFace = TransformMovable.magnetismFixtureFace;\r\n    if (magneticFace) {\r\n      const { min: hmin, max: hmax } = TransformNode.getHierarchyBoundingVectors(true);\r\n      const rootMatrix = TransformNode.getWorldMatrix().clone().invert();\r\n      const corner0 = Vector3.TransformCoordinates(hmin, rootMatrix);\r\n      const corner1 = Vector3.TransformCoordinates(hmax, rootMatrix);\r\n      const boundingInfo = new BoundingInfo(\r\n        // world 좌표애서 local로 변경하면 minMax 정보가 소실됨\r\n        Vector3.Minimize(corner0, corner1),\r\n        Vector3.Maximize(corner0, corner1)\r\n      );\r\n\r\n      const min = boundingInfo.boundingBox.minimum;\r\n      const max = boundingInfo.boundingBox.maximum;\r\n\r\n      let fixtures: MagnetismFixture[] = [];\r\n      const pivotY = magneticFace.bottom ? min.y : magneticFace.top ? max.y : 0;\r\n\r\n      if (magneticFace.front) {\r\n        // 전면 벽\r\n        fixtures.push({\r\n          position: new Vector3(0, pivotY, max.z),\r\n          normal: Vector3.Forward(),\r\n          constraints: [\r\n            {\r\n              type: 'padding',\r\n              value: new Vector3(Number.MAX_VALUE, 0, Number.MAX_VALUE),\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      if (magneticFace.back) {\r\n        // 후면 벽\r\n        fixtures.push({\r\n          position: new Vector3(0, pivotY, min.z),\r\n          normal: Vector3.Backward(),\r\n          constraints: [\r\n            {\r\n              type: 'padding',\r\n              value: new Vector3(Number.MAX_VALUE, 0, Number.MAX_VALUE),\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      if (magneticFace.left) {\r\n        // 좌측 벽\r\n        fixtures.push({\r\n          position: new Vector3(min.x, pivotY, 0),\r\n          normal: Vector3.Left(),\r\n          constraints: [\r\n            {\r\n              type: 'padding',\r\n              value: new Vector3(Number.MAX_VALUE, 0, Number.MAX_VALUE),\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      if (magneticFace.right) {\r\n        // 우측 벽\r\n        fixtures.push({\r\n          position: new Vector3(max.x, pivotY, 0),\r\n          normal: Vector3.Right(),\r\n          constraints: [\r\n            {\r\n              type: 'padding',\r\n              value: new Vector3(Number.MAX_VALUE, 0, Number.MAX_VALUE),\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      if (magneticFace.top) {\r\n        // 천장\r\n        fixtures.push({\r\n          position: new Vector3(0, pivotY, 0),\r\n          normal: Vector3.Up(),\r\n          constraints: [{ type: 'normal', value: Vector3.Down() }],\r\n        });\r\n      }\r\n      if (magneticFace.bottom) {\r\n        // 바닥\r\n        fixtures.push({\r\n          position: new Vector3(0, pivotY, 0),\r\n          normal: Vector3.Down(),\r\n          constraints: [{ type: 'normal', value: Vector3.Up() }],\r\n        });\r\n      }\r\n\r\n      if (fixtures.length > 0) {\r\n        World.addComponent(entity, 'MagnetismFixtures', {\r\n          fixtures: fixtures,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  private whenStaticTransform = (entity: (typeof this.staticTransforms.entities)[number]) => {\r\n    const { TransformNode } = entity;\r\n    TransformNode.freezeWorldMatrix();\r\n\r\n    this.lastTransforms.delete(entity);\r\n\r\n    if (TransformNode instanceof AbstractMesh) {\r\n      const scene = TransformNode.getScene();\r\n      const index = scene.selectionOctree?.dynamicContent.indexOf(TransformNode);\r\n      if (index >= 0) {\r\n        scene.selectionOctree?.dynamicContent.splice(index, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  public beforeRenderExecute = (scene: Scene) => {\r\n    if (this.staticTransformsDirty.size > 0 && scene.selectionOctree) {\r\n      scene.createOrUpdateSelectionOctree();\r\n    }\r\n\r\n    for (const entity of this.dynamicTransforms) {\r\n      const lastTransform = this.lastTransforms.get(entity);\r\n      if (!lastTransform) continue;\r\n\r\n      const { TransformNode } = entity;\r\n\r\n      const currentMatrix = TransformNode.getWorldMatrix();\r\n      if (!currentMatrix.equals(lastTransform)) {\r\n        World.addComponent(entity, 'TransformDirty', true);\r\n      }\r\n    }\r\n  };\r\n\r\n  public afterRenderExecute = (scene: Scene) => {\r\n    for (const entity of this.transformsDirty) {\r\n      World.removeComponent(entity, 'TransformDirty');\r\n      const lastTransform = this.lastTransforms.get(entity);\r\n      if (!lastTransform) continue;\r\n\r\n      const { TransformNode } = entity;\r\n\r\n      lastTransform.copyFrom(TransformNode.getWorldMatrix());\r\n    }\r\n  };\r\n\r\n  private updateTransform(entityId: string, position?: Vector3, rotationY?: number) {\r\n    const isDirty = position !== undefined || rotationY !== undefined;\r\n    if (isDirty) {\r\n      const entity = this.activeDynamicTransforms.entities.find((e) => e.entityId == entityId);\r\n      if (entity) {\r\n        this.updatePosition(entity, position, rotationY);\r\n        RenderManager.RenderUpdate();\r\n      }\r\n    }\r\n  }\r\n  private updatePosition = (\r\n    entity: (typeof this.activeDynamicTransforms.entities)[number],\r\n    position?: Vector3,\r\n    rotationY?: number\r\n  ) => {\r\n    const transformNode = entity.TransformNode;\r\n    if (position !== undefined) {\r\n      transformNode.setAbsolutePosition(position);\r\n    }\r\n\r\n    if (rotationY !== undefined) {\r\n      const y = Angle.FromDegrees(rotationY % 360).radians();\r\n      transformNode.rotation = new Vector3(0, y, 0);\r\n    }\r\n  };\r\n\r\n  private getMovableTransformEntities() {\r\n    return this.activeDynamicTransforms.entities ?? [];\r\n  }\r\n  private getMovableTransformEntitiesInFloorplan(floorplanId?: string) {\r\n    return (\r\n      this.activeDynamicTransforms.entities.filter(\r\n        (e) => e.Identifier.floorplanId === floorplanId\r\n      ) ?? []\r\n    );\r\n  }\r\n}\r\n","import { AbstractMesh, InstancedMesh, Matrix, Mesh, Scene, TransformNode } from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nconst defaultOptions = {\r\n  lerpTime: 0,\r\n};\r\n\r\nexport type MagnetismGhostSystemOptions = typeof defaultOptions;\r\n\r\nexport class MagnetismGhostSystem {\r\n  private toAddGhost = World.with('ActiveHome', 'TransformNode', 'MagnetismValid').without(\r\n    'MagnetismGhost'\r\n  );\r\n  private toRemoveGhost = World.with('ActiveHome', 'TransformNode', 'MagnetismGhost').without(\r\n    'MagnetismValid'\r\n  );\r\n  private activeGhost = World.with(\r\n    'ActiveHome',\r\n    'TransformNode',\r\n    'MagnetismValid',\r\n    'MagnetismGhost'\r\n  );\r\n\r\n  private static readonly prefix = 'MagnetismGhost_';\r\n\r\n  private readonly options: MagnetismGhostSystemOptions;\r\n\r\n  constructor(options?: Partial<MagnetismGhostSystemOptions>) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  dispose() {\r\n    clearArchetype(this.toAddGhost);\r\n    clearArchetype(this.toRemoveGhost);\r\n    clearArchetype(this.activeGhost);\r\n  }\r\n\r\n  public beforeRenderExecute = (scene: Scene) => {\r\n    this.toAddGhost.entities.forEach(this.addGhost);\r\n    this.toRemoveGhost.entities.forEach(this.removeGhost);\r\n    this.activeGhost.entities.forEach(this.moveGhost);\r\n  };\r\n\r\n  private addGhost = (entity: (typeof this.toAddGhost.entities)[number]) => {\r\n    const { TransformNode: source } = entity;\r\n    const ghostRoot = source.clone(`${MagnetismGhostSystem.prefix}${source.name}`, source.parent);\r\n    if (!ghostRoot) return;\r\n\r\n    ghostRoot.freezeWorldMatrix(source.getWorldMatrix());\r\n\r\n    source.getChildMeshes().forEach((sm) => {\r\n      sm.visibility = 0;\r\n    });\r\n\r\n    World.addComponent(entity, 'MagnetismGhost', {\r\n      rootNode: ghostRoot,\r\n    });\r\n\r\n    RenderManager.instance!.playingVideoCount++; // HACK\r\n  };\r\n\r\n  private removeGhost = (entity: (typeof this.toRemoveGhost.entities)[number]) => {\r\n    const { TransformNode: source, MagnetismGhost } = entity;\r\n\r\n    const root = MagnetismGhost.rootNode;\r\n    root.dispose();\r\n\r\n    source.getChildMeshes().forEach((n) => {\r\n      n.visibility = 1;\r\n    });\r\n\r\n    World.removeComponent(entity, 'MagnetismGhost');\r\n\r\n    RenderManager.instance!.playingVideoCount--; // HACK\r\n  };\r\n\r\n  private moveGhost = (entity: (typeof this.activeGhost.entities)[number]) => {\r\n    const { MagnetismValid: FixtureValid, MagnetismGhost: FixtureGhost } = entity;\r\n\r\n    const ghostRoot = FixtureGhost.rootNode;\r\n    const targetMatrix =\r\n      this.options.lerpTime == 0\r\n        ? FixtureValid.matrix\r\n        : Matrix.DecomposeLerp(\r\n            ghostRoot.getWorldMatrix(),\r\n            FixtureValid.matrix,\r\n            this.options.lerpTime\r\n          );\r\n    ghostRoot.freezeWorldMatrix(targetMatrix);\r\n  };\r\n}\r\n","import {\r\n  AbstractMesh,\r\n  Color4,\r\n  EngineStore,\r\n  Epsilon,\r\n  Matrix,\r\n  Mesh,\r\n  MeshBuilder,\r\n  Octree,\r\n  Quaternion,\r\n  Scene,\r\n  TmpColors,\r\n  TmpVectors,\r\n  TransformNode,\r\n  UtilityLayerRenderer,\r\n  Vector3,\r\n  VertexBuffer,\r\n} from '@babylonjs/core';\r\n\r\nimport { getClosestPointOnTriangle } from '@/util/Utile';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { MagnetismFixture } from '@/components/Magnestism';\r\n\r\nconst defaultOptions = {\r\n  defaultMaxDistance: 0.01,\r\n  isDebug: false,\r\n};\r\n\r\nexport type MagenetismSystemOptions = typeof defaultOptions;\r\n\r\n/**\r\n * 정의된 Fixture의 조건을 탐색하여\r\n * 최적 결과를 FixtureValid에 관리\r\n */\r\nexport class MagnetismSystem {\r\n  private withMagnetism = World.with('ActiveHome', 'TransformNode', 'MagnetismFixtures');\r\n\r\n  private magnetismEnabled = this.withMagnetism.with('TransformDirty');\r\n\r\n  private magnetismDone = this.withMagnetism.with('MagnetismValid').without('PointerDragging');\r\n\r\n  private magnetismTarget = World.with('ActiveHome', 'Structure', 'MagnetismTarget');\r\n\r\n  private readonly options: MagenetismSystemOptions;\r\n\r\n  constructor(options?: Partial<MagenetismSystemOptions>) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  dispose() {\r\n    clearArchetype(this.withMagnetism);\r\n    clearArchetype(this.magnetismEnabled);\r\n    clearArchetype(this.magnetismDone);\r\n    clearArchetype(this.magnetismTarget);\r\n  }\r\n\r\n  public beforeRenderExecute = (scene: Scene) => {\r\n    this.calculateMagnetism();\r\n    this.finishMagnetism();\r\n  };\r\n\r\n  /**\r\n   * 조건 탐색 및 FixtureValid 관리\r\n   *\r\n   * @remarks\r\n   *\r\n   * 실제 Transform이 변경될때 실행하도록 하자\r\n   */\r\n  private calculateMagnetism = () => {\r\n    if (this.magnetismEnabled.size < 1) return;\r\n\r\n    const scene = EngineStore.LastCreatedScene!;\r\n    const octree = scene.createOrUpdateSelectionOctree();\r\n\r\n    for (const entity of this.magnetismEnabled) {\r\n      const { MagnetismFixtures: Fixtures, TransformNode } = entity;\r\n      const transform = TransformNode;\r\n      const transformMatrix = transform.getWorldMatrix();\r\n\r\n      const currentTransform = transform.getWorldMatrix().clone();\r\n      const candidateFixtures = [...Fixtures.fixtures];\r\n      const validFixtures = [];\r\n\r\n      while (candidateFixtures.length > 0) {\r\n        const closestFixture = this.findClosestFixture(currentTransform, candidateFixtures);\r\n        if (!closestFixture) break;\r\n        candidateFixtures.splice(closestFixture.index, 1);\r\n        validFixtures.push(closestFixture.fixture);\r\n\r\n        const { fixture, facePosition, faceNormal } = closestFixture;\r\n\r\n        const targetScale = TmpVectors.Vector3[0];\r\n        const targetQuaternion = TmpVectors.Quaternion[0];\r\n        const targetPosition = TmpVectors.Vector3[1];\r\n\r\n        transformMatrix.decompose(targetScale, targetQuaternion, targetPosition);\r\n\r\n        const targetRotation = targetQuaternion.toEulerAngles();\r\n\r\n        Matrix.ComposeToRef(\r\n          targetScale,\r\n          Quaternion.RotationYawPitchRoll(\r\n            fixture.normal.y != 0\r\n              ? Math.PI + targetRotation.y\r\n              : -Math.atan2(faceNormal.x, -faceNormal.z) -\r\n                  Math.atan2(fixture.normal.x, -fixture.normal.z),\r\n            Math.PI +\r\n              Math.atan2(\r\n                faceNormal.y,\r\n                Math.sqrt(faceNormal.z * faceNormal.z + faceNormal.x * faceNormal.x)\r\n              ) +\r\n              Math.atan2(\r\n                fixture.normal.y,\r\n                Math.sqrt(fixture.normal.z * fixture.normal.z + fixture.normal.x * fixture.normal.x)\r\n              ),\r\n            0\r\n          ),\r\n          Vector3.ZeroReadOnly,\r\n          currentTransform\r\n        );\r\n\r\n        currentTransform.setTranslation(\r\n          facePosition.subtract(Vector3.TransformCoordinates(fixture.position, currentTransform))\r\n        );\r\n\r\n        if (this.options.isDebug) {\r\n          this.drawDebug(fixture, transformMatrix, transform, facePosition, faceNormal);\r\n        }\r\n      }\r\n\r\n      if (Fixtures.fixtures.length === candidateFixtures.length) {\r\n        World.removeComponent(entity, 'MagnetismValid');\r\n      } else {\r\n        World.update(entity, 'MagnetismValid', {\r\n          fixtures: validFixtures,\r\n          matrix: currentTransform,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  private findClosestFixture = (transformMatrix: Matrix, fixtures: MagnetismFixture[]) => {\r\n    const closestFixtures = fixtures\r\n      .flatMap((fixture, i) => {\r\n        return this.magnetismTarget.entities.flatMap((e) => {\r\n          const meshes = e.Structure.meshes;\r\n          return meshes.flatMap((c) => {\r\n            // if (c.isDescendantOf(transform)) return [];\r\n            if (!(c instanceof Mesh)) return [];\r\n\r\n            const cMatrix = c.getWorldMatrix();\r\n            const cInvertedMatrix = Matrix.Invert(cMatrix);\r\n            const targetToCandidateMatrix = transformMatrix.multiply(cInvertedMatrix);\r\n            const localFixturePosition = Vector3.TransformCoordinates(\r\n              fixture.position,\r\n              targetToCandidateMatrix\r\n            );\r\n            const normals = c.getVerticesData(VertexBuffer.NormalKind)!;\r\n            const positions = c.getVerticesData(VertexBuffer.PositionKind)!;\r\n            const indices = c.getIndices()!;\r\n\r\n            // TODO: only check facets of neighboring blocks @see AbstractMesh.getFacetsAtLocalCoordinates\r\n            const closestFaces = [...Array((indices.length / 3) | 0)]\r\n              .flatMap((_, faceIndex) => {\r\n                var i0 = indices[3 * faceIndex] * 3;\r\n                var i1 = indices[3 * faceIndex + 1] * 3;\r\n                var i2 = indices[3 * faceIndex + 2] * 3;\r\n\r\n                const verticeNormals = [\r\n                  TmpVectors.Vector3[0].fromArray(normals, i0),\r\n                  TmpVectors.Vector3[1].fromArray(normals, i1),\r\n                  TmpVectors.Vector3[2].fromArray(normals, i2),\r\n                ] as const;\r\n\r\n                // `getFacetLocalNormals`는 ComputeNormals에서 임의로 초기화 하기 때문에 직접 계산\r\n                // TODO: cache faceNormals\r\n                const faceNormal = verticeNormals\r\n                  .reduce((a, n) => {\r\n                    return a.addInPlace(n);\r\n                  }, TmpVectors.Vector3[3].setAll(0))\r\n                  .scaleInPlace(1 / verticeNormals.length)\r\n                  .normalize();\r\n\r\n                const worldFaceNormal = Vector3.TransformNormal(faceNormal, cMatrix);\r\n\r\n                const isConstraintValid =\r\n                  fixture.constraints?.some((c) => {\r\n                    switch (c.type) {\r\n                      case 'padding':\r\n                        return (\r\n                          c.value.x + Epsilon >= Math.abs(worldFaceNormal.x) &&\r\n                          c.value.y + Epsilon >= Math.abs(worldFaceNormal.y) &&\r\n                          c.value.z + Epsilon >= Math.abs(worldFaceNormal.z)\r\n                        );\r\n                      case 'normal':\r\n                        return worldFaceNormal.equalsWithEpsilon(c.value);\r\n                    }\r\n                  }) ?? true;\r\n\r\n                if (!isConstraintValid) return [];\r\n\r\n                const vertices = [\r\n                  TmpVectors.Vector3[0].fromArray(positions, i0),\r\n                  TmpVectors.Vector3[1].fromArray(positions, i1),\r\n                  TmpVectors.Vector3[2].fromArray(positions, i2),\r\n                ] as const;\r\n\r\n                const localClosestPoint = getClosestPointOnTriangle(localFixturePosition, vertices);\r\n                const distance = Vector3.DistanceSquared(localFixturePosition, localClosestPoint);\r\n\r\n                if (distance > (fixture.maxDistance ?? this.options.defaultMaxDistance)) return [];\r\n\r\n                return [\r\n                  {\r\n                    candidate: c,\r\n                    faceIndex: faceIndex,\r\n                    facePosition: Vector3.TransformCoordinates(localClosestPoint, cMatrix),\r\n                    distance: distance,\r\n                    faceNormal: worldFaceNormal,\r\n                  },\r\n                ];\r\n              })\r\n              .sort(({ distance: ad }, { distance: bd }) => ad - bd);\r\n\r\n            const closestFace = closestFaces[0];\r\n\r\n            if (!closestFace) return [];\r\n\r\n            return [\r\n              {\r\n                index: i,\r\n                fixture: fixture,\r\n                ...closestFace,\r\n              },\r\n            ];\r\n          });\r\n        });\r\n      })\r\n      .sort(({ distance: ad }, { distance: bd }) => ad - bd);\r\n\r\n    return closestFixtures[0];\r\n  };\r\n\r\n  private drawDebug = (\r\n    fixture: MagnetismFixture,\r\n    transformMatrix: Matrix,\r\n    transform: TransformNode,\r\n    facePosition: Vector3,\r\n    faceNormal: Vector3\r\n  ) => {\r\n    TmpColors.Color4[0].set(0, 1, 1, 1);\r\n    TmpColors.Color4[1].set(0, 1, 0, 1);\r\n    TmpColors.Color4[2].set(1, 1, 0, 1);\r\n    const normalColor = new Color4(1, 0, 1, 1);\r\n    const fixturePosition = Vector3.TransformCoordinates(fixture.position, transformMatrix);\r\n    const fixtureNormal = Vector3.TransformNormal(fixture.normal, transformMatrix);\r\n    const debugLine = MeshBuilder.CreateLineSystem(\r\n      `${transform.name}_debugLine`,\r\n      {\r\n        lines: [\r\n          [fixturePosition, facePosition],\r\n          [facePosition, facePosition.add(faceNormal.scale(0.1))],\r\n          [fixturePosition, fixturePosition.add(fixtureNormal.scale(0.1))],\r\n        ],\r\n        colors: [\r\n          [TmpColors.Color4[0], TmpColors.Color4[1]],\r\n          [TmpColors.Color4[2], TmpColors.Color4[2]],\r\n          [normalColor, normalColor],\r\n        ],\r\n      },\r\n      UtilityLayerRenderer.DefaultKeepDepthUtilityLayer.utilityLayerScene\r\n    );\r\n    UtilityLayerRenderer.DefaultKeepDepthUtilityLayer.utilityLayerScene.onAfterRenderObservable.addOnce(\r\n      () => {\r\n        debugLine.dispose();\r\n      }\r\n    );\r\n  };\r\n\r\n  private finishMagnetism = () => {\r\n    for (const entity of this.magnetismDone) {\r\n      const { TransformNode: source, MagnetismValid } = entity;\r\n      const matrix = source.parent\r\n        ? MagnetismValid.matrix.multiply(Matrix.Invert(source.parent.getWorldMatrix()))\r\n        : MagnetismValid.matrix;\r\n      matrix.decomposeToTransformNode(source);\r\n      World.removeComponent(entity, 'MagnetismValid');\r\n    }\r\n  };\r\n}\r\n","import { AbstractMesh, Observable, PointerDragBehavior, Vector3 } from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { Entity } from '@/components';\r\n\r\nexport class PointerDragSystem {\r\n  private static instance: PointerDragSystem | undefined;\r\n  public static setEnableDraggingMovable(enable: boolean) {\r\n    this.instance?.setEnableDraggingMovable(enable);\r\n  }\r\n\r\n  private draggingable = false;\r\n  private targetArchetype = World.with('PointerDraggable', 'TransformNode', 'TransformMovable');\r\n  private targetMovableArchetype = World.with('ActiveHome', 'TransformNode', 'TransformMovable');\r\n  private behaviorMap = new Map<Entity, PointerDragBehavior>();\r\n\r\n  constructor() {\r\n    PointerDragSystem.instance = this;\r\n\r\n    this.targetArchetype.onEntityAdded.add((e) => this.attachBehavior(e));\r\n    this.targetArchetype.onEntityRemoved.add((e) => this.detachBehavior(e));\r\n    this.targetMovableArchetype.onEntityAdded.add((e) => this.updatePointerDraggable(e));\r\n  }\r\n\r\n  dispose() {\r\n    PointerDragSystem.instance = undefined;\r\n    this.behaviorMap.clear();\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.targetMovableArchetype);\r\n  }\r\n\r\n  private attachBehavior = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    const { TransformNode: rootNode } = entity;\r\n\r\n    const pointerDragBehavior = new PointerDragBehavior({ dragPlaneNormal: Vector3.UpReadOnly });\r\n    pointerDragBehavior.dragDeltaRatio = 1;\r\n    pointerDragBehavior.onDragStartObservable.add(() => {\r\n      World.addComponent(entity, 'PointerDragging', true);\r\n      RenderManager.RenderUpdate();\r\n    });\r\n    pointerDragBehavior.onDragObservable.add(() => {\r\n      RenderManager.RenderUpdate();\r\n    });\r\n    pointerDragBehavior.onDragEndObservable.add(() => {\r\n      World.removeComponent(entity, 'PointerDragging');\r\n      RenderManager.RenderUpdate();\r\n    });\r\n\r\n    rootNode.addBehavior(pointerDragBehavior);\r\n\r\n    this.behaviorMap.set(entity, pointerDragBehavior);\r\n  };\r\n  private detachBehavior = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    const { TransformNode: rootNode } = entity;\r\n    const pointerDragBehavior = this.behaviorMap.get(entity);\r\n    if (!pointerDragBehavior) return;\r\n    rootNode.removeBehavior(pointerDragBehavior);\r\n    this.behaviorMap.delete(entity);\r\n  };\r\n\r\n  public setEnableDraggingMovable(enable: boolean) {\r\n    this.draggingable = enable;\r\n    this.allUpdatePointerDraggable();\r\n  }\r\n  private allUpdatePointerDraggable = () => {\r\n    this.targetMovableArchetype.entities.forEach((e) => this.updatePointerDraggable(e));\r\n  };\r\n  private updatePointerDraggable = (\r\n    entity: (typeof this.targetMovableArchetype.entities)[number]\r\n  ) => {\r\n    if (this.draggingable) {\r\n      if (!entity.PointerDraggable) World.addComponent(entity, 'PointerDraggable', true);\r\n    } else {\r\n      if (entity.PointerDraggable) World.removeComponent(entity, 'PointerDraggable');\r\n    }\r\n    entity.TransformNode.getChildMeshes().forEach((m) => (m.isPickable = this.draggingable));\r\n  };\r\n}\r\n","import { clearArchetype, World } from '@/World';\r\n\r\nexport class ActiveHomeSystem {\r\n  private static activeHomeId = '';\r\n  private static instance: ActiveHomeSystem | undefined;\r\n  public static setActiveHome(homeId: string) {\r\n    this.activeHomeId = homeId;\r\n    this.instance?.allUpdateActiveHome();\r\n  }\r\n\r\n  private targetArchetype = World.with('Identifier');\r\n\r\n  constructor() {\r\n    ActiveHomeSystem.instance = this;\r\n    this.targetArchetype.onEntityAdded.add((e) => this.updateActiveHome(e));\r\n  }\r\n\r\n  dispose() {\r\n    ActiveHomeSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  private updateActiveHome = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    if (entity.Identifier.homeId === ActiveHomeSystem.activeHomeId) {\r\n      if (!entity.ActiveHome) World.addComponent(entity, 'ActiveHome', true);\r\n    } else {\r\n      if (entity.ActiveHome) World.removeComponent(entity, 'ActiveHome');\r\n    }\r\n  };\r\n  private allUpdateActiveHome = () => {\r\n    this.targetArchetype.entities.forEach(this.updateActiveHome);\r\n  };\r\n}\r\n","import {\r\n  AbstractMesh,\r\n  Animation,\r\n  Camera,\r\n  Color3,\r\n  EasingFunction,\r\n  EngineStore,\r\n  Material,\r\n  Scene,\r\n  TransformNode,\r\n  Vector3,\r\n  Viewport,\r\n} from '@babylonjs/core';\r\n\r\nimport type { RoomLightConfiguration } from '@/material/RoomLightMaterial';\r\n\r\n//-------------------------------------------------\r\n// * 기준 프레임레이트\r\nconst ANIMATION_TARGET_FRAME = 30;\r\n// * Target을 제한하기 위한 Type입니다.\r\ntype AnimationTarget =\r\n  | AbstractMesh\r\n  | Material\r\n  | Camera\r\n  | Viewport\r\n  | RoomLightConfiguration\r\n  | TransformNode;\r\n// * KeyFrame의 From/To Value의 타입을 추론하고 제한하기 위한 Type입니다.\r\ntype AnimationValue = number | Vector3 | Color3;\r\n\r\n//-------------------------------------------------\r\n/**\r\n * #### Animation 입력 Type\r\n * * target : AnimationGroup을 적용할 1개 이상의 타겟입니다. (AbstractMesh | Material | Camera ...)\r\n * * property : AnimationGroup을 구성할 1개 이상의 property입니다. 각 property 별로 Animation을 생성해 적용합니다.\r\n * * easingFunction : 이 값을 입력하면, 모든 Animation에 해당 easingFunction을 적용합니다.\r\n * * onAnimationEnd : 이 값을 입력하면, 모든 Animation이 끝날 때 입력한 콜백함수를 호출합니다.\r\n * \r\n * @example\r\n * #### 단일 Property\r\n * ```ts\r\n *  {\r\n *    target: mesh.material,\r\n *    property: {\r\n *      targetProperty: 'albedoColor',\r\n *      keyFrame: {\r\n *        duration: 0.6,\r\n *        from: mesh.material.albedoColor,\r\n *        to: this.disableColor,\r\n *      },\r\n *    },\r\n *    easingFunction: createEasingFunction(\r\n *                      EasingFunctionType.QuarticEase, \r\n *                      EasingModeType.In)\r\n *  }\r\n * ```\r\n * #### 다중 Property\r\n * ```ts\r\n *  {\r\n *    target: mesh.material,\r\n *    property: [\r\n        {\r\n          targetProperty: 'target',\r\n          keyFrame: {\r\n            duration: 0.6,\r\n            from: camera.target,\r\n            to: target,\r\n          },\r\n        },\r\n        {\r\n          targetProperty: 'beta',\r\n          keyFrame: {\r\n            duration: 0.6,\r\n            from: camera.beta,\r\n            to: beta,\r\n          },\r\n        },\r\n      ],\r\n      easingFunction: this.getEasingFunction()\r\n *  }\r\n * ```\r\n */\r\nexport interface AnimationInput<T> {\r\n  target: T | T[];\r\n  property: AnimationProperty<T> | AnimationProperty<T>[];\r\n  easingFunction?: EasingFunction;\r\n  onAnimationEnd?: () => void;\r\n}\r\n\r\n//-------------------------------------------------\r\n/**\r\n * #### Property 입력 Type\r\n * * targetProperty : Animation의 타겟 property의 이름입니다.\r\n * * keyFrame : Animation을 구성할 1개 이상의 KeyFrame입니다.\r\n */\r\nexport interface AnimationProperty<T> {\r\n  targetProperty: keyof T;\r\n  keyFrame: AnimationKeyFrame | AnimationKeyFrame[];\r\n}\r\n\r\n//-------------------------------------------------\r\n/**\r\n * #### KeyFrame 입력 Type\r\n * * duration : 이 값을 입력 시 시간을 frame으로 계산해 적용합니다. (seconds 기준)\r\n * * frame : 이 값을 입력 시 frame으로 적용합니다. (단, duration이 우선순위 높음)\r\n * * from : 시작 값입니다.\r\n * * to : 끝 값입니다. (from과 to의 type이 동일해야 합니다.)\r\n */\r\nexport interface AnimationKeyFrame {\r\n  duration?: number;\r\n  frame?: number;\r\n  from: AnimationValue;\r\n  to: AnimationValue;\r\n}\r\n\r\n//-------------------------------------------------\r\n/**\r\n * #### AnimationGroup을 생성하고 실행하는 함수입니다.\r\n *\r\n * @example\r\n * ```ts\r\n *  playAnimation(\r\n *    this.prop.scene,\r\n *    {\r\n *      target: mesh.material,\r\n *      property: {\r\n *        targetProperty: 'albedoColor',\r\n *        keyFrame: {\r\n *          duration: 0.6,\r\n *          from: mesh.material.albedoColor,\r\n *          to: this.disableColor,\r\n *        },\r\n *      easingFunction: createEasingFunction(\r\n *                        EasingFunctionType.QuarticEase,\r\n *                        EasingModeType.In),\r\n *      onAnimationEnd: () => {\r\n *          console.log('onAnimationEnd');\r\n *        }\r\n *      }\r\n *    });\r\n * ```\r\n */\r\nexport const playAnimation = async <T extends AnimationTarget>(\r\n  input: AnimationInput<T>,\r\n  scene?: Scene,\r\n  stopCurrunt: boolean = false\r\n) => {\r\n  let currentScene = !!scene ? scene : EngineStore.LastCreatedScene;\r\n  if (!currentScene) return;\r\n\r\n  let animations: Animation[] = [];\r\n\r\n  // * 입력한 Property 각각 Animation을 생성합니다.\r\n  if (Array.isArray(input.property)) {\r\n    animations.push(\r\n      ...input.property.map((property) =>\r\n        generateAnimationByProperty(property, input.easingFunction)\r\n      )\r\n    );\r\n  } else {\r\n    animations.push(generateAnimationByProperty(input.property, input.easingFunction));\r\n  }\r\n\r\n  // * 생성된 애니메이션 중 가장 긴 Frame을 구합니다.\r\n  let maxFrame = 0;\r\n  for (let i = 0; i < animations.length; i++) {\r\n    animations[i].getKeys().forEach((keyFrame) => {\r\n      maxFrame = Math.max(keyFrame.frame, maxFrame);\r\n    });\r\n  }\r\n\r\n  // * 생성된 애니메이션을 입력한 Target에 적용합니다.\r\n  if (Array.isArray(input.target)) {\r\n    const animatables = input.target.flatMap((target) =>\r\n      !!currentScene\r\n        ? playAnimationTarget(currentScene, target, animations, maxFrame, stopCurrunt)\r\n        : []\r\n    );\r\n\r\n    // * 입력한 콜백이 있으면, await 후에 호출합니다.\r\n    if (!!input.onAnimationEnd) {\r\n      await Promise.all(animatables.map((animatable) => animatable.waitAsync()));\r\n      input.onAnimationEnd();\r\n    }\r\n  } else {\r\n    const animatable = playAnimationTarget(\r\n      currentScene,\r\n      input.target,\r\n      animations,\r\n      maxFrame,\r\n      stopCurrunt\r\n    );\r\n    if (!!input.onAnimationEnd) {\r\n      await animatable.waitAsync();\r\n      input.onAnimationEnd();\r\n    }\r\n  }\r\n};\r\n\r\n//-------------------------------------------------\r\nexport const generateAnimation = (targetProperty: string, animationType: number) => {\r\n  return new Animation(\r\n    targetProperty,\r\n    targetProperty,\r\n    ANIMATION_TARGET_FRAME,\r\n    animationType,\r\n    Animation.ANIMATIONLOOPMODE_CONSTANT\r\n  );\r\n};\r\nconst generateAnimationByProperty = (param: AnimationProperty, easingFunction?: EasingFunction) => {\r\n  let type = 0;\r\n  if (Array.isArray(param.keyFrame)) {\r\n    type = getAnimationType(param.keyFrame[0].from);\r\n  } else {\r\n    type = getAnimationType(param.keyFrame.from);\r\n  }\r\n  const animation = generateAnimation(param.targetProperty, type);\r\n  if (easingFunction) animation.setEasingFunction(easingFunction);\r\n\r\n  if (Array.isArray(param.keyFrame)) {\r\n    let start = 0;\r\n    param.keyFrame.forEach((keyFrame) => {\r\n      let frame = 0;\r\n      if (keyFrame.duration !== undefined) {\r\n        frame = timeToFrame(keyFrame.duration);\r\n      } else if (keyFrame.frame !== undefined) {\r\n        frame = keyFrame.frame;\r\n      }\r\n      setAnimationKeyFrame(animation, keyFrame, start, start + frame);\r\n      start += frame;\r\n    });\r\n  } else {\r\n    let frame = 0;\r\n    if (param.keyFrame.duration !== undefined) {\r\n      frame = timeToFrame(param.keyFrame.duration);\r\n    } else if (param.keyFrame.frame !== undefined) {\r\n      frame = param.keyFrame.frame;\r\n    }\r\n    setAnimationKeyFrame(animation, param.keyFrame, 0, frame);\r\n  }\r\n  return animation;\r\n};\r\nconst setAnimationKeyFrame = (\r\n  animation: Animation,\r\n  keyFrame: AnimationKeyFrame,\r\n  start: number,\r\n  end: number\r\n) => {\r\n  animation.setKeys([\r\n    { frame: start, value: keyFrame.from },\r\n    { frame: end, value: keyFrame.to },\r\n  ]);\r\n};\r\nconst playAnimationTarget = (\r\n  scene: Scene,\r\n  target: AnimationTarget,\r\n  animations: Animation[],\r\n  frame: number,\r\n  stopCurrunt: boolean\r\n) => {\r\n  target.animations = animations;\r\n\r\n  const animatable = scene.beginAnimation(\r\n    target,\r\n    0,\r\n    frame,\r\n    false,\r\n    1,\r\n    undefined,\r\n    undefined,\r\n    stopCurrunt\r\n  );\r\n  animatable.disposeOnEnd = true;\r\n\r\n  return animatable;\r\n};\r\nconst TYPEOF_NUMBER = 'number';\r\nconst getAnimationType = (value: AnimationValue) => {\r\n  if (typeof value === TYPEOF_NUMBER) {\r\n    return Animation.ANIMATIONTYPE_FLOAT;\r\n  } else if (value instanceof Vector3) {\r\n    return Animation.ANIMATIONTYPE_VECTOR3;\r\n  } else if (value instanceof Color3) {\r\n    return Animation.ANIMATIONTYPE_COLOR3;\r\n  }\r\n\r\n  return Animation.ANIMATIONTYPE_FLOAT;\r\n};\r\n//-------------------------------------------------\r\nexport const timeToFrame = (seconds: number) => {\r\n  return Math.round(seconds * ANIMATION_TARGET_FRAME);\r\n};\r\n","import {\r\n  BackEase,\r\n  BezierCurveEase,\r\n  BounceEase,\r\n  CircleEase,\r\n  CubicEase,\r\n  EasingFunction,\r\n  ElasticEase,\r\n  ExponentialEase,\r\n  PowerEase,\r\n  QuadraticEase,\r\n  QuarticEase,\r\n  QuinticEase,\r\n  SineEase,\r\n} from '@babylonjs/core/Animations/easing';\r\n\r\nexport enum EasingFunctionType {\r\n  CircleEase,\r\n  BackEase,\r\n  BounceEase,\r\n  CubicEase,\r\n  ElasticEase,\r\n  ExponentialEase,\r\n  PowerEase,\r\n  QuadraticEase,\r\n  QuarticEase,\r\n  QuinticEase,\r\n  SineEase,\r\n  BezierCurveEase,\r\n}\r\n\r\nexport enum EasingModeType {\r\n  Out,\r\n  In,\r\n  InOut,\r\n}\r\n\r\ntype EasingFunctionTypeMap = { [key: string]: EasingFunctionType };\r\n\r\nexport const getEasingFunctionTypeMap = (): EasingFunctionTypeMap => {\r\n  let resultMap: EasingFunctionTypeMap = {};\r\n  let names = Object.keys(EasingFunctionType)\r\n    .map((key: any) => EasingFunctionType[key])\r\n    .filter((value) => typeof value === 'string') as string[];\r\n  for (let name of names) {\r\n    resultMap[name] = EasingFunctionType[name as keyof typeof EasingFunctionType];\r\n  }\r\n  return resultMap;\r\n};\r\n\r\ntype EasingModeTypeMap = { [key: string]: EasingModeType };\r\n\r\nexport const getEasingModeMap = (): EasingModeTypeMap => {\r\n  let resultMap: EasingModeTypeMap = {};\r\n  let names = Object.keys(EasingModeType)\r\n    .map((key: any) => EasingModeType[key])\r\n    .filter((value) => typeof value === 'string') as string[];\r\n  for (let name of names) {\r\n    resultMap[name] = EasingModeType[name as keyof typeof EasingModeType];\r\n  }\r\n  return resultMap;\r\n};\r\n\r\nexport const createEasingFunction = (\r\n  functionType: EasingFunctionType,\r\n  mode: EasingModeType\r\n): EasingFunction => {\r\n  let easingFunction = new CircleEase();\r\n  easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEOUT);\r\n  switch (functionType) {\r\n    case EasingFunctionType.CircleEase:\r\n      easingFunction = new CircleEase();\r\n      break;\r\n    case EasingFunctionType.BackEase:\r\n      easingFunction = new BackEase();\r\n      break;\r\n    case EasingFunctionType.BounceEase:\r\n      easingFunction = new BounceEase();\r\n      break;\r\n    case EasingFunctionType.CubicEase:\r\n      easingFunction = new CubicEase();\r\n      break;\r\n    case EasingFunctionType.ElasticEase:\r\n      easingFunction = new ElasticEase();\r\n      break;\r\n    case EasingFunctionType.ExponentialEase:\r\n      easingFunction = new ExponentialEase();\r\n      break;\r\n    case EasingFunctionType.PowerEase:\r\n      easingFunction = new PowerEase();\r\n      break;\r\n    case EasingFunctionType.QuadraticEase:\r\n      easingFunction = new QuadraticEase();\r\n      break;\r\n    case EasingFunctionType.QuarticEase:\r\n      easingFunction = new QuarticEase();\r\n      break;\r\n    case EasingFunctionType.QuinticEase:\r\n      easingFunction = new QuinticEase();\r\n      break;\r\n    case EasingFunctionType.SineEase:\r\n      easingFunction = new SineEase();\r\n      break;\r\n    case EasingFunctionType.BezierCurveEase:\r\n      easingFunction = new BezierCurveEase();\r\n      break;\r\n  }\r\n  switch (mode) {\r\n    case EasingModeType.Out:\r\n      easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEOUT);\r\n      break;\r\n    case EasingModeType.In:\r\n      easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEIN);\r\n      break;\r\n    case EasingModeType.InOut:\r\n      easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n      break;\r\n  }\r\n  return easingFunction;\r\n};\r\n","import { type DoorState, ThingType, type WindowState } from '@/components';\r\nimport { playAnimation } from '@/util/AnimationHelper';\r\nimport {\r\n  createEasingFunction,\r\n  EasingFunctionType,\r\n  EasingModeType,\r\n} from '@/util/EasingFunctionType';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport class OpenableSystem {\r\n  //--------------------------------------------\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'ThingState', 'Openable');\r\n  private targetArchetypeDirty = this.targetArchetype.with('ThingStateDirty');\r\n\r\n  private openEasingFunction = createEasingFunction(\r\n    EasingFunctionType.QuadraticEase,\r\n    EasingModeType.Out\r\n  );\r\n  private closeEasingFunction = createEasingFunction(\r\n    EasingFunctionType.QuarticEase,\r\n    EasingModeType.Out\r\n  );\r\n\r\n  constructor() {\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initEntity(e));\r\n    this.targetArchetypeDirty.onEntityAdded.add((e) => this.updateState(e));\r\n  }\r\n\r\n  dispose() {\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.targetArchetypeDirty);\r\n  }\r\n\r\n  //--------------------------------------------\r\n  private initEntity = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    const openable = entity.Openable;\r\n    openable.target.unfreezeWorldMatrix();\r\n    openable.target.getChildMeshes().forEach((mesh) => mesh.unfreezeWorldMatrix());\r\n  };\r\n  private updateState = (entity: (typeof this.targetArchetypeDirty.entities)[number]) => {\r\n    const openable = entity.Openable;\r\n    const thingState = entity.ThingState;\r\n    const currentState = thingState.state;\r\n    if (!currentState) return;\r\n\r\n    const duration = 0.8;\r\n\r\n    if (thingState.type === ThingType.Door) {\r\n      const isOpen = (currentState as DoorState).isOpen;\r\n\r\n      if (isOpen) {\r\n        playAnimation({\r\n          target: openable.target,\r\n          property: {\r\n            targetProperty: 'rotation',\r\n            keyFrame: {\r\n              duration: duration,\r\n              from: openable.closeRotation,\r\n              to: openable.openRotation,\r\n            },\r\n          },\r\n          easingFunction: this.openEasingFunction,\r\n        });\r\n      } else {\r\n        playAnimation({\r\n          target: openable.target,\r\n          property: {\r\n            targetProperty: 'rotation',\r\n            keyFrame: {\r\n              duration: duration,\r\n              from: openable.openRotation,\r\n              to: openable.closeRotation,\r\n            },\r\n          },\r\n          easingFunction: this.closeEasingFunction,\r\n        });\r\n      }\r\n    } else {\r\n      const isOpen = (currentState as WindowState).isOpen;\r\n      if (isOpen) {\r\n        playAnimation({\r\n          target: openable.target,\r\n          property: {\r\n            targetProperty: 'position',\r\n            keyFrame: {\r\n              duration: duration,\r\n              from: openable.closePosition,\r\n              to: openable.openPosition,\r\n            },\r\n          },\r\n          easingFunction: this.openEasingFunction,\r\n        });\r\n      } else {\r\n        playAnimation({\r\n          target: openable.target,\r\n          property: {\r\n            targetProperty: 'position',\r\n            keyFrame: {\r\n              duration: duration,\r\n              from: openable.openPosition,\r\n              to: openable.closePosition,\r\n            },\r\n          },\r\n          easingFunction: this.closeEasingFunction,\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { EngineStore, Ray, Vector3 } from '@babylonjs/core';\r\n\r\nimport { type LightState } from '@/components';\r\nimport { MaterialPluginManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport class LightControllerSystem {\r\n  private static instance: LightControllerSystem | undefined;\r\n\r\n  //--------------------------------------------\r\n  private targetArchetype = World.with(\r\n    'Identifier',\r\n    'TransformNode',\r\n    'Structure',\r\n    'ThingState',\r\n    'LightController'\r\n  );\r\n  private targetArchetypeInActiveHome = this.targetArchetype.with('ActiveHome');\r\n  private targetArchetypeDirty = this.targetArchetypeInActiveHome.with('ThingStateDirty');\r\n\r\n  constructor() {\r\n    LightControllerSystem.instance = this;\r\n    this.targetArchetypeDirty.onEntityAdded.add((e) => this.updateState(e));\r\n  }\r\n\r\n  dispose() {\r\n    LightControllerSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.targetArchetypeInActiveHome);\r\n    clearArchetype(this.targetArchetypeDirty);\r\n  }\r\n\r\n  private updateState = (entity: (typeof this.targetArchetypeDirty.entities)[number]) => {\r\n    const state = entity.ThingState.state as LightState;\r\n    MaterialPluginManager.instance.setRoomLightColor(entity.entityId, state.isOn, state.intensity);\r\n  };\r\n}\r\n","import { ObservableManager, RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { Entity, StateByThingType } from '@/components';\r\nimport type { Scene } from '@babylonjs/core';\r\n\r\nexport class ThingStateSystem {\r\n  //--------------------------------------------\r\n  private static instance: ThingStateSystem | undefined;\r\n  public static getThingStateEntities() {\r\n    return this.instance?.getThingStateEntities() ?? [];\r\n  }\r\n  public static getThingStateEntitiesInFloorplan(floorplanId: string) {\r\n    return this.instance?.getThingStateEntitiesInFloorplan(floorplanId) ?? [];\r\n  }\r\n  public static updateThingState(entityId: string, state: StateByThingType) {\r\n    this.instance?.updateThingState(entityId, state);\r\n  }\r\n\r\n  //--------------------------------------------\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'ThingState');\r\n  private thingStateDirtyArchetype = this.targetArchetype.with('ThingStateDirty');\r\n  private lastState = new Map<Entity, StateByThingType>();\r\n\r\n  constructor() {\r\n    ThingStateSystem.instance = this;\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initEntity(e));\r\n  }\r\n  dispose() {\r\n    ThingStateSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.thingStateDirtyArchetype);\r\n    this.lastState.clear();\r\n  }\r\n  //--------------------------------------------\r\n  private initEntity = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    this.lastState.set(entity, entity.ThingState.state);\r\n  };\r\n  public beforeRenderExecute = (scene: Scene) => {\r\n    for (const entity of this.targetArchetype) {\r\n      const lastState = this.lastState.get(entity);\r\n      if (!lastState) continue;\r\n\r\n      const state = entity.ThingState.state;\r\n      if (state !== lastState) {\r\n        World.addComponent(entity, 'ThingStateDirty', true);\r\n      }\r\n    }\r\n  };\r\n  public afterRenderExecute = (scene: Scene) => {\r\n    for (const entity of this.thingStateDirtyArchetype) {\r\n      World.removeComponent(entity, 'ThingStateDirty');\r\n      const lastState = this.lastState.get(entity);\r\n      if (!lastState) continue;\r\n\r\n      this.lastState.set(entity, entity.ThingState.state);\r\n    }\r\n  };\r\n\r\n  private getThingStateEntities() {\r\n    return this.targetArchetype.entities ?? [];\r\n  }\r\n  private getThingStateEntitiesInFloorplan(floorplanId: string) {\r\n    return this.targetArchetype.entities.filter((e) => e.Identifier.floorplanId == floorplanId);\r\n  }\r\n\r\n  private updateThingState(entityId: string, state: StateByThingType) {\r\n    const entity = this.targetArchetype.entities.find((e) => e.entityId === entityId);\r\n\r\n    if (entity) {\r\n      const component = entity.ThingState;\r\n      if (component) {\r\n        // update state\r\n        component.state = state;\r\n        // call apply system\r\n        ObservableManager.instance.onEntityStateChanged.notifyObservers(entityId);\r\n\r\n        RenderManager.RenderUpdate();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { clearArchetype, World } from '@/World';\r\n\r\nexport class FloorplanSystem {\r\n  private static instance: FloorplanSystem | undefined;\r\n  public static getFloorplanEntities() {\r\n    return this.instance?.getFloorplanEntities() ?? [];\r\n  }\r\n  public static getFloorplanEntitiesInActiveHome() {\r\n    return this.instance?.getFloorplanEntitiesInActiveHome() ?? [];\r\n  }\r\n  public static getFloorplanEntity(floorplanId: string) {\r\n    return this.instance?.getFloorplanEntity(floorplanId);\r\n  }\r\n\r\n  private targetArchetype = World.with('Identifier', 'Floorplan');\r\n  private targetArchetypeInActiveHome = this.targetArchetype.with('ActiveHome');\r\n\r\n  constructor() {\r\n    FloorplanSystem.instance = this;\r\n  }\r\n\r\n  dispose() {\r\n    FloorplanSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n    clearArchetype(this.targetArchetypeInActiveHome);\r\n  }\r\n\r\n  public getFloorplanEntities() {\r\n    return this.targetArchetype.entities ?? [];\r\n  }\r\n  public getFloorplanEntitiesInActiveHome() {\r\n    return this.targetArchetypeInActiveHome.entities ?? [];\r\n  }\r\n  public getFloorplanEntity(floorplanId: string) {\r\n    return this.targetArchetype.entities.find((e) => e.Identifier.floorplanId == floorplanId);\r\n  }\r\n}\r\n","import { clearArchetype, World } from '@/World';\r\n\r\nexport class CameraTargetSystem {\r\n  private static instance: CameraTargetSystem | undefined;\r\n  public static getCameraTargetEntities() {\r\n    return this.instance?.getCameraTargetEntities() ?? [];\r\n  }\r\n  public static getCameraTargetEntitiesInFloorplan(floorplanId: string) {\r\n    return this.instance?.getCameraTargetEntitiesInFloorplan(floorplanId) ?? [];\r\n  }\r\n  public static getCameraTargetEntityWithSameName(targetName: string) {\r\n    const entities = this.instance?.targetArchetype.entities.find(\r\n      (e) => e.TransformNode.name == targetName\r\n    );\r\n    return entities;\r\n  }\r\n\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'TransformNode', 'CameraTarget');\r\n\r\n  constructor() {\r\n    CameraTargetSystem.instance = this;\r\n  }\r\n\r\n  dispose() {\r\n    CameraTargetSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  public getCameraTargetEntities() {\r\n    return this.targetArchetype.entities ?? [];\r\n  }\r\n  public getCameraTargetEntitiesInFloorplan(floorplanId: string) {\r\n    return (\r\n      this.targetArchetype.entities.filter((e) => e.Identifier.floorplanId == floorplanId) ?? []\r\n    );\r\n  }\r\n}\r\n","import { PBRMaterial } from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nexport class HallwaySystem {\r\n  private static instance: HallwaySystem | undefined;\r\n  public static setHallwayVisibility(visibility: number) {\r\n    this.instance?.setHallwayVisibility(visibility);\r\n  }\r\n\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'Structure', 'Hallway');\r\n\r\n  constructor() {\r\n    HallwaySystem.instance = this;\r\n    this.targetArchetype.onEntityAdded.add((e) => this.initTransparentable(e));\r\n  }\r\n\r\n  dispose() {\r\n    HallwaySystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  private initTransparentable = (entity: (typeof this.targetArchetype.entities)[number]) => {\r\n    entity.Structure.meshes.forEach((mesh) => {\r\n      if (mesh.material && mesh.material instanceof PBRMaterial) {\r\n        mesh.visibility = 0;\r\n        mesh.material.environmentIntensity = 1;\r\n      }\r\n    });\r\n  };\r\n  private setHallwayVisibility(visibility: number) {\r\n    for (const entity of this.targetArchetype.entities) {\r\n      for (const mesh of entity.Structure.meshes) mesh.visibility = visibility;\r\n    }\r\n    RenderManager.RenderUpdate();\r\n  }\r\n}\r\n","import { PBRMaterial, StandardMaterial } from '@babylonjs/core';\r\n\r\nimport { StructureType } from '@/components';\r\nimport { RenderManager } from '@/manager';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { MaterialData } from '@/data';\r\n\r\nexport class MaterialChangeSystem {\r\n  private static instance: MaterialChangeSystem | undefined;\r\n  public static getMaterialChangeableEntities() {\r\n    return this.instance?.getMaterialChangeable() ?? [];\r\n  }\r\n  public static getMaterialChangeableEntitiesInFloorplan(floorplanId: string) {\r\n    return this.instance?.getMaterialChangeableInFloorplan(floorplanId) ?? [];\r\n  }\r\n\r\n  private targetArchetype = World.with(\r\n    'Identifier',\r\n    'TransformNode',\r\n    'Structure',\r\n    'MaterialChangeable'\r\n  );\r\n  // private targetArchetypeInActiveHome = this.targetArchetype.with('ActiveHome');\r\n\r\n  constructor() {\r\n    MaterialChangeSystem.instance = this;\r\n  }\r\n\r\n  dispose() {\r\n    MaterialChangeSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  private getMaterialChangeable() {\r\n    return this.targetArchetype.entities;\r\n  }\r\n  private getMaterialChangeableInFloorplan(floorplanId: string) {\r\n    return this.targetArchetype.entities.filter((e) => e.Identifier.floorplanId == floorplanId);\r\n  }\r\n}\r\n","import { clearArchetype, World } from '@/World';\r\n\r\nimport type { StructureType } from '@/components';\r\n\r\nexport class StructureSystem {\r\n  private static instance: StructureSystem | undefined;\r\n  public static getStructureMeshesByType(type: StructureType) {\r\n    return this.instance?.getStructureMeshesByType(type) ?? [];\r\n  }\r\n\r\n  private targetArchetype = World.with('ActiveHome', 'Identifier', 'Structure');\r\n\r\n  constructor() {\r\n    StructureSystem.instance = this;\r\n  }\r\n  dispose() {\r\n    StructureSystem.instance = undefined;\r\n    clearArchetype(this.targetArchetype);\r\n  }\r\n\r\n  private getStructureEntities() {\r\n    return this.targetArchetype.entities ?? [];\r\n  }\r\n  private getStructureEntitiesByType(type: StructureType) {\r\n    return this.getStructureEntities().filter((e) => e.Structure.structureType == type) ?? [];\r\n  }\r\n  private getStructureMeshesByType(type: StructureType) {\r\n    return this.getStructureEntitiesByType(type).flatMap((e) => e.Structure.meshes) ?? [];\r\n  }\r\n}\r\n","import { AbstractMesh, EngineStore, Ray, Vector3 } from '@babylonjs/core';\r\n\r\nimport { type Entity, type RoomInfo, type RoomObjectInfo } from '@/components';\r\nimport { MaterialPluginManager } from '@/manager';\r\nimport { toRadian } from '@/util/camera/CameraUtils';\r\nimport { clearArchetype, World } from '@/World';\r\n\r\nimport type { With } from 'miniplex';\r\n\r\nexport class RoomSystem {\r\n  //------------------------------------------------------------------------------------\r\n  // #### API ####\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * 입력한 floorplan에 속한 모든 RoomObject Entity의 Room 정보를 갱신합니다.\r\n   */\r\n  public static updateRoomInFloorplan(floorplanId: string) {\r\n    this.instance?.updateRoomInFloorplan(floorplanId);\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * Room Component를 구성하고 있는 Entity를 RoomInfo로 변환해 반환합니다.\r\n   * @param floorplanId 입력시 해당 floorplan에 속한 RoomInfo만 반환합니다.\r\n   * @returns\r\n   */\r\n  public static getRooms(floorplanId?: string) {\r\n    return this.instance?.RoomInfoByEntities(this.instance?.getRooms(floorplanId)) ?? [];\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity를 RoomObjectInfo로 변환해 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  public static getRoomObjects(roomId?: string) {\r\n    return this.instance?.RoomObjectInfoByEntities(this.instance?.getRoomObjects(roomId)) ?? [];\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity 중 Thing(IoT)State를 가진 Entity를 RoomObjectInfo로 변환해 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  public static getRoomObjectsOnlyThing(roomId?: string) {\r\n    return (\r\n      this.instance?.RoomObjectInfoByEntities(this.instance?.getRoomObjectsOnlyThing(roomId)) ?? []\r\n    );\r\n  }\r\n\r\n  //------------------------------------------------------------------------------------\r\n  // #### System Base ####\r\n  //------------------------------------------------------------------------------------\r\n  private static instance: RoomSystem | undefined;\r\n  private roomArchetype = World.with('Identifier', 'TransformNode', 'Room', 'Structure');\r\n  private roomObjectArchetype = World.with('Identifier', 'TransformNode', 'RoomObject');\r\n  private roomObjectDirtyArchetype = this.roomObjectArchetype.with('TransformDirty');\r\n  //------------------------------------------------------------------------------------\r\n  constructor() {\r\n    RoomSystem.instance = this;\r\n    this.roomArchetype.onEntityAdded.add((e) => this.initRoom(e));\r\n    this.roomObjectDirtyArchetype.onEntityAdded.add((e) => this.updateRoom(e));\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  dispose() {\r\n    RoomSystem.instance = undefined;\r\n    clearArchetype(this.roomArchetype);\r\n    clearArchetype(this.roomObjectArchetype);\r\n    clearArchetype(this.roomObjectDirtyArchetype);\r\n  }\r\n\r\n  //------------------------------------------------------------------------------------\r\n  // #### Initialize ####\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * Room Entity가 추가될 때 초기화 합니다.\r\n   */\r\n  private initRoom = (entity: (typeof this.roomArchetype.entities)[number]) => {\r\n    for (let i = 0; entity.Room.viewDataList && i < entity.Room.viewDataList.length; i++) {\r\n      const pos = entity.Room.viewDataList[i].position;\r\n      entity.Room.viewDataList[i].position = new Vector3(pos.x, pos.y, pos.z);\r\n      const rot = entity.Room.viewDataList[i].rotation;\r\n      entity.Room.viewDataList[i].rotation = new Vector3(\r\n        rot.x * toRadian,\r\n        rot.y * toRadian,\r\n        rot.z * toRadian\r\n      );\r\n    }\r\n    entity.Structure.meshes.forEach((m) => {\r\n      m.isPickable = true;\r\n      MaterialPluginManager.instance.registRoomLightMaterial(entity.entityId, m.material);\r\n    });\r\n  };\r\n\r\n  //------------------------------------------------------------------------------------\r\n  // #### Update Room With Raycast ####\r\n  //------------------------------------------------------------------------------------\r\n  private rayDirection = Vector3.Up().scale(-1);\r\n  private rayDistance = 1000;\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * 입력한 floorplan에 속한 모든 RoomObject Entity의 Room 정보를 갱신합니다.\r\n   */\r\n  private updateRoomInFloorplan(floorplanId: string) {\r\n    this.roomObjectArchetype.entities\r\n      .filter((e) => e.Identifier.floorplanId === floorplanId && !e.Room)\r\n      .forEach((e) => this.updateRoom(e));\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Entity의 Room 정보를 갱신합니다.\r\n   * @returns\r\n   */\r\n  private updateRoom = (entity: (typeof this.roomObjectArchetype.entities)[number]) => {\r\n    if (entity.Room) return;\r\n\r\n    const transformNode = entity.TransformNode;\r\n    const structure = entity.Structure;\r\n\r\n    const boundingInfo = transformNode.getHierarchyBoundingVectors();\r\n    let origin = boundingInfo.max.add(boundingInfo.min).scale(0.5);\r\n    origin.y = 2;\r\n\r\n    let hitEntity: ReturnType<typeof this.pickWithRay> = undefined;\r\n    let meshes: AbstractMesh[] | undefined = undefined;\r\n\r\n    if (structure) {\r\n      hitEntity = this.pickWithRay([origin]);\r\n      meshes = structure.meshes;\r\n    } else {\r\n      const forward = transformNode.forward;\r\n      const forwardOrigin = origin.add(forward.scale(0.5));\r\n      const backOrigin = origin.add(forward.scale(-0.5));\r\n      hitEntity = this.pickWithRay([origin, forwardOrigin, backOrigin]);\r\n      meshes = transformNode.getChildMeshes();\r\n    }\r\n\r\n    if (hitEntity && meshes && entity.RoomObject.roomEntityId !== hitEntity.entityId) {\r\n      const roomEntityId = hitEntity.entityId;\r\n      entity.RoomObject.roomEntityId = roomEntityId;\r\n      meshes.forEach((m) =>\r\n        MaterialPluginManager.instance.registRoomLightMaterial(roomEntityId, m.material)\r\n      );\r\n    }\r\n  };\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * 입력한 origins 좌표로 Raycast 연산해 Pick(Hit)된 Room Entity를 판별합니다.\r\n   * @returns\r\n   */\r\n  private pickWithRay = (origins: Vector3[]) => {\r\n    const scene = EngineStore.LastCreatedScene;\r\n    if (!scene) return;\r\n\r\n    let ray: Ray | undefined;\r\n    for (let i = 0; i < origins.length; i++) {\r\n      const origin = origins[i];\r\n      if (ray) {\r\n        ray.origin = origin;\r\n      } else {\r\n        ray = new Ray(origin, this.rayDirection, this.rayDistance);\r\n      }\r\n      let hitEntity:\r\n        | With<Entity, 'Identifier' | 'TransformNode' | 'Structure' | 'Room'>\r\n        | undefined;\r\n      const hit = scene.pickWithRay(\r\n        ray,\r\n        (pickedMesh) => {\r\n          hitEntity = this.checkPickedMeshIsRoomMesh(pickedMesh);\r\n          return !!hitEntity;\r\n        },\r\n        true\r\n      );\r\n      if (hitEntity)\r\n        return hitEntity as With<Entity, 'Identifier' | 'TransformNode' | 'Structure' | 'Room'>;\r\n    }\r\n    return undefined;\r\n  };\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * Pick(Hit)된 Mesh가 Room Entities의 Mesh인 지 판별하고 판별된 Room Entity를 반환합니다.\r\n   * @returns\r\n   */\r\n  private checkPickedMeshIsRoomMesh(pickedMesh: AbstractMesh) {\r\n    for (const entity of this.roomArchetype.entities) {\r\n      for (const mesh of entity.Structure.meshes) {\r\n        if (mesh === pickedMesh) {\r\n          return entity;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //------------------------------------------------------------------------------------\r\n  // #### Query ####\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * Room Component를 구성하고 있는 Entity를 모두 반환합니다.\r\n   * @param floorplanId 입력시 해당 floorplan에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  private getRooms(floorplanId?: string) {\r\n    return (\r\n      this.roomArchetype.entities.flatMap((e) => {\r\n        if (!floorplanId || e.Identifier.floorplanId === floorplanId) {\r\n          return e;\r\n        } else {\r\n          return [];\r\n        }\r\n      }) ?? []\r\n    );\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity를 모두 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  private getRoomObjects(roomId?: string) {\r\n    return (\r\n      this.roomObjectArchetype.entities.flatMap((e) => {\r\n        let roomEntityId = e.RoomObject.roomEntityId ?? (e.Room ? e.entityId : undefined);\r\n        if (roomEntityId) {\r\n          if (roomId) {\r\n            if (roomEntityId === roomId) {\r\n              return e;\r\n            } else {\r\n              return [];\r\n            }\r\n          } else {\r\n            return e;\r\n          }\r\n        } else {\r\n          return [];\r\n        }\r\n      }) ?? []\r\n    );\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity 중 Thing(IoT)State를 가진 Entity를 모두 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  private getRoomObjectsOnlyThing(roomId?: string) {\r\n    return (\r\n      this.getRoomObjects(roomId).flatMap((e) => {\r\n        if (e.ThingState) {\r\n          return e;\r\n        } else {\r\n          return [];\r\n        }\r\n      }) ?? []\r\n    );\r\n  }\r\n\r\n  //------------------------------------------------------------------------------------\r\n  // #### Convert Info By Entity ####\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * Room Component를 구성하고 있는 Entity를 RoomInfo로 변환합니다.\r\n   * @returns\r\n   */\r\n  private RoomInfoByEntities(entities: ReturnType<typeof this.getRooms>): RoomInfo[] {\r\n    return (\r\n      entities.flatMap((e) => {\r\n        return {\r\n          floorplanId: e.Identifier.floorplanId,\r\n          roomEntityId: e.entityId,\r\n          name: e.TransformNode.name,\r\n          center: e.TransformNode.position,\r\n          extends: e.Room.extends,\r\n          viewDataList: e.Room.viewDataList,\r\n        };\r\n      }) ?? []\r\n    );\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity를 RoomObjectInfo로 변환합니다.\r\n   * @param entities\r\n   * @returns\r\n   */\r\n  private RoomObjectInfoByEntities(\r\n    entities: ReturnType<typeof this.getRoomObjects>\r\n  ): RoomObjectInfo[] {\r\n    return (\r\n      entities.flatMap((e) => {\r\n        return {\r\n          roomEntityID: e.RoomObject.roomEntityId ?? e.entityId,\r\n          objectEntityId: e.entityId,\r\n          name: e.TransformNode.name,\r\n          position: e.TransformNode.position,\r\n          forward: e.TransformNode.forward,\r\n          ThingState: e.ThingState,\r\n        };\r\n      }) ?? []\r\n    );\r\n  }\r\n  //------------------------------------------------------------------------------------\r\n}\r\n","import { Engine, Scene, Vector3, Viewport } from '@babylonjs/core';\r\n\r\nimport {\r\n  type AlignOption,\r\n  AnimationOption,\r\n  CameraAngle,\r\n  CameraPosition,\r\n  CameraViewport,\r\n} from '@/data/CameraType';\r\nimport { CameraTargetSystem, FloorplanSystem } from '@/system';\r\n\r\nimport type { ZEDCameraBase } from '@/ZEDCamera';\r\n\r\nexport class CameraManager {\r\n  private readonly DEFAULT_ANIMATION_OPTION = new AnimationOption();\r\n  private readonly DEFAULT_CAMERA_ANGLE = new CameraAngle();\r\n\r\n  constructor(private engine: Engine, private scene: Scene, private zedCamera: ZEDCameraBase) {\r\n    this.engine = engine;\r\n    this.scene = scene;\r\n    this.zedCamera = zedCamera;\r\n  }\r\n\r\n  public async moveTo(param: {\r\n    position: CameraPosition;\r\n    cameraAngle?: CameraAngle;\r\n    isRelativeAngle?: boolean;\r\n    animationOption?: AnimationOption;\r\n  }): Promise<void> {\r\n    if (param.cameraAngle === undefined) {\r\n      param.cameraAngle = this.DEFAULT_CAMERA_ANGLE;\r\n    }\r\n    if (param.isRelativeAngle === undefined) {\r\n      param.isRelativeAngle = false;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n\r\n    const option = param.animationOption;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    await this.zedCamera.moveTo(\r\n      param.position,\r\n      param.cameraAngle,\r\n      param.isRelativeAngle,\r\n      option.seconds\r\n    );\r\n  }\r\n\r\n  public getCameraTargetEntities() {\r\n    return CameraTargetSystem.getCameraTargetEntities();\r\n  }\r\n  public getCameraTargetEntityWithSameName(targetName: string) {\r\n    return CameraTargetSystem.getCameraTargetEntityWithSameName(targetName);\r\n  }\r\n\r\n  public async moveToCameraTarget(param: {\r\n    targetName: string;\r\n    cameraAngle?: CameraAngle;\r\n    dist?: number;\r\n    animationOption?: AnimationOption;\r\n    fromForward?: boolean;\r\n  }): Promise<void> {\r\n    const entity = this.getCameraTargetEntityWithSameName(param.targetName);\r\n    if (!entity) return;\r\n\r\n    if (param.cameraAngle === undefined) {\r\n      param.cameraAngle = this.DEFAULT_CAMERA_ANGLE;\r\n    }\r\n    if (param.dist === undefined) {\r\n      param.dist = 2;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    if (param.fromForward === undefined) {\r\n      param.fromForward = true;\r\n    }\r\n\r\n    const transform = entity.TransformNode;\r\n    const option = param.animationOption;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    await this.zedCamera.moveToCameraTarget(\r\n      transform.absolutePosition,\r\n      transform.forward,\r\n      param.cameraAngle,\r\n      param.dist,\r\n      option.seconds,\r\n      param.fromForward\r\n    );\r\n  }\r\n\r\n  public async moveToCoordinate(param: {\r\n    position: Vector3;\r\n    rotation: Vector3;\r\n    animationOption?: AnimationOption;\r\n  }): Promise<void> {\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n\r\n    const option = param.animationOption;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    await this.zedCamera.moveToCoordinate(param.position, param.rotation, option.seconds);\r\n  }\r\n\r\n  public quaterView(alphaAngle = 45, betaAngle = 45, animationOption?: AnimationOption): void {\r\n    const option = animationOption ? animationOption : this.DEFAULT_ANIMATION_OPTION;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    this.zedCamera.quaterView(alphaAngle, betaAngle, option.seconds);\r\n  }\r\n\r\n  public quaterViewFit(alphaAngle = 45, betaAngle = 45, animationOption?: AnimationOption): void {\r\n    const option = animationOption ? animationOption : this.DEFAULT_ANIMATION_OPTION;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    const ext = this.getExtendsOrSceneExtends();\r\n\r\n    const width = this.engine.getRenderWidth();\r\n    const height = this.engine.getRenderHeight();\r\n    const ratio = width / height;\r\n    const zoomPercent = ratio * 100 > 100 ? 100 : ratio * 100;\r\n\r\n    this.zedCamera.quaterViewFit(alphaAngle, betaAngle, option.seconds, zoomPercent, ext);\r\n  }\r\n\r\n  public topViewFit(animationOption?: AnimationOption): void {\r\n    const option = animationOption ? animationOption : this.DEFAULT_ANIMATION_OPTION;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    const ext = this.getExtendsOrSceneExtends();\r\n    this.zedCamera.topViewFit(option.seconds, ext);\r\n  }\r\n\r\n  public topViewCustom(param: {\r\n    x?: number;\r\n    y?: number;\r\n    zoomPercent?: number;\r\n    rotation?: number;\r\n    animationOption?: AnimationOption;\r\n  }): void {\r\n    if (param.x === undefined) {\r\n      param.x = 0;\r\n    }\r\n    if (param.y === undefined) {\r\n      param.y = 0;\r\n    }\r\n    if (param.zoomPercent === undefined) {\r\n      param.zoomPercent = 100;\r\n    }\r\n    if (param.rotation === undefined) {\r\n      param.rotation = 0;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    const option = param.animationOption;\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    this.zedCamera.topViewCustom(\r\n      param.x,\r\n      param.y,\r\n      param.zoomPercent,\r\n      param.rotation,\r\n      option.seconds,\r\n      this.getExtendsOrSceneExtends()\r\n    );\r\n  }\r\n\r\n  public zoomIn(param?: { percent?: number; animationOption?: AnimationOption }): void {\r\n    if (param === undefined) {\r\n      param = {};\r\n    }\r\n    if (param.percent === undefined) {\r\n      param.percent = 30;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    const option = param.animationOption;\r\n\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    this.zedCamera.zoomIn(param.percent, option.seconds);\r\n  }\r\n\r\n  public zoomOut(param?: { percent?: number; animationOption?: AnimationOption }): void {\r\n    if (param === undefined) {\r\n      param = {};\r\n    }\r\n    if (param.percent === undefined) {\r\n      param.percent = 30;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    const option = param.animationOption;\r\n\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    this.zedCamera.zoomOut(param.percent, option.seconds);\r\n  }\r\n\r\n  public setDistance(param: { distance: number; animationOption?: AnimationOption }): void {\r\n    if (param.distance === undefined) {\r\n      param.distance = 5;\r\n    }\r\n    if (param.animationOption === undefined) {\r\n      param.animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    const option = param.animationOption;\r\n\r\n    this.zedCamera.setEasingFunction(option.easingFunction, option.easingMode);\r\n    this.zedCamera.setDistance(param.distance, option.seconds);\r\n  }\r\n\r\n  public zoomFitOnInit() {\r\n    const ext = this.getExtendsOrSceneExtends();\r\n    this.zedCamera.zoomFitOnInit(ext);\r\n  }\r\n  private getExtendsOrSceneExtends(): { min: Vector3; max: Vector3 } {\r\n    // 현재 Home의 첫번째 floor 가 존재하는 시점에 extends 를 세팅한다\r\n    let ext: { min: Vector3; max: Vector3 } | undefined = undefined;\r\n    const floorplanEntities = FloorplanSystem.getFloorplanEntities();\r\n    if (floorplanEntities.length > 0) {\r\n      ext = floorplanEntities[0].Floorplan.extends;\r\n    }\r\n    return ext ? ext : this.scene.getWorldExtends();\r\n  }\r\n\r\n  public setTargetFloor(floorId: string, toTopView = false, animationOption?: AnimationOption) {\r\n    if (animationOption === undefined) {\r\n      animationOption = this.DEFAULT_ANIMATION_OPTION;\r\n    }\r\n    this.zedCamera.setEasingFunction(animationOption.easingFunction, animationOption.easingMode);\r\n\r\n    const targetEntity = FloorplanSystem.getFloorplanEntity(floorId);\r\n\r\n    if (targetEntity) {\r\n      const resetAngles = toTopView;\r\n      this.zedCamera.initWithExtends(\r\n        targetEntity.Floorplan.extends,\r\n        resetAngles,\r\n        animationOption.seconds\r\n      );\r\n    }\r\n  }\r\n  public setViewport(to: CameraViewport) {\r\n    this.zedCamera.setViewport(to as Viewport);\r\n    this.scene.render();\r\n  }\r\n\r\n  public transformViewport(from: CameraViewport, to: CameraViewport, second: number) {\r\n    this.zedCamera.transformViewport(from as Viewport, to as Viewport, second);\r\n  }\r\n\r\n  public transformFromCurrentViewport(to: CameraViewport, second: number) {\r\n    const from = this.zedCamera.getViewport();\r\n    this.zedCamera.transformViewport(from as Viewport, to as Viewport, second);\r\n  }\r\n\r\n  public alignViewport(\r\n    second: number,\r\n    isLandscape: boolean,\r\n    align: AlignOption,\r\n    onEnd?: () => void\r\n  ) {\r\n    const width = this.engine.getRenderWidth();\r\n    const height = this.engine.getRenderHeight();\r\n    const ratio = width / height;\r\n    const from = this.zedCamera.getViewport();\r\n    let to = new CameraViewport(0, 0, isLandscape ? 0.7 : 1, 1);\r\n    if (ratio > 1.0) {\r\n      if (align.column === 'left') {\r\n        to.width = ratio;\r\n      } else if (align.column === 'right') {\r\n        to.x = 1 - ratio;\r\n        to.width = ratio;\r\n      }\r\n    }\r\n    if (ratio < 1.0) {\r\n      if (align.row === 'top' && ratio < 1.0) {\r\n        to.y = 0.5 * (0.9 - ratio);\r\n      } else if (align.row === 'bottom' && ratio < 1.0) {\r\n        to.y = -0.5 * (1 - ratio);\r\n      }\r\n    }\r\n    this.zedCamera.transformViewport(from as Viewport, to as Viewport, second, onEnd);\r\n  }\r\n\r\n  public enableControl(enable: boolean) {\r\n    this.zedCamera.enableControl(enable);\r\n  }\r\n\r\n  public setCameraLimits(applyLimits: boolean) {\r\n    this.zedCamera.setCameraLimits(applyLimits);\r\n  }\r\n\r\n  // min, max : 카메라의 radius 최소 최대 값 (타겟으로부터의 거리)\r\n  // undefined : 현재 값에서 변경하지 않음\r\n  // null : 한계 값을 null 로 설정 (제한 값을 없앰)\r\n  public setMinMaxDistance(value: { min?: number | null; max?: number | null }) {\r\n    this.zedCamera.setMinMaxDistance(value);\r\n  }\r\n}\r\n// END of ZEDCamera class\r\n","import {\r\n  DeviceType,\r\n  GizmoManager,\r\n  PointerDragBehavior,\r\n  PointerInput,\r\n  TransformNode,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nimport { type StateByThingType, type VideoPlayerIO } from '@/components';\r\nimport { addModel } from '@/data';\r\nimport { RenderManager } from '@/manager';\r\nimport { HallwaySystem, ThingStateSystem, TransformSystem, VideoPlayerSystem } from '@/system';\r\nimport { PointerDragSystem } from '@/system/PointerDragSystem';\r\nimport { convertUnityCoordsToBabylon } from '@/util/Utile';\r\nimport { World } from '@/World';\r\n\r\nimport type { WebDeviceInputSystem } from '@babylonjs/core/DeviceInput/webDeviceInputSystem';\r\n\r\nexport class FurnitureManager {\r\n  private gizmoManager: GizmoManager;\r\n  constructor(gizmoManager: GizmoManager) {\r\n    this.gizmoManager = gizmoManager;\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Control ThingState Entities\r\n  public getThingStateEntities() {\r\n    return ThingStateSystem.getThingStateEntities();\r\n  }\r\n  public getThingStateEntitiesInFloorplan(floorId: string) {\r\n    return ThingStateSystem.getThingStateEntitiesInFloorplan(floorId);\r\n  }\r\n  public updateThingState(entityId: string, state: StateByThingType) {\r\n    ThingStateSystem.updateThingState(entityId, state);\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Control Hidable Entities\r\n  public setHallwayVisibility(visibility: number): void {\r\n    HallwaySystem.setHallwayVisibility(visibility);\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Control MovableTransform Entities\r\n  public getMovableTransformEntitiesInFloorplan(floorplanId: string) {\r\n    return TransformSystem.getMovableTransformEntitiesInFloorplan(floorplanId);\r\n  }\r\n  public updateTransform(entityId: string, position?: Vector3, rotationY?: number) {\r\n    TransformSystem.updateTransform(entityId, position, rotationY);\r\n  }\r\n  public setTransfromGizmo(transformNode?: TransformNode) {\r\n    if (!!transformNode) {\r\n      this.gizmoManager.attachableNodes = [transformNode];\r\n      this.gizmoManager.attachToNode(transformNode);\r\n    } else {\r\n      this.gizmoManager.attachableNodes = null;\r\n      this.gizmoManager.attachToNode(null);\r\n    }\r\n    RenderManager.RenderUpdate();\r\n  }\r\n  public setEnableDraggingMovable(enable: boolean) {\r\n    PointerDragSystem.setEnableDraggingMovable(enable);\r\n  }\r\n\r\n  public pickup(\r\n    rootNode: TransformNode,\r\n    /** touch의 경우 pointerId */\r\n    pointerId?: number\r\n  ) {\r\n    // Impose pointer down\r\n    const engine = rootNode.getEngine();\r\n    const scene = rootNode.getScene();\r\n    const webDeviceInputSystem = engine._deviceSourceManager\r\n      ?._deviceInputSystem as WebDeviceInputSystem;\r\n    const deviceType = pointerId === undefined ? DeviceType.Mouse : DeviceType.Touch;\r\n    const deviceSlot = deviceType === DeviceType.Mouse ? 0 : 0;\r\n    if (deviceType === DeviceType.Touch) {\r\n      webDeviceInputSystem['_activeTouchIds'][deviceSlot] = pointerId;\r\n    }\r\n    if (!webDeviceInputSystem['_inputs'][deviceType]) {\r\n      webDeviceInputSystem['_inputs'][deviceType] = {};\r\n    }\r\n    if (!webDeviceInputSystem['_inputs'][deviceType][deviceSlot]) {\r\n      webDeviceInputSystem['_addPointerDevice'](deviceType, deviceSlot, 0, 0);\r\n    }\r\n    const pointer = webDeviceInputSystem['_inputs'][deviceType][deviceSlot];\r\n    pointer[PointerInput.LeftClick] = 1;\r\n    scene._inputManager['_pointerCaptures'][1] = true;\r\n    scene._inputManager['_totalPointersPressed']++;\r\n\r\n    // TODO: 포인터로 바로 이동하여 초기화\r\n    const pointerDragBehavior = rootNode.getBehaviorByName('PointerDrag') as PointerDragBehavior;\r\n    const dragDeltaRatio = pointerDragBehavior.dragDeltaRatio;\r\n    pointerDragBehavior.onDragStartObservable.addOnce(() => {\r\n      pointerDragBehavior.dragDeltaRatio = 1;\r\n      rootNode.position = convertUnityCoordsToBabylon(pointerDragBehavior.lastDragPosition);\r\n    });\r\n    pointerDragBehavior.onDragEndObservable.addOnce(() => {\r\n      pointerDragBehavior.dragDeltaRatio = dragDeltaRatio;\r\n    });\r\n    pointerDragBehavior.startDrag(1);\r\n  }\r\n\r\n  /**\r\n   * 새로운 가구 추가\r\n   * @remark 현재 임시로 상자를 사용함\r\n   *\r\n   * @todo 가구 모델 로딩\r\n   *\r\n   * @version unreleased\r\n   * @param param0\r\n   * @returns 생성된 entity\r\n   */\r\n  public async addFurniture(\r\n    homeId: string,\r\n    floorplanId: string,\r\n    furnitureName: string,\r\n    position?: Vector3,\r\n    rotationY?: number,\r\n    scale?: Vector3\r\n  ) {\r\n    const model = await addModel(homeId, floorplanId, furnitureName, position, rotationY, scale);\r\n\r\n    return model ? model.transformNodes[0] : undefined;\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Control VideoPlayer Entities\r\n  public getVideoPlayers(): VideoPlayerIO[] {\r\n    return VideoPlayerSystem.getVideoPlayers();\r\n  }\r\n}\r\n","import {\r\n  Camera,\r\n  Color4,\r\n  ColorCurves,\r\n  ColorGradingTexture,\r\n  DefaultRenderingPipeline,\r\n  EngineStore,\r\n  MotionBlurPostProcess,\r\n  Scene,\r\n  Texture,\r\n} from '@babylonjs/core';\r\n\r\nimport { type Reflector } from '@/components';\r\nimport {\r\n  additionalLoadAndApplyMaterial,\r\n  defaultPostprocessSettings,\r\n  type PostprocessSettings,\r\n  Resolution,\r\n} from '@/data';\r\nimport { RenderManager } from '@/manager';\r\nimport { ReflectorSystem } from '@/system';\r\nimport { MaterialChangeSystem } from '@/system/MaterialChangeSystem';\r\n\r\nconst updateMemberValue = <T, M extends keyof T>(\r\n  data: T,\r\n  member: M,\r\n  value: T[M] | undefined\r\n): void => {\r\n  if (value !== undefined && data[member] !== undefined) {\r\n    data[member] = value;\r\n  }\r\n};\r\nexport class GraphicManager {\r\n  //-------------------------------------------------\r\n  // * Control Postprocess\r\n  private postProcess?: DefaultRenderingPipeline;\r\n  private motionBlur?: MotionBlurPostProcess;\r\n\r\n  public get currentPostprocessSettings() {\r\n    return defaultPostprocessSettings;\r\n  }\r\n\r\n  public dispose() {\r\n    this.postProcess?.dispose();\r\n    this.motionBlur?.dispose();\r\n  }\r\n  public setEnablePostprocess(enablePostprocess: boolean, settings?: PostprocessSettings) {\r\n    const scene = EngineStore.LastCreatedScene;\r\n    if (!scene) return;\r\n\r\n    if (enablePostprocess) {\r\n      if (!this.postProcess) {\r\n        this.postProcess = new DefaultRenderingPipeline('default', true, scene, scene.cameras);\r\n        this.postProcess.automaticBuild = true;\r\n        scene.enablePrePassRenderer()!.disableGammaTransform = true;\r\n        scene.postProcessesEnabled = true;\r\n      }\r\n      this.changePostprocessSettings(scene, !settings ? defaultPostprocessSettings : settings);\r\n    } else {\r\n      if (!!this.postProcess) {\r\n        this.postProcess.imageProcessing.contrast = 1;\r\n        this.postProcess.imageProcessing.exposure = 1;\r\n\r\n        this.postProcess.imageProcessing.colorGradingEnabled = false;\r\n        this.postProcess.imageProcessing.toneMappingEnabled = false;\r\n        this.postProcess.imageProcessing.colorCurvesEnabled = false;\r\n        this.postProcess.imageProcessing.vignetteEnabled = false;\r\n\r\n        this.postProcess.bloomEnabled = false;\r\n        this.postProcess.depthOfFieldEnabled = false;\r\n        this.postProcess.sharpenEnabled = false;\r\n        this.postProcess.chromaticAberrationEnabled = false;\r\n      }\r\n\r\n      if (this.motionBlur) {\r\n        this.motionBlur.dispose();\r\n        this.motionBlur = undefined;\r\n      }\r\n    }\r\n\r\n    RenderManager.RenderUpdate();\r\n  }\r\n  private changePostprocessSettings(scene: Scene, settings: PostprocessSettings) {\r\n    if (!!this.postProcess) {\r\n      const pp = this.postProcess;\r\n\r\n      // * Enable MSAA\r\n      const samples = settings.useMSAA != undefined && settings.useMSAA ? 4 : 1;\r\n      updateMemberValue(pp, 'samples', samples);\r\n\r\n      // * Enable FXAA\r\n      updateMemberValue(pp, 'fxaaEnabled', settings.useFXAA);\r\n\r\n      // * ImageProcessing\r\n      this.postProcess.imageProcessingEnabled = true;\r\n\r\n      const ppi = this.postProcess.imageProcessing;\r\n      // * Enable Tone Mapping\r\n      updateMemberValue(ppi, 'toneMappingEnabled', settings.useToneMapping);\r\n      updateMemberValue(ppi, 'toneMappingType', settings.toneMappingType);\r\n\r\n      // * Control Contrast & Exporsure\r\n      updateMemberValue(ppi, 'contrast', settings.contrast);\r\n      updateMemberValue(ppi, 'exposure', settings.expoure);\r\n\r\n      // * Control ColorCurves\r\n      updateMemberValue(ppi, 'colorCurvesEnabled', settings.useColorCurve);\r\n\r\n      if (settings.colorCurveSettings !== undefined) {\r\n        var curve = new ColorCurves();\r\n        curve.globalDensity = settings.colorCurveSettings.globalDensity;\r\n        curve.globalExposure = settings.colorCurveSettings.globalExposure;\r\n        curve.globalHue = settings.colorCurveSettings.globalHue;\r\n        curve.globalSaturation = settings.colorCurveSettings.globalSaturation;\r\n\r\n        curve.highlightsDensity = settings.colorCurveSettings.highlightsDensity;\r\n        curve.highlightsExposure = settings.colorCurveSettings.highlightsExposure;\r\n        curve.highlightsHue = settings.colorCurveSettings.highlightsHue;\r\n        curve.highlightsSaturation = settings.colorCurveSettings.highlightsSaturation;\r\n\r\n        curve.midtonesDensity = settings.colorCurveSettings.midtonesDensity;\r\n        curve.midtonesExposure = settings.colorCurveSettings.midtonesExposure;\r\n        curve.midtonesHue = settings.colorCurveSettings.midtonesHue;\r\n        curve.midtonesSaturation = settings.colorCurveSettings.midtonesSaturation;\r\n\r\n        curve.shadowsDensity = settings.colorCurveSettings.shadowsDensity;\r\n        curve.shadowsExposure = settings.colorCurveSettings.shadowsExposure;\r\n        curve.shadowsHue = settings.colorCurveSettings.shadowsHue;\r\n        curve.shadowsSaturation = settings.colorCurveSettings.shadowsSaturation;\r\n\r\n        ppi.colorCurves = curve;\r\n      }\r\n\r\n      // * Enable Vignette\r\n      updateMemberValue(ppi, 'vignetteEnabled', settings.useVignette);\r\n      updateMemberValue(ppi, 'vignetteWeight', settings.vignetteWeight);\r\n\r\n      // * Enable Bloom\r\n      updateMemberValue(pp, 'bloomEnabled', settings.useBloom);\r\n      updateMemberValue(pp, 'bloomKernel', settings.bloomKernel);\r\n      updateMemberValue(pp, 'bloomScale', settings.bloomScale);\r\n      updateMemberValue(pp, 'bloomThreshold', settings.bloomThreshold);\r\n      updateMemberValue(pp, 'bloomWeight', settings.bloomWeight);\r\n\r\n      // * Enable DOF\r\n      if (pp.depthOfField.isSupported) {\r\n        updateMemberValue(pp, 'depthOfFieldEnabled', settings.useDepthOfField);\r\n        updateMemberValue(pp, 'depthOfFieldBlurLevel', settings.blurLevel);\r\n\r\n        updateMemberValue(pp.depthOfField, 'fStop', settings.fStop);\r\n        updateMemberValue(pp.depthOfField, 'focalLength', settings.focalLength);\r\n        updateMemberValue(pp.depthOfField, 'focusDistance', settings.focusDistance);\r\n        updateMemberValue(pp.depthOfField, 'lensSize', settings.lensSize);\r\n      }\r\n\r\n      // * Enable ChromaticAberration\r\n      updateMemberValue(pp, 'chromaticAberrationEnabled', settings.useChromaticAberration);\r\n      updateMemberValue(pp.chromaticAberration, 'aberrationAmount', settings.aberrationAmount);\r\n\r\n      // * Enable Sharpen\r\n      updateMemberValue(pp, 'sharpenEnabled', settings.useSharpen);\r\n      updateMemberValue(pp.sharpen, 'edgeAmount', settings.edgeAmount);\r\n      updateMemberValue(pp.sharpen, 'colorAmount', settings.colorAmount);\r\n\r\n      // * Enable Color Graiding\r\n      updateMemberValue(ppi, 'colorGradingEnabled', settings.useColorGrading);\r\n      if (settings.useColorGrading && settings.lutTexture !== undefined) {\r\n        if (!!settings.lutIsBlob) {\r\n          var colorGradingTexture = new Texture(\r\n            settings.lutTexture,\r\n            scene,\r\n            true,\r\n            false,\r\n            undefined,\r\n            () => {\r\n              RenderManager.RenderUpdate();\r\n            }\r\n          );\r\n          colorGradingTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n          colorGradingTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n          ppi.colorGradingTexture = colorGradingTexture;\r\n        } else {\r\n          if (!ppi.colorGradingTexture || ppi.colorGradingTexture.name !== settings.lutTexture) {\r\n            const is3DL = settings.lutTexture.toLowerCase().endsWith('.3dl');\r\n            const isPNG = settings.lutTexture.toLowerCase().endsWith('.png');\r\n            // using .3dl (best) :\r\n            if (is3DL) {\r\n              ppi.colorGradingTexture = new ColorGradingTexture(settings.lutTexture, scene, () => {\r\n                RenderManager.RenderUpdate();\r\n              });\r\n            }\r\n            // using .png :\r\n            else if (isPNG) {\r\n              var colorGradingTexture = new Texture(\r\n                settings.lutTexture,\r\n                scene,\r\n                true,\r\n                false,\r\n                undefined,\r\n                () => {\r\n                  RenderManager.RenderUpdate();\r\n                }\r\n              );\r\n              colorGradingTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n              colorGradingTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n              ppi.colorGradingTexture = colorGradingTexture;\r\n            } else {\r\n              ppi.colorGradingTexture = null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (settings.useMotionBlur) {\r\n        if (!this.motionBlur) {\r\n          this.motionBlur = new MotionBlurPostProcess(\r\n            'motion blur',\r\n            scene,\r\n            1.0,\r\n            scene.activeCamera\r\n          );\r\n          // * Motion Blur 활성화 시 Skybox or ClearColor 설정이 강제화돼\r\n          // Motion Blur 활성화 중에는 원래 그레이 그레디언트 색상과 유사한 색상으로 ClearColor 설정\r\n          scene.clearColor = new Color4(25 / 255, 25 / 255, 25 / 255, 0);\r\n          this.motionBlur.clearColor = new Color4(1, 1, 1, 0);\r\n\r\n          RenderManager.RenderUpdate(false);\r\n          this.motionBlur.onAfterRenderObservable.addOnce(() => {\r\n            RenderManager.RenderStop();\r\n          });\r\n        }\r\n        updateMemberValue(this.motionBlur, 'motionStrength', settings.motionStrength);\r\n        updateMemberValue(this.motionBlur, 'samples', 1);\r\n      } else {\r\n        if (this.motionBlur) {\r\n          scene.clearColor = new Color4(0, 0, 0, 0);\r\n          this.motionBlur.dispose();\r\n          this.motionBlur = undefined;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Control Refelctor Entities\r\n  public getReflectorsInFloorplan(floorplanId: string) {\r\n    return ReflectorSystem.getReflectorsInFloorplan(floorplanId);\r\n  }\r\n  public changeReflectorSettings(reflector: Reflector, level: number, blurKernel: number) {\r\n    ReflectorSystem.changeReflectorSettings(reflector, level, blurKernel);\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  public replaceCamera = (oldCamera: Camera, newCamera: Camera) => {\r\n    this.postProcess?.removeCamera(oldCamera);\r\n    this.postProcess?.addCamera(newCamera);\r\n  };\r\n\r\n  //-------------------------------------------------\r\n  public getMaterialChangeableInFloorplan(floorplanId: string) {\r\n    return MaterialChangeSystem.getMaterialChangeableEntitiesInFloorplan(floorplanId);\r\n  }\r\n  public async setMaterialChange(params: Parameters<typeof additionalLoadAndApplyMaterial>) {\r\n    await additionalLoadAndApplyMaterial(...params);\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  public setResolution(resolution: Resolution) {\r\n    RenderManager.SetResolution(resolution);\r\n  }\r\n}\r\n","import { Observable, PointerEventTypes, PointerInfo, Scene } from '@babylonjs/core';\r\n\r\nimport {\r\n  ActiveHomeSystem,\r\n  CameraTargetSystem,\r\n  CeilingSystem,\r\n  FloorplanSystem,\r\n  GUIDisplaySystem,\r\n  HallwaySystem,\r\n  LightControllerSystem,\r\n  MagnetismGhostSystem,\r\n  MagnetismSystem,\r\n  MaterialChangeSystem,\r\n  OpenableSystem,\r\n  PointerDragSystem,\r\n  ReflectorSystem,\r\n  RoomSystem,\r\n  StructureSystem,\r\n  ThingStateSystem,\r\n  TransformSystem,\r\n  TransparentSystem,\r\n  VideoPlayerSystem,\r\n} from '@/system';\r\n\r\nexport class SystemManager {\r\n  private scene: Scene;\r\n  public onBeforeRenderObservable: Observable<Scene> = new Observable<Scene>();\r\n  public onAfterRenderObservable: Observable<Scene> = new Observable<Scene>();\r\n  public onPointerUpObservable: Observable<PointerInfo> = new Observable<PointerInfo>();\r\n\r\n  private transformSystem: TransformSystem;\r\n  private guiUpdateSystem: GUIDisplaySystem;\r\n  private transparentSystem: TransparentSystem;\r\n  private videoPlayerSystem: VideoPlayerSystem;\r\n  private reflectorSystem: ReflectorSystem;\r\n  private ceilingSystem: CeilingSystem;\r\n  private pointerDragSystem: PointerDragSystem;\r\n  private magnetismSystem: MagnetismSystem;\r\n  private magenetismGhostSystem: MagnetismGhostSystem;\r\n  private activeHomeSystem: ActiveHomeSystem;\r\n  private openableSystem: OpenableSystem;\r\n  private lightControllerSystem: LightControllerSystem;\r\n  private thingStateSystem: ThingStateSystem;\r\n  private floorplanSystem: FloorplanSystem;\r\n  private hallwaySystem: HallwaySystem;\r\n  private materialChangeSystem: MaterialChangeSystem;\r\n  private cameraTargetSystem: CameraTargetSystem;\r\n  private structureSystem: StructureSystem;\r\n  private roomSystem: RoomSystem;\r\n\r\n  constructor(scene: Scene) {\r\n    this.scene = scene;\r\n\r\n    // * create systems\r\n    this.transformSystem = new TransformSystem();\r\n    this.guiUpdateSystem = new GUIDisplaySystem();\r\n    this.transparentSystem = new TransparentSystem();\r\n    this.videoPlayerSystem = new VideoPlayerSystem();\r\n    this.reflectorSystem = new ReflectorSystem();\r\n    this.ceilingSystem = new CeilingSystem();\r\n    this.pointerDragSystem = new PointerDragSystem();\r\n    this.magnetismSystem = new MagnetismSystem();\r\n    this.magenetismGhostSystem = new MagnetismGhostSystem();\r\n    this.activeHomeSystem = new ActiveHomeSystem();\r\n    this.openableSystem = new OpenableSystem();\r\n    this.lightControllerSystem = new LightControllerSystem();\r\n    this.thingStateSystem = new ThingStateSystem();\r\n    this.floorplanSystem = new FloorplanSystem();\r\n    this.hallwaySystem = new HallwaySystem();\r\n    this.materialChangeSystem = new MaterialChangeSystem();\r\n    this.cameraTargetSystem = new CameraTargetSystem();\r\n    this.structureSystem = new StructureSystem();\r\n    this.roomSystem = new RoomSystem();\r\n\r\n    //-----------------------------------------------\r\n    // * add babylons event cycle\r\n    this.scene.onBeforeRenderObservable.add(() => {\r\n      this.onBeforeRenderObservable.notifyObservers(scene);\r\n    });\r\n    this.scene.onAfterRenderObservable.add(() => {\r\n      this.onAfterRenderObservable.notifyObservers(scene);\r\n    });\r\n    this.scene.onPointerObservable.add((pointerInfo) => {\r\n      this.onPointerUpObservable.notifyObservers(pointerInfo);\r\n    }, PointerEventTypes.POINTERUP);\r\n\r\n    //-----------------------------------------------\r\n    // * onBeforeRenderObservable\r\n    this.onBeforeRenderObservable.add((s) => {\r\n      this.transformSystem.beforeRenderExecute(s);\r\n      this.thingStateSystem.beforeRenderExecute(s);\r\n      this.reflectorSystem.beforeRenderExecute(s);\r\n      this.magnetismSystem.beforeRenderExecute(s);\r\n      this.magenetismGhostSystem.beforeRenderExecute(s);\r\n    });\r\n\r\n    // * onAfterRenderObservable\r\n    this.onAfterRenderObservable.add((s) => {\r\n      this.guiUpdateSystem.afterRenderExecute(s);\r\n      this.transparentSystem.afterRenderExecute(s);\r\n      this.ceilingSystem.afterRenderExecute(s);\r\n      this.thingStateSystem.afterRenderExecute(s);\r\n      this.transformSystem.afterRenderExecute(s);\r\n    });\r\n\r\n    // * onPointerUpObservable\r\n    this.onPointerUpObservable.add((pointerInfo) =>\r\n      this.videoPlayerSystem.onPointerUp(pointerInfo)\r\n    );\r\n  }\r\n\r\n  public reset() {\r\n    // * onBeforeRenderObservable\r\n    this.scene.onBeforeRenderObservable.clear();\r\n    this.onBeforeRenderObservable.clear();\r\n\r\n    // * onAfterRenderObservable\r\n    this.scene.onAfterRenderObservable.clear();\r\n    this.onAfterRenderObservable.clear();\r\n\r\n    // * onPointerObservable\r\n    this.scene.onPointerObservable.clear();\r\n    this.onPointerUpObservable.clear();\r\n\r\n    this.transformSystem.dispose();\r\n    this.guiUpdateSystem.dispose();\r\n    this.transparentSystem.dispose();\r\n    this.videoPlayerSystem.dispose();\r\n    this.reflectorSystem.dispose();\r\n    this.ceilingSystem.dispose();\r\n    this.pointerDragSystem.dispose();\r\n    this.magnetismSystem.dispose();\r\n    this.magenetismGhostSystem.dispose();\r\n    this.activeHomeSystem.dispose();\r\n    this.openableSystem.dispose();\r\n    this.lightControllerSystem.dispose();\r\n    this.thingStateSystem.dispose();\r\n    this.floorplanSystem.dispose();\r\n    this.hallwaySystem.dispose();\r\n    this.materialChangeSystem.dispose();\r\n    this.cameraTargetSystem.dispose();\r\n    this.structureSystem.dispose();\r\n    this.roomSystem.dispose();\r\n  }\r\n}\r\n","import { Observable } from '@babylonjs/core';\r\n\r\nimport { type GuiState } from '../../system/GUIDisplaySystem';\r\n\r\nexport class ObservableManager {\r\n  private static singletonInstance: ObservableManager | undefined;\r\n  public static get instance(): ObservableManager {\r\n    if (this.singletonInstance === undefined) {\r\n      this.singletonInstance = new ObservableManager();\r\n    }\r\n    return this.singletonInstance;\r\n  }\r\n\r\n  public onUpdateGUIPosition: Observable<GuiState[] | undefined>;\r\n  public onFirstModelLoaded: Observable<undefined>;\r\n  public onAllModelLoaded: Observable<undefined>;\r\n  public onModelLoadProgress: Observable<number>;\r\n  public onEntityStateChanged: Observable<string>;\r\n\r\n  constructor() {\r\n    ObservableManager.singletonInstance = this;\r\n\r\n    this.onUpdateGUIPosition = new Observable<GuiState[] | undefined>();\r\n    this.onFirstModelLoaded = new Observable<undefined>();\r\n    this.onAllModelLoaded = new Observable<undefined>();\r\n    this.onModelLoadProgress = new Observable<number>();\r\n    this.onEntityStateChanged = new Observable<string>();\r\n  }\r\n\r\n  reset = () => {\r\n    this.onUpdateGUIPosition.clear();\r\n    this.onFirstModelLoaded.clear();\r\n    this.onAllModelLoaded.clear();\r\n    this.onModelLoadProgress.clear();\r\n    this.onEntityStateChanged.clear();\r\n  };\r\n}\r\n","import {\r\n  ArcRotateCamera,\r\n  DefaultRenderingPipeline,\r\n  Engine,\r\n  GizmoManager,\r\n  Scene,\r\n} from '@babylonjs/core';\r\n\r\nimport { Resolution } from '@/data';\r\n\r\nexport class RenderManager {\r\n  /** 싱글턴 패턴 */\r\n  private static singletonInstance: RenderManager | undefined;\r\n  public static get instance(): RenderManager | undefined {\r\n    return this.singletonInstance;\r\n  }\r\n  public static RenderUpdate = (onceUpdate: boolean = true) => {\r\n    if (onceUpdate) {\r\n      RenderManager.instance?.runRenderLoop(true);\r\n    } else {\r\n      RenderManager.instance!.forceRender = true;\r\n    }\r\n  };\r\n  public static RenderStop = () => {\r\n    RenderManager.instance!.forceRender = false;\r\n  };\r\n  public static SetResolution = (resolution: Resolution) => {\r\n    RenderManager.instance!.setResolution(resolution);\r\n  };\r\n\r\n  private scene: Scene;\r\n  private engine: Engine;\r\n  private gizmoManager: GizmoManager;\r\n  private resizeDelay = -1;\r\n\r\n  public playingVideoCount = 0;\r\n  public forceRender: boolean = false;\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    engine: Engine,\r\n    gizmoManager: GizmoManager,\r\n    canvasOrContext?: HTMLCanvasElement\r\n  ) {\r\n    RenderManager.singletonInstance = this;\r\n\r\n    this.engine = engine;\r\n    this.scene = scene;\r\n    this.gizmoManager = gizmoManager;\r\n    if (canvasOrContext) {\r\n      new ResizeObserver((entries) => {\r\n        engine.resize();\r\n        this.resizeDelay = 5;\r\n      }).observe(canvasOrContext);\r\n    }\r\n\r\n    this.startManualRenderLoop();\r\n  }\r\n\r\n  private getCamera = (): ArcRotateCamera => {\r\n    return this.scene.activeCamera as ArcRotateCamera;\r\n  };\r\n\r\n  reset = () => {};\r\n\r\n  private highPerfomance = true;\r\n  private maxFps = 60;\r\n  private defaultLimitRenderFps = 30;\r\n  private prevforceRender = false;\r\n  private limitRenderFps = 0;\r\n  startManualRenderLoop = () => {\r\n    const scene = this.scene;\r\n    var then = Date.now();\r\n    if (!!scene) {\r\n      scene.getEngine().runRenderLoop(() => {\r\n        //--------------------\r\n        // loop Logic\r\n        // ...\r\n        //--------------------\r\n        // fps check\r\n\r\n        //--------------------\r\n        // rendering Logic\r\n        //--------------------\r\n        const isGizmo = !!this.gizmoManager.attachableNodes;\r\n        const isAnimating = scene.animatables.length > 0;\r\n        const isPlayingVideo = this.playingVideoCount > 0;\r\n        // 애니메이션 출력 중이거나 비디오 출력 중 강제 렌더링\r\n        const forceRender = isGizmo || isAnimating || isPlayingVideo || this.forceRender;\r\n        // 카메라 가속이 남아있을 경우 추가적인 강제 렌더링\r\n        const isRemainInertia = this.isRemainInertia();\r\n        // 강제 렌더링 시 해상도 최적화 적용을 끝난 후 1프레임 렌더링 함으로써 원복 시키기 위한 값\r\n        const finishedForceRender = this.prevforceRender && !forceRender;\r\n        let fps =\r\n          forceRender || isRemainInertia || finishedForceRender || this.resizeDelay-- === 0\r\n            ? this.getTargetFPS()\r\n            : this.limitRenderFps;\r\n\r\n        if (this.initResolution && this.forceRenderResolution) {\r\n          if (forceRender) {\r\n            this.applyResolution(this.forceRenderResolution);\r\n          } else {\r\n            this.applyResolution(this.initResolution);\r\n          }\r\n        }\r\n        this.prevforceRender = forceRender;\r\n\r\n        if (fps <= 0) return;\r\n\r\n        const now = Date.now();\r\n        const delta = now - then;\r\n\r\n        fps = fps || 60;\r\n        const interval = 1000 / fps;\r\n\r\n        if (delta > interval) {\r\n          then = now - (delta % interval);\r\n          scene.render();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  renderRequestCount = 0;\r\n  runRenderLoop = (justOnceUpdate: boolean = false) => {\r\n    ++this.renderRequestCount;\r\n    if (justOnceUpdate) {\r\n      this.limitRenderFps = this.getTargetFPS();\r\n      this.scene.onAfterRenderObservable.addOnce(this.stopRenderLoop);\r\n    } else {\r\n      this.limitRenderFps = this.getTargetFPS();\r\n    }\r\n  };\r\n\r\n  stopRenderLoop = () => {\r\n    --this.renderRequestCount;\r\n    if (this.renderRequestCount <= 0) {\r\n      this.renderRequestCount = 0;\r\n      this.limitRenderFps = 0;\r\n    }\r\n  };\r\n\r\n  enableHighPerfomance = (enable: boolean) => {\r\n    this.highPerfomance = enable;\r\n  };\r\n  getTargetFPS = () => {\r\n    return this.highPerfomance ? this.maxFps : this.defaultLimitRenderFps;\r\n  };\r\n\r\n  public isRemainInertia = (): boolean => {\r\n    const camera = this.getCamera();\r\n    return (\r\n      camera.inertialAlphaOffset !== 0 ||\r\n      camera.inertialBetaOffset !== 0 ||\r\n      camera.inertialPanningX !== 0 ||\r\n      camera.inertialPanningY !== 0 ||\r\n      camera.inertialRadiusOffset !== 0\r\n    );\r\n  };\r\n\r\n  private initResolution?: Resolution;\r\n  private currentResolution?: Resolution;\r\n  private forceRenderResolution?: Resolution;\r\n  private maxWidth?: number;\r\n  private maxHeight?: number;\r\n  private hardwareScalingLevel?: number;\r\n  public setResolution(resolution: Resolution) {\r\n    if (this.initResolution === resolution) return;\r\n    this.initResolution = resolution;\r\n\r\n    const keys = Object.keys(Resolution).flatMap((key) => {\r\n      if (!isNaN(Number(key)) || key == 'None') return [];\r\n      else return key;\r\n    });\r\n\r\n    const index = keys.findIndex(\r\n      (key) => key == Resolution[resolution.toString() as keyof typeof Resolution].toString()\r\n    );\r\n    if (index === -1) {\r\n      this.forceRenderResolution = undefined;\r\n    } else {\r\n      this.forceRenderResolution =\r\n        Resolution[keys[Math.min(index + 1, keys.length - 1)] as keyof typeof Resolution];\r\n    }\r\n    this.applyResolution(resolution);\r\n\r\n    RenderManager.RenderUpdate();\r\n  }\r\n\r\n  private applyResolution(resolution: Resolution) {\r\n    if (!this.hardwareScalingLevel) {\r\n      this.hardwareScalingLevel = this.engine.getHardwareScalingLevel();\r\n    }\r\n    if (!this.maxWidth) {\r\n      this.maxWidth = this.engine.getRenderWidth();\r\n    }\r\n    if (!this.maxHeight) {\r\n      this.maxHeight = this.engine.getRenderHeight();\r\n    }\r\n\r\n    if (this.currentResolution === resolution) return;\r\n    this.currentResolution = resolution;\r\n\r\n    if (resolution == Resolution.MAX) {\r\n      this.engine.setHardwareScalingLevel(this.hardwareScalingLevel);\r\n    } else if (resolution == Resolution.NONE) {\r\n      this.engine.setHardwareScalingLevel(1);\r\n    } else {\r\n      const scale = (this.maxWidth > this.maxHeight ? this.maxHeight : this.maxWidth) / resolution;\r\n\r\n      this.engine.setHardwareScalingLevel(\r\n        Math.max(scale * this.hardwareScalingLevel, this.hardwareScalingLevel)\r\n      );\r\n    }\r\n    // console.log(`Resolution : ${this.engine.getRenderWidth()}x${this.engine.getRenderHeight()}`);\r\n  }\r\n}\r\n","import {\r\n  Color3,\r\n  MaterialDefines,\r\n  MaterialPluginBase,\r\n  PBRBaseMaterial,\r\n  PBRMaterial,\r\n  Scene,\r\n  StandardMaterial,\r\n  UniformBuffer,\r\n} from '@babylonjs/core';\r\n\r\nexport class RoomLightDefines extends MaterialDefines {\r\n  ROOMLIGHT = false;\r\n}\r\n\r\nexport class RoomLightConfiguration {\r\n  roomColor: Color3 = Color3.White();\r\n}\r\n\r\nexport class RoomLightMaterial extends MaterialPluginBase {\r\n  //---------------------------------------\r\n  private colorName: string;\r\n  constructor(material: PBRMaterial | StandardMaterial, addToPluginList?: boolean) {\r\n    super(material, 'RoomLight', 200, new RoomLightDefines(), addToPluginList);\r\n    this.colorName = material instanceof PBRBaseMaterial ? 'finalColor' : 'color';\r\n  }\r\n\r\n  //---------------------------------------\r\n  private _config: RoomLightConfiguration | undefined;\r\n  get config() {\r\n    return this._config;\r\n  }\r\n  set config(value) {\r\n    if (this._config === value) {\r\n      return;\r\n    }\r\n    this._config = value;\r\n  }\r\n\r\n  //---------------------------------------\r\n  private _isEnabled = false;\r\n  get isEnabled() {\r\n    return this._isEnabled;\r\n  }\r\n  set isEnabled(enabled) {\r\n    if (this._isEnabled === enabled) {\r\n      return;\r\n    }\r\n    this._isEnabled = enabled;\r\n    this.markAllDefinesAsDirty();\r\n    this._enable(this._isEnabled);\r\n  }\r\n\r\n  //---------------------------------------\r\n  getClassName() {\r\n    return 'RoomLightConfiguration';\r\n  }\r\n\r\n  //---------------------------------------\r\n  prepareDefines(defines: RoomLightDefines, scene: Scene) {\r\n    defines['ROOMLIGHT'] = this._isEnabled;\r\n  }\r\n\r\n  //---------------------------------------\r\n  getUniforms() {\r\n    return {\r\n      ubo: [{ name: 'roomColor', size: 3, type: 'vec3' }],\r\n      fragment: `#ifdef ROOMLIGHT\r\n                uniform vec3 roomColor;\r\n            #endif`,\r\n    };\r\n  }\r\n\r\n  bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene) {\r\n    if (this._isEnabled) {\r\n      uniformBuffer.updateColor3('roomColor', this.config!.roomColor);\r\n    }\r\n  }\r\n\r\n  //---------------------------------------\r\n  getCustomCode(shaderType: string) {\r\n    return shaderType === 'vertex' ? this.getVertexCode() : this.getFragmentCode();\r\n  }\r\n\r\n  getVertexCode() {\r\n    return null;\r\n  }\r\n\r\n  getFragmentCode() {\r\n    return {\r\n      CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR: `\r\n      #ifdef ROOMLIGHT\r\n          ${this.colorName}.rgb *= roomColor;\r\n      #endif\r\n    `,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Color3,\r\n  EasingFunction,\r\n  type Material,\r\n  type Nullable,\r\n  RegisterMaterialPlugin,\r\n  UnregisterMaterialPlugin,\r\n} from '@babylonjs/core';\r\n\r\nimport { RoomLightConfiguration, RoomLightMaterial } from '@/material/RoomLightMaterial';\r\nimport { playAnimation } from '@/util/AnimationHelper';\r\nimport {\r\n  createEasingFunction,\r\n  EasingFunctionType,\r\n  EasingModeType,\r\n} from '@/util/EasingFunctionType';\r\n\r\nexport class MaterialPluginManager {\r\n  private static singletonInstance: MaterialPluginManager | undefined;\r\n  public static get instance(): MaterialPluginManager {\r\n    if (this.singletonInstance === undefined) {\r\n      this.singletonInstance = new MaterialPluginManager();\r\n    }\r\n    return this.singletonInstance;\r\n  }\r\n\r\n  constructor() {\r\n    MaterialPluginManager.singletonInstance = this;\r\n\r\n    //-------------------------------------------------\r\n    // * RoomLight Material 등록\r\n    RegisterMaterialPlugin('RoomLightReceiver', (material) => {\r\n      // @ts-ignore\r\n      material.roomLight = new RoomLightMaterial(material);\r\n      // @ts-ignore\r\n      return material.roomLight;\r\n    });\r\n  }\r\n\r\n  public reset() {\r\n    UnregisterMaterialPlugin('RoomLightReceiver');\r\n\r\n    this.roomLightConfiguration = {};\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * RoomLightMaterial\r\n  public roomLightConfiguration: { [key: string]: RoomLightConfiguration } = {};\r\n  private roomLightAnimationDuration: number = 0.6;\r\n  private roomLightAnimationEasingFunction: EasingFunction = createEasingFunction(\r\n    EasingFunctionType.QuarticEase,\r\n    EasingModeType.Out\r\n  );\r\n  public registRoomLightMaterial(roomId: string, material: Nullable<Material>) {\r\n    if (material && material.pluginManager) {\r\n      const plugin = material.pluginManager.getPlugin('RoomLight');\r\n      if (plugin) {\r\n        if (!this.roomLightConfiguration[roomId]) {\r\n          this.roomLightConfiguration[roomId] = new RoomLightConfiguration();\r\n        }\r\n\r\n        // @ts-ignore\r\n        plugin.config = this.roomLightConfiguration[roomId];\r\n        // @ts-ignore\r\n        plugin.isEnabled = true;\r\n      }\r\n    }\r\n  }\r\n  public setRoomLightAnimationOption(\r\n    duration: number,\r\n    type?: EasingFunctionType,\r\n    mode?: EasingModeType\r\n  ) {\r\n    this.roomLightAnimationDuration = duration;\r\n    if (!type || !mode) return;\r\n\r\n    this.roomLightAnimationEasingFunction = createEasingFunction(type, mode);\r\n  }\r\n  public setRoomLightColor(roomId: string, isOn: boolean, intensity?: number) {\r\n    if (!this.roomLightConfiguration[roomId]) return;\r\n    intensity = intensity ?? 1;\r\n    const value = 1 - 0.85 * (1 - intensity);\r\n    const color = isOn ? new Color3(value, value, value) : new Color3(0.15, 0.15, 0.15);\r\n\r\n    playAnimation(\r\n      {\r\n        target: this.roomLightConfiguration[roomId],\r\n        property: {\r\n          targetProperty: 'roomColor',\r\n          keyFrame: {\r\n            duration: this.roomLightAnimationDuration,\r\n            from: this.roomLightConfiguration[roomId].roomColor,\r\n            to: color,\r\n          },\r\n        },\r\n        easingFunction: this.roomLightAnimationEasingFunction,\r\n      },\r\n      undefined,\r\n      true\r\n    );\r\n  }\r\n\r\n  //-------------------------------------------------\r\n}\r\n","import {\r\n  type AbstractMesh,\r\n  Color3,\r\n  type PBRMaterial,\r\n  VideoTexture,\r\n  type VideoTextureSettings,\r\n} from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\n\r\n/**\r\n * 영상을 출력하는 기능을 하기 위한 Component\r\n */\r\nexport interface VideoPlayer {\r\n  initialized: boolean;\r\n  src: string;\r\n  mesh: AbstractMesh;\r\n  material: PBRMaterial;\r\n  defaultPlay: boolean;\r\n  videoTexture?: VideoTexture;\r\n}\r\n\r\nconst initializeVideoPlayer = (videoPlayer: VideoPlayer) => {\r\n  if (!videoPlayer.videoTexture && videoPlayer.src !== '') {\r\n    if (videoPlayer.defaultPlay) {\r\n      RenderManager.instance!.playingVideoCount++;\r\n    }\r\n\r\n    const settings: VideoTextureSettings = {\r\n      autoPlay: videoPlayer.defaultPlay,\r\n      muted: false,\r\n      autoUpdateTexture: true,\r\n    };\r\n    const videoTexture = new VideoTexture(\r\n      videoPlayer.mesh.name,\r\n      videoPlayer.src,\r\n      null,\r\n      false,\r\n      true,\r\n      0,\r\n      settings\r\n    );\r\n    videoTexture.video.volume = 0.3;\r\n\r\n    // FIXME: TEMP aspect\r\n    videoTexture.uScale = 1;\r\n    videoTexture.vScale = 16 / 9;\r\n    videoTexture.vOffset = -0.4;\r\n\r\n    videoPlayer.videoTexture = videoTexture;\r\n  }\r\n};\r\nexport const play = (target: VideoPlayer) => {\r\n  const play = () => {\r\n    if (!!target && !!target.videoTexture) {\r\n      if (target.material.albedoTexture !== target.videoTexture) {\r\n        target.material.unfreeze();\r\n        target.material.albedoTexture = target.videoTexture;\r\n        target.material.albedoColor = Color3.White();\r\n        target.material.metallic = 0.5;\r\n        target.material.indexOfRefraction = 1;\r\n        target.material.forceCompilation(target.mesh);\r\n      }\r\n\r\n      target.videoTexture.video.play();\r\n      RenderManager.instance!.playingVideoCount++;\r\n    }\r\n  };\r\n  if (!target.initialized) {\r\n    target.initialized = true;\r\n    initializeVideoPlayer(target);\r\n\r\n    target.videoTexture?.onLoadObservable.add(() => play());\r\n  } else {\r\n    play();\r\n  }\r\n};\r\nexport const pause = (target: VideoPlayer) => {\r\n  if (!!target) {\r\n    target.videoTexture?.video.pause();\r\n\r\n    RenderManager.instance!.playingVideoCount--;\r\n    if (RenderManager.instance!.playingVideoCount < 0) {\r\n      RenderManager.instance!.playingVideoCount = 0;\r\n    }\r\n  }\r\n};\r\nexport const setVolume = (target: VideoPlayer, volume: number) => {\r\n  if (!!target && !!target.videoTexture) {\r\n    target.videoTexture.video.volume = Math.max(Math.min(1, volume), 0);\r\n  }\r\n};\r\nexport interface VideoPlayerIO {\r\n  /**\r\n   * 해당 VideoPlayer의 video를 play합니다.\r\n   */\r\n  play: () => void;\r\n  /**\r\n   * 해당 VideoPlayer의 video를 pause합니다.\r\n   */\r\n  pause: () => void;\r\n  /**\r\n   * 해당 VideoPlayer의 video의 Volume 설정합니다.\r\n   */\r\n  setVolume: (volume: number) => void;\r\n}\r\n","import type { AbstractMesh } from '@babylonjs/core';\r\n\r\nexport enum StructureType {\r\n  Floor = 0,\r\n  Wall,\r\n  Molding,\r\n  Ceiling,\r\n  OutterWall,\r\n  Hallway,\r\n  Builtin,\r\n}\r\nexport interface Structure {\r\n  structureType: StructureType;\r\n  meshes: AbstractMesh[];\r\n}\r\n","export interface ThingState {\r\n  type: ThingType;\r\n  state: StateByThingType;\r\n}\r\nexport interface ThingStateDirty {}\r\n\r\nexport type StateByThingType =\r\n  | LightState\r\n  | AirConditionerState\r\n  | BoilerState\r\n  | DoorState\r\n  | WindowState;\r\n\r\nexport enum ThingType {\r\n  Light,\r\n  AirConditioner,\r\n  Boiler,\r\n  Door,\r\n  Window,\r\n}\r\nexport interface LightState {\r\n  isOn: boolean;\r\n  /** min:0, max:1 */\r\n  intensity?: number;\r\n}\r\nexport interface AirConditionerState {\r\n  isOn: boolean;\r\n  targetTemp?: number;\r\n  curTemp?: number;\r\n}\r\nexport interface BoilerState {\r\n  isOn: boolean;\r\n  targetTemp?: number;\r\n  curTemp?: number;\r\n}\r\nexport interface DoorState {\r\n  isOpen: boolean;\r\n}\r\nexport interface WindowState {\r\n  isOpen: boolean;\r\n}\r\nexport const getDefaultThingState = (thingType: ThingType) => {\r\n  switch (thingType) {\r\n    case ThingType.Light:\r\n      return { isOn: true, intensity: 1 } as LightState;\r\n    case ThingType.AirConditioner:\r\n      return { isOn: false } as AirConditionerState;\r\n    case ThingType.Boiler:\r\n      return { isOn: false } as BoilerState;\r\n    case ThingType.Door:\r\n      return { isOpen: false } as DoorState;\r\n    case ThingType.Window:\r\n      return { isOpen: false } as WindowState;\r\n  }\r\n};\r\n","import {\r\n  AbstractMesh,\r\n  ArcRotateCamera,\r\n  FreeCamera,\r\n  Matrix,\r\n  Scene,\r\n  TargetCamera,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nimport { StructureType } from '@/components';\r\nimport { StructureSystem } from '@/system';\r\nimport { World } from '@/World';\r\n\r\nexport const isPanningPossible = (\r\n  offsetX: number,\r\n  offsetY: number,\r\n  scene: Scene,\r\n  camera: ArcRotateCamera\r\n): number[] => {\r\n  const ret = [offsetX, offsetY];\r\n\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n  if (!canvas) return ret;\r\n\r\n  const ext2d = getProjectedExtendsByCamera(scene, camera, canvas);\r\n\r\n  const w = canvas.width;\r\n  const h = canvas.height;\r\n  const modelW = ext2d.max.x - ext2d.min.x;\r\n  const modelH = ext2d.max.y - ext2d.min.y;\r\n  const margin = 0.01;\r\n  const marginW = margin * modelW;\r\n  const marginH = margin * modelH;\r\n  const modelLeft = ext2d.min.x;\r\n  const modelRight = ext2d.max.x;\r\n  const modelTop = ext2d.min.y;\r\n  const modelBot = ext2d.max.y;\r\n\r\n  // 좌로 이동 제한 : 좌측 끝이 왼쪽으로 넘어가지 않도록 (단 우측 끝이 넘어간 경우는 항상 허용)\r\n  if (offsetX < 0) {\r\n    if (modelRight + offsetX <= w && modelLeft + offsetX < -marginW) ret[0] = 0;\r\n  }\r\n  // 우측으로 이동 제한\r\n  if (offsetX > 0) {\r\n    if (modelLeft + offsetX >= 0 && modelRight + offsetX > w + marginW) ret[0] = 0;\r\n  }\r\n  // 위로 이동 제한\r\n  if (offsetY < 0) {\r\n    if (modelBot + offsetY <= h && modelTop + offsetY < -marginH) ret[1] = 0;\r\n  }\r\n  // 아래로 이동 제한\r\n  if (offsetY > 0) {\r\n    if (modelTop + offsetY >= 0 && modelBot + offsetY > h + marginH) ret[1] = 0;\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nconst getProjectedExtendsByCamera = (\r\n  scene: Scene,\r\n  camera: ArcRotateCamera,\r\n  canvas: HTMLCanvasElement\r\n) => {\r\n  const pts: Vector3[] = [];\r\n  const ext = scene.getWorldExtends();\r\n  for (let x of [ext.min.x, ext.max.x]) {\r\n    for (let y of [ext.min.y, ext.max.y]) {\r\n      for (let z of [ext.min.z, ext.max.z]) {\r\n        let p = project(x, y, z, canvas.width, canvas.height);\r\n        pts.push(p);\r\n      }\r\n    }\r\n  }\r\n\r\n  function project(x: number, y: number, z: number, w: number, h: number): Vector3 {\r\n    return Vector3.Project(\r\n      new Vector3(x, y, z),\r\n      Matrix.Identity(),\r\n      scene.getTransformMatrix(),\r\n      camera.viewport.toGlobal(w, h)\r\n    );\r\n  }\r\n\r\n  const ext2d = { min: pts[0].clone(), max: pts[0].clone() };\r\n  for (let p of pts) {\r\n    if (p.x < ext2d.min.x) ext2d.min.x = p.x;\r\n    if (p.y < ext2d.min.y) ext2d.min.y = p.y;\r\n    if (p.x > ext2d.max.x) ext2d.max.x = p.x;\r\n    if (p.y > ext2d.max.y) ext2d.max.y = p.y;\r\n  }\r\n\r\n  return ext2d;\r\n};\r\n\r\nexport const getFitRadius = (\r\n  scene: Scene,\r\n  cameraTargetExtends: { min: Vector3; max: Vector3 },\r\n  camera: TargetCamera\r\n): number | undefined => {\r\n  const fitMargin = 1.1;\r\n\r\n  // calc radius with box top -> add box height(ext.max.y) + margin(10%)\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n  if (!canvas) return undefined;\r\n\r\n  const ext = cameraTargetExtends;\r\n  const halfW = (ext.max.x - ext.min.x) * 0.5;\r\n  const halfH = (ext.max.z - ext.min.z) * 0.5;\r\n  const fovH = camera.fov;\r\n  const fovW = camera.fov * (canvas.width / canvas.height);\r\n  const radiusByW = halfW * (1 / Math.tan(fovW * 0.5));\r\n  const radiusByH = halfH * (1 / Math.tan(fovH * 0.5));\r\n\r\n  const fitRadius = Math.max(radiusByW, radiusByH) + (ext.max.y - ext.min.y);\r\n  return fitRadius * fitMargin;\r\n};\r\n\r\nexport const toAngle = 180 / Math.PI;\r\n\r\nexport const toRadian = Math.PI / 180;\r\n\r\nexport const getWallMeshesAll = () => {\r\n  return StructureSystem.getStructureMeshesByType(StructureType.Wall);\r\n};\r\n\r\nexport const getDirectionToCenter = (pos: Vector3, meshes: AbstractMesh[]) => {\r\n  for (const mesh of meshes) {\r\n    const bounding = mesh.getBoundingInfo();\r\n    const newPos = new Vector3(pos.x, 1, pos.z);\r\n    const isIn = bounding.intersectsPoint(newPos);\r\n    if (isIn) {\r\n      const box = bounding.boundingBox;\r\n      const cen = box.minimumWorld.add(box.maximumWorld).scale(0.5);\r\n      cen.y = 1;\r\n      return newPos.subtract(cen).normalize().scale(-1);\r\n    }\r\n  }\r\n  return new Vector3(1, 0, 0);\r\n};\r\n\r\nexport const timeout = (ms: number) => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nlet freeCamera : FreeCamera | undefined = undefined;\r\nlet arcCamera : ArcRotateCamera | undefined = undefined;\r\n\r\nexport const arcToFree = (\r\n  scene: Scene,\r\n  target: Vector3,\r\n  alpha: number,\r\n  beta: number,\r\n  radius: number\r\n) => {\r\n  if (!freeCamera) freeCamera = new FreeCamera('covFree', Vector3.Zero(), scene);\r\n  if (!arcCamera) arcCamera = new ArcRotateCamera('convArc', 0, 0, 1, Vector3.Zero(), scene);\r\n\r\n  arcCamera.target = target;\r\n  arcCamera.alpha = alpha === 0 ? 0.1 * toRadian : alpha;\r\n  arcCamera.beta = beta;\r\n  arcCamera.radius = radius;\r\n  arcCamera.getWorldMatrix();\r\n\r\n  freeCamera.position = arcCamera.position;\r\n  freeCamera.upVector = arcCamera.upVector;\r\n  freeCamera.setTarget(target);\r\n  freeCamera.getWorldMatrix();\r\n\r\n  return { pos: freeCamera.position, rot: freeCamera.rotation };\r\n};\r\n\r\nexport const freeToArc = (scene: Scene, position: Vector3, rotation: Vector3, dist: number) => {\r\n  if (!freeCamera) freeCamera = new FreeCamera('covFree', Vector3.Zero(), scene);\r\n  if (!arcCamera) arcCamera = new ArcRotateCamera('convArc', 0, 0, 1, Vector3.Zero(), scene);\r\n\r\n  freeCamera.position = position;\r\n  freeCamera.rotation = rotation;\r\n  freeCamera.getWorldMatrix();\r\n  const dir = freeCamera.target.subtract(freeCamera.position).normalize();\r\n  const newTarget = freeCamera.position.add(dir.scale(dist));\r\n\r\n  arcCamera.target = newTarget;\r\n  arcCamera.setPosition(position);\r\n  arcCamera.getWorldMatrix();\r\n  return {\r\n    target: arcCamera.target,\r\n    alpha: arcCamera.alpha,\r\n    beta: arcCamera.beta,\r\n    radius: arcCamera.radius,\r\n  };\r\n};\r\n","import { Vector3 } from '@babylonjs/core';\r\n\r\nimport { toAngle, toRadian } from '../util/camera/CameraUtils';\r\nimport { EasingFunctionType, EasingModeType } from '../util/EasingFunctionType';\r\n\r\nexport enum CameraControlType {\r\n  PanZoom = 0, // pan only (zoom)\r\n  PanRotate = 1, // pan only (no zoom and rotate)\r\n  RotateZoom = 2, // rotate (zoom)\r\n  RotatePan = 3, // rotate (no zoom)\r\n  AllAll = 4,\r\n  AllEach = 5,\r\n}\r\n\r\nexport interface AlignOption {\r\n  column: 'left' | 'center' | 'right';\r\n  row: 'top' | 'center' | 'bottom';\r\n}\r\n\r\nexport class AnimationOption {\r\n  public seconds: number;\r\n  public easingFunction: EasingFunctionType;\r\n  public easingMode: EasingModeType;\r\n\r\n  constructor(param?: {\r\n    seconds?: number;\r\n    easingFunction?: EasingFunctionType;\r\n    easingMode?: EasingModeType;\r\n  }) {\r\n    if (param === undefined) {\r\n      param = {};\r\n    }\r\n    if (param.seconds === undefined) {\r\n      param.seconds = 0.6;\r\n    }\r\n    if (param.easingFunction === undefined) {\r\n      param.easingFunction = EasingFunctionType.CircleEase;\r\n    }\r\n    if (param.easingMode === undefined) {\r\n      param.easingMode = EasingModeType.Out;\r\n    }\r\n    this.seconds = param.seconds;\r\n    this.easingFunction = param.easingFunction;\r\n    this.easingMode = param.easingMode;\r\n  }\r\n}\r\n\r\nexport class CameraPosition {\r\n  public x: number;\r\n  public y: number;\r\n  public h: number;\r\n  public isRelative: boolean;\r\n\r\n  constructor(x = 0, y = 0, h = 0, isRelative = false) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.h = h;\r\n    this.isRelative = isRelative;\r\n  }\r\n}\r\nexport class CameraAngle {\r\n  public angleHor: number;\r\n  public angleVer: number;\r\n  private lowerVerticalAngleLimit = -88;\r\n\r\n  constructor(param?: { angleHor?: number; angleVer?: number }) {\r\n    if (param === undefined) {\r\n      param = {};\r\n    }\r\n    if (param.angleHor === undefined) {\r\n      param.angleHor = 0;\r\n    }\r\n    if (param.angleVer === undefined) {\r\n      param.angleVer = 0;\r\n    }\r\n    this.angleHor = param.angleHor;\r\n    this.angleVer = param.angleVer;\r\n    if (this.angleVer < this.lowerVerticalAngleLimit) {\r\n      this.angleVer = this.lowerVerticalAngleLimit;\r\n    }\r\n  }\r\n\r\n  public static convertToVectorFromAlphaBetaRadian(alpha: number, beta: number): Vector3 {\r\n    const v = Math.sin(beta - 90 * toRadian);\r\n    const h = Math.cos(beta - 90 * toRadian);\r\n    const x = h * Math.cos(alpha);\r\n    const y = h * Math.sin(alpha);\r\n    return new Vector3(-x, v, -y).normalize();\r\n  }\r\n\r\n  public getRotatedVectorFrom(startVec?: Vector3): Vector3 {\r\n    const [alpha, beta] = this.getRotatedAlphaBetaAsRadianFrom(startVec);\r\n    return CameraAngle.convertToVectorFromAlphaBetaRadian(alpha, beta);\r\n  }\r\n\r\n  public getRotatedAlphaBetaAsRadianFrom(startVec?: Vector3): [number, number] {\r\n    // calculate horizontal\r\n    let alpha = 0;\r\n    if (startVec) {\r\n      let norm = startVec.clone();\r\n      norm.y = 0;\r\n      norm = norm.normalize();\r\n      alpha = Math.atan2(-norm.z, -norm.x) * toAngle;\r\n    } else {\r\n      alpha = 90;\r\n    }\r\n    alpha += this.angleHor;\r\n    alpha = (alpha + 360) % 360;\r\n\r\n    // calculate vertical\r\n    let beta = 0;\r\n    if (startVec) {\r\n      let norm = startVec.clone().normalize();\r\n      let downAngle = Math.asin(norm.y) * toAngle; // -90 ~ 90\r\n      beta = downAngle + 90; // 0 ~ 180\r\n    } else {\r\n      beta = 90;\r\n    }\r\n    beta -= this.angleVer;\r\n    if (beta < 0) beta = 0;\r\n    if (beta > 180) beta = 180;\r\n\r\n    return [alpha * toRadian, beta * toRadian];\r\n  }\r\n\r\n  public static readonly DOWN = new CameraAngle({ angleHor: 0, angleVer: -90 });\r\n  public static readonly NORTH = new CameraAngle({ angleHor: 0, angleVer: 0 });\r\n  public static readonly SOUTH = new CameraAngle({ angleHor: 180, angleVer: 0 });\r\n  public static readonly WEST = new CameraAngle({ angleHor: -90, angleVer: 0 });\r\n  public static readonly EAST = new CameraAngle({ angleHor: 90, angleVer: 0 });\r\n}\r\n\r\nexport class CameraTarget {\r\n  public name: string;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class CameraViewport {\r\n  public x: number;\r\n  public y: number;\r\n  public width: number;\r\n  public height: number;\r\n\r\n  constructor(x = 0, y = 0, width = 0, height = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n","import {\r\n  type Engine,\r\n  EngineInstrumentation,\r\n  type Scene,\r\n  SceneInstrumentation,\r\n} from '@babylonjs/core';\r\n\r\nexport type PerformanceInfo = {\r\n  fps: number;\r\n  meshSelection: number;\r\n  renderTarget: number;\r\n  render: number;\r\n  frameTotal: number;\r\n  interFrame: number;\r\n  activeMeshes: number;\r\n  drawCalls: number;\r\n  vertices: number;\r\n  resolution: string;\r\n  loadHomeTotal: number;\r\n  customInfo?: Map<string, Map<string, any>>;\r\n};\r\n\r\nexport class PerformanceProfiler {\r\n  private engine: Engine;\r\n\r\n  private sceneInstrumentation: SceneInstrumentation | undefined = undefined;\r\n\r\n  private engineInstrumentation: EngineInstrumentation | undefined = undefined;\r\n\r\n  private intervalId: NodeJS.Timer | undefined = undefined;\r\n\r\n  private customDataMap = new Map<string, Map<string, any>>();\r\n\r\n  private constructor(private scene: Scene) {\r\n    this.engine = scene.getEngine();\r\n    this.scene = scene;\r\n  }\r\n\r\n  // 싱글턴 처리\r\n  private static instance?: PerformanceProfiler = undefined;\r\n\r\n  public static getInstance = (scene: Scene) => {\r\n    if (this.instance === undefined) {\r\n      this.instance = new PerformanceProfiler(scene);\r\n    }\r\n    return this.instance;\r\n  };\r\n  // END\r\n\r\n  public loadHomeTotal = 0;\r\n\r\n  public itemChanged = false;\r\n\r\n  public addCustom(group: string, item: string, value: any) {\r\n    if (!this.customDataMap.has(group)) {\r\n      this.customDataMap.set(group, new Map<string, any>());\r\n    }\r\n    this.customDataMap.get(group)!.set(item, value);\r\n  }\r\n\r\n  public registerCallback(\r\n    callback: (param: PerformanceInfo, itemChanged?: boolean) => void,\r\n    intervalMs: number\r\n  ) {\r\n    // 기존에 존재할 경우 unregister\r\n    if (this.intervalId !== undefined) {\r\n      this.unregisterCallback();\r\n    }\r\n\r\n    // 측정에 필요한 클래스들 생성\r\n    if (this.sceneInstrumentation === undefined) {\r\n      this.createInstrumentations();\r\n    }\r\n\r\n    this.intervalId = setInterval(() => {\r\n      // interval 마다 아래 부분 호출\r\n      const performanceInfo = {\r\n        fps: this.scene.getEngine().getFps(),\r\n        meshSelection: this.sceneInstrumentation!.activeMeshesEvaluationTimeCounter.lastSecAverage,\r\n        renderTarget: this.sceneInstrumentation!.renderTargetsRenderTimeCounter.lastSecAverage,\r\n        render: this.sceneInstrumentation!.renderTimeCounter.lastSecAverage,\r\n        frameTotal: this.sceneInstrumentation!.frameTimeCounter.lastSecAverage,\r\n        interFrame: this.sceneInstrumentation!.interFrameTimeCounter.lastSecAverage,\r\n        activeMeshes: this.scene.getActiveMeshes().length,\r\n        drawCalls: this.sceneInstrumentation?.drawCallsCounter.current!,\r\n        vertices: this.scene.getTotalVertices(),\r\n        resolution: this.engine.getRenderWidth() + ' x ' + this.engine.getRenderHeight(),\r\n        loadHomeTotal: this.loadHomeTotal,\r\n        customInfo: this.customDataMap,\r\n      };\r\n      callback(performanceInfo, this.itemChanged);\r\n      if (this.itemChanged) {\r\n        this.itemChanged = false;\r\n      }\r\n      // END\r\n    }, intervalMs);\r\n  }\r\n\r\n  public unregisterCallback() {\r\n    if (this.intervalId !== undefined) {\r\n      clearInterval(this.intervalId);\r\n      this.intervalId = undefined;\r\n\r\n      this.sceneInstrumentation?.dispose();\r\n      this.sceneInstrumentation = undefined;\r\n\r\n      this.engineInstrumentation?.dispose();\r\n      this.engineInstrumentation = undefined;\r\n    }\r\n  }\r\n\r\n  public showInspector() {\r\n    this.scene.debugLayer.show({ showExplorer: false, initialTab: 2 });\r\n  }\r\n\r\n  public hideInspector() {\r\n    this.scene.debugLayer.hide();\r\n  }\r\n\r\n  private createInstrumentations = () => {\r\n    this.sceneInstrumentation = new SceneInstrumentation(this.scene);\r\n    this.sceneInstrumentation.captureActiveMeshesEvaluationTime = true;\r\n    this.sceneInstrumentation.captureRenderTargetsRenderTime = true;\r\n    this.sceneInstrumentation.captureFrameTime = true;\r\n    this.sceneInstrumentation.captureRenderTime = true;\r\n    this.sceneInstrumentation.captureInterFrameTime = true;\r\n    this.sceneInstrumentation.captureParticlesRenderTime = true;\r\n    this.sceneInstrumentation.captureSpritesRenderTime = true;\r\n    this.sceneInstrumentation.capturePhysicsTime = true;\r\n    this.sceneInstrumentation.captureAnimationsTime = true;\r\n\r\n    this.engineInstrumentation = new EngineInstrumentation(this.scene.getEngine());\r\n    this.engineInstrumentation.captureGPUFrameTime = true;\r\n  };\r\n}\r\n","interface ProfileData {\r\n  index: number;\r\n  callTSFileName: string;\r\n  callFunctionName: string;\r\n  start: number;\r\n  total?: number;\r\n}\r\nexport class Profile {\r\n  private static index: number = 0;\r\n  public static list: Map<string, ProfileData> = new Map();\r\n  public static start(key: string) {\r\n    const startTime = Date.now();\r\n    if (!this.list.has(key)) {\r\n      const stackTrace = new Error().stack;\r\n      if (stackTrace) {\r\n        // 1번째 줄은 Error Text\r\n        // 2번째 줄은 현재 Start 함수\r\n        const lastCallstack = stackTrace.split('\\n')[2];\r\n        const regex = /at\\s(.+?)\\s.*?\\/(.+?)\\.ts/g;\r\n        const matches = regex.exec(lastCallstack);\r\n\r\n        if (matches) {\r\n          const temp = matches[2].toString().split('/');\r\n          const fileName = temp[temp.length - 1];\r\n\r\n          const temp2 = matches[1].toString().split('.');\r\n          const functionName = temp2[temp2.length - 1];\r\n\r\n          this.list.set(key, {\r\n            index: this.index++,\r\n            callTSFileName: fileName,\r\n            callFunctionName: functionName,\r\n            start: startTime,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public static end(key: string) {\r\n    if (this.list.has(key)) {\r\n      let data = this.list.get(key)!;\r\n      const end = Date.now();\r\n      if (!data.total) data.total = 0;\r\n      data.total += end - data.start;\r\n    }\r\n  }\r\n  public static get(key: string) {\r\n    const profileData = this.list.get(key);\r\n    return profileData !== undefined ? profileData.total : undefined;\r\n  }\r\n  public static toString() {\r\n    let texts: string[] = [];\r\n    this.list.forEach((value, key) => {\r\n      if (value.total) {\r\n        texts.push(\r\n          `${value.callTSFileName}.ts => ${value.callFunctionName}(..) => ${key} : ${value.total}ms`\r\n        );\r\n      }\r\n    });\r\n    return texts;\r\n  }\r\n  public static print() {\r\n    const texts = this.toString();\r\n\r\n    console.log(texts.join('\\n'));\r\n  }\r\n  public static reset() {\r\n    this.index = 0;\r\n    this.list.clear();\r\n  }\r\n}\r\n","import {\r\n  AbstractMesh,\r\n  Angle,\r\n  BaseTexture,\r\n  Color3,\r\n  CubeTexture,\r\n  DirectionalLight,\r\n  EngineStore,\r\n  type ISceneLoaderAsyncResult,\r\n  Material,\r\n  type Nullable,\r\n  PBRMaterial,\r\n  Scene,\r\n  SceneLoader,\r\n  StandardMaterial,\r\n  TransformNode,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport {\r\n  GLTFLoader,\r\n  type IGLTFLoaderExtension,\r\n  type IImage,\r\n  type IMaterial,\r\n  type INode,\r\n  type IScene,\r\n} from '@babylonjs/loaders/glTF/2.0';\r\nimport '@babylonjs/loaders/glTF';\r\n\r\nimport { type Entity, getDefaultThingState, StructureType, ThingType } from '@/components';\r\nimport {\r\n  cacheJsonData,\r\n  type FloorPlanData,\r\n  getJsonDataFromCache,\r\n  type HomeData,\r\n  type HomeFloorPlanData,\r\n  type MaterialData,\r\n  type Metadata,\r\n  type PostprocessSettings,\r\n  setDefalutPostprocessSettings,\r\n} from '@/data';\r\nimport { GraphicManager, ObservableManager, RenderManager } from '@/manager';\r\nimport { PerformanceProfiler } from '@/manager/PerformanceProfiler';\r\nimport { LightControllerSystem, MaterialChangeSystem, ReflectorSystem, RoomSystem } from '@/system';\r\nimport { Profile } from '@/util/Profile';\r\nimport {\r\n  convertUnityCoordsToBabylon,\r\n  convertUnityRotationYToBabylon,\r\n  convertUnityScaleToBabylon,\r\n  loadJson,\r\n} from '@/util/Utile';\r\nimport { createEntity, World } from '@/World';\r\n\r\nimport './HomeLoaderWorkerConfig';\r\nimport type { ZEDSchema } from '..';\r\nimport type { GLTFFileLoader } from '@babylonjs/loaders/glTF';\r\nimport type { With } from 'miniplex';\r\n\r\n//-----------------------------------------------------------------\r\nlet scene: Scene | undefined;\r\nlet pivotPositions: Map<string, Vector3> = new Map();\r\n\r\nconst version = '12';\r\nexport let metadata: Metadata | undefined;\r\nexport let floorplanData: { [homeId: string]: FloorPlanData[] | undefined } = {};\r\n\r\n//-----------------------------------------------------------------\r\nexport interface QualitySettings {\r\n  simpleMode?: boolean;\r\n  modelLOD: 'LOD0' | 'LOD1';\r\n  textureMaxSize: '2048' | '1024' | '512' | '256';\r\n  resolution?: Resolution;\r\n  reflection?: boolean;\r\n  useNormalTexture?: boolean;\r\n}\r\nlet qualitySettings: QualitySettings;\r\n\r\n// * 해상도 순으로 정렬 필요\r\nexport enum Resolution {\r\n  MAX = -1,\r\n  p1440 = 1440,\r\n  p1080 = 1080,\r\n  p900 = 900,\r\n  p720 = 720,\r\n  NONE = 0,\r\n}\r\n\r\n//-----------------------------------------------------------------\r\nlet loadedEnvironment = new Map<string, CubeTexture>();\r\nlet lightForStandardMaterial: DirectionalLight | undefined;\r\nlet loadedMaterialList = new Map<string, PBRMaterial | StandardMaterial>();\r\ninterface RoomLightRaycastData {\r\n  floorplanId: string;\r\n  origin: Vector3;\r\n  items: {\r\n    direction: Vector3;\r\n    meshes: AbstractMesh[];\r\n  }[];\r\n}\r\n\r\nconst ExtensionName = 'ZED_EXTENSION';\r\n//-----------------------------------------------------------------\r\n/**\r\n * 입력한 HomeID로 Data와 Model을 Load하고 Component를 세팅합니다\r\n * @param scene: Scene\r\n * @param homeId Data를 Load하고 생성할 HomeID\r\n */\r\nexport const loadHome = async (\r\n  _scene: Scene,\r\n  homeId: string,\r\n  graphicManager: GraphicManager,\r\n  _qualitySettings: QualitySettings\r\n) => {\r\n  scene = _scene;\r\n  qualitySettings = _qualitySettings;\r\n\r\n  totalCount = 0;\r\n  loadedCount = 0;\r\n\r\n  const performance = PerformanceProfiler.getInstance(scene);\r\n  //-----------------------------------------\r\n  /**\r\n   * simpleMode를 True로 하면, GLTF 로드 시 해당 Data를 최소화해 빠른 로딩을 합니다. (for dev)\r\n   */\r\n  if (qualitySettings.simpleMode) {\r\n    const index = 'materials';\r\n    SceneLoader.OnPluginActivatedObservable.add((loader) => {\r\n      const gltfLoader = loader as unknown as GLTFFileLoader;\r\n\r\n      gltfLoader.onParsed = (data) => {\r\n        // @ts-ignore\r\n        const materials: IMaterial[] = data.json[index];\r\n        for (const m of materials) {\r\n          if (m.pbrMetallicRoughness) {\r\n            m.pbrMetallicRoughness.baseColorTexture = undefined;\r\n            m.pbrMetallicRoughness.metallicRoughnessTexture = undefined;\r\n          }\r\n\r\n          m.extras = undefined;\r\n          m.normalTexture = undefined;\r\n          m.occlusionTexture = undefined;\r\n          m.emissiveTexture = undefined;\r\n          m.emissiveFactor = undefined;\r\n        }\r\n\r\n        // @ts-ignore\r\n        const nodes: IImage[] = data.json['nodes'];\r\n        totalCount += nodes.length;\r\n      };\r\n    });\r\n  } else {\r\n    SceneLoader.OnPluginActivatedObservable.add((loader) => {\r\n      const gltfLoader = loader as unknown as GLTFFileLoader;\r\n      gltfLoader.onParsed = (data) => {\r\n        if (qualitySettings.useNormalTexture !== undefined && !qualitySettings.useNormalTexture) {\r\n          // @ts-ignore\r\n          const materials: IMaterial[] = data.json['materials'];\r\n          for (const m of materials) {\r\n            m.normalTexture = undefined;\r\n          }\r\n        }\r\n\r\n        // @ts-ignore\r\n        const images: IImage[] = data.json['images'];\r\n        for (const m of images) {\r\n          if (m.uri) {\r\n            m.uri = `${qualitySettings.textureMaxSize}/${m.uri}`;\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        const nodes: IImage[] = data.json['nodes'];\r\n        totalCount += nodes.length;\r\n      };\r\n    });\r\n  }\r\n  //-----------------------------------------\r\n  /**\r\n   * 메타데이터 로드\r\n   */\r\n\r\n  // * metadata를 이미 로드 했다면 생략 (프로그램 실행 중 중복 로드 방지)\r\n  if (!metadata) {\r\n    Profile.start('Data Load - Common');\r\n\r\n    // * Cache 로드\r\n    metadata = await getJsonDataFromCache<Metadata>('Zed', `Zed_Metadata.json`);\r\n\r\n    // * Cache로 저장된 데이터가 없거나 version이 다르면, 로컬의 json파일로 로드 후 Cache 저장\r\n    if (!metadata || metadata.version !== version) {\r\n      const [homeData, homeFloorplanData, postProcessSettings] = await Promise.all([\r\n        loadJson<HomeData[]>('/assets/data/Home.json'),\r\n        loadJson<HomeFloorPlanData[]>('/assets/data/HomeFloorPlan.json'),\r\n        loadJson<PostprocessSettings>('/assets/data/PostProessSettings.json'),\r\n      ]);\r\n\r\n      metadata = {\r\n        version: version,\r\n        homeData: homeData,\r\n        homeFloorPlanData: homeFloorplanData,\r\n        postProcessSettings: postProcessSettings,\r\n      };\r\n\r\n      await cacheJsonData('Zed', `Zed_Metadata.json`, metadata);\r\n    }\r\n\r\n    Profile.end('Data Load - Common');\r\n    performance.addCustom('loadHome', 'Common', Profile.get('Data Load - Common'));\r\n  }\r\n\r\n  // * Metadata로 Postprocess 적용\r\n  setDefalutPostprocessSettings(metadata.postProcessSettings);\r\n  graphicManager.setEnablePostprocess(true, metadata.postProcessSettings);\r\n\r\n  //-----------------------------------------\r\n  /**\r\n   * 전체 데이터에서 homeID에 해당하는 home(세대) 데이터 추출\r\n   */\r\n  const home = metadata.homeData.find((data) => data.homeId === homeId);\r\n  if (!home) {\r\n    console.log(`The home does not exist. [homeID : ${homeId}]`);\r\n    return;\r\n  }\r\n  // * Home에 정의된 ambientColor가 있으면 적용\r\n  if (home.ambientColor) {\r\n    scene.ambientColor = new Color3(home.ambientColor.r, home.ambientColor.g, home.ambientColor.b);\r\n  }\r\n\r\n  // * Standard Material을 위한 Light 생성\r\n  lightForStandardMaterial = new DirectionalLight('', new Vector3(0, -1, 0), scene);\r\n  lightForStandardMaterial.intensity = home.lightIntensity ?? 0.85;\r\n  lightForStandardMaterial.name = 'Standard Only Light';\r\n  lightForStandardMaterial.includedOnlyMeshes = [];\r\n\r\n  // * Home에 정의된 EnvironmentTexture가 있으면 적용하고 없으면 default Texture 적용\r\n  scene.environmentTexture = loadEnvironment(scene, `${home.environmentTexture ?? 'default.env'}`);\r\n  scene.environmentIntensity = 1;\r\n\r\n  //-----------------------------------------\r\n  /**\r\n   * 해당 home(세대)에 포함된 FloorPlan(평면도) 데이터 추출\r\n   */\r\n  const homeFloorplans = metadata.homeFloorPlanData.filter(\r\n    (homeFloorPlan) => homeFloorPlan.homeId === homeId\r\n  );\r\n  if (homeFloorplans.length === 0) {\r\n    console.log(`The floor plan does not exist for that home. [homeID : ${homeId}]`);\r\n    return;\r\n  }\r\n  //-----------------------------------------\r\n  /**\r\n   * 해당 FloorPlan(평면도) 경로의 FloorPlanBatch(평면도 가구 배치) 데이터 로드\r\n   */\r\n\r\n  // * homeId에 해당하는 floorplanData를 이미 로드 했다면 생략 (프로그램 실행 중 중복 로드 방지)\r\n  if (!floorplanData[homeId]) {\r\n    Profile.start('Data Load - FloorPlan');\r\n\r\n    // * User Cache 로드\r\n    floorplanData[homeId] = await getJsonDataFromCache<FloorPlanData[]>(\r\n      'User',\r\n      `Zed_${homeId}.json`\r\n    );\r\n\r\n    // * User Cache가 없으면, ZED Cache 로드 (단, metadata 갱신 시 floorplan data도 갱신하기 위해 생략)\r\n    if (!floorplanData[homeId] && metadata.version === version) {\r\n      floorplanData[homeId] = await getJsonDataFromCache<FloorPlanData[]>(\r\n        'Zed',\r\n        `Zed_${homeId}.json`\r\n      );\r\n    }\r\n\r\n    // * Cache로 저장된 데이터가 없거나 갱신이 필요하면, 로컬의 json파일로 로드 후 homeId로 Cache 저장\r\n    if (!floorplanData[homeId]) {\r\n      floorplanData[homeId] = await Promise.all(\r\n        homeFloorplans.map((homeFloorPlan) =>\r\n          loadJson<FloorPlanData>(`/assets/floorplan/${homeFloorPlan.floorplanId}.json`)\r\n        )\r\n      );\r\n      if (!floorplanData[homeId]) return;\r\n\r\n      await cacheJsonData('Zed', `Zed_${homeId}.json`, floorplanData[homeId]!);\r\n    }\r\n    Profile.end('Data Load - FloorPlan');\r\n    performance.addCustom('loadHome', 'FloorPlan', Profile.get('Data Load - FloorPlan'));\r\n  }\r\n\r\n  homeFloorplans.forEach((floorplan) => {\r\n    const homeFloorplan = homeFloorplans.find((f) => f.floorplanId === floorplan.floorplanId);\r\n    const pivotPosition = homeFloorplan\r\n      ? convertUnityCoordsToBabylon(homeFloorplan.position)\r\n      : Vector3.Zero();\r\n    pivotPositions.set(floorplan.floorplanId, pivotPosition);\r\n  });\r\n\r\n  //-----------------------------------------\r\n  /**\r\n   * 각 평면도/라이트/가구 모델 로드 및 세팅\r\n   */\r\n  Profile.start('Model Load');\r\n  scene.blockfreeActiveMeshesAndRenderingGroups = true;\r\n\r\n  for (const floorplan of floorplanData[homeId]!) {\r\n    const floorplanId = floorplan.floorplanId;\r\n\r\n    const parentTransform = new TransformNode(floorplanId, scene);\r\n    parentTransform.rotation = new Vector3(0, Angle.FromDegrees(180).radians(), 0);\r\n    parentTransform.scaling = new Vector3(1, 1, -1);\r\n\r\n    const floorplanSrc = `/assets/model/${floorplan.floorplanId}_${qualitySettings.modelLOD}.glb`;\r\n    const floorplanPosition = Vector3.Zero();\r\n    const floorplanRotation = 0;\r\n    const floorplanScale = Vector3.One();\r\n\r\n    const additionalMaterials = [\r\n      ...new Set(floorplan.materialOverrideData?.map((a) => a.materialName)),\r\n    ];\r\n\r\n    GLTFLoader.RegisterExtension(\r\n      ExtensionName,\r\n      (loader) => new ZEDExtension(loader, homeId, floorplanId)\r\n    );\r\n    await Promise.all([\r\n      /**\r\n       * Floorplan Model Load\r\n       */\r\n      loadModel(\r\n        parentTransform,\r\n        floorplanId,\r\n        floorplanId,\r\n        floorplanSrc,\r\n        floorplanPosition,\r\n        floorplanRotation,\r\n        floorplanScale\r\n      ),\r\n      /**\r\n       * Furniture Model Load\r\n       */\r\n      ...floorplan.furniturePlaceData.map((furnitureBatch) => {\r\n        const furnitureName = furnitureBatch.name;\r\n        const modelSrc = `/assets/model/${furnitureName}_${qualitySettings.modelLOD}.glb`;\r\n\r\n        let position = convertUnityScaleToBabylon(furnitureBatch.position);\r\n        let rotationY = convertUnityRotationYToBabylon(furnitureBatch.rotationY);\r\n        rotationY = Angle.FromDegrees(rotationY % 360).radians();\r\n        let scale = convertUnityScaleToBabylon(furnitureBatch.scale);\r\n\r\n        return loadModel(\r\n          parentTransform,\r\n          floorplanId,\r\n          furnitureName,\r\n          modelSrc,\r\n          position,\r\n          rotationY,\r\n          scale\r\n        );\r\n      }),\r\n      /**\r\n       * Material Load\r\n       */\r\n      ...additionalMaterials.map((materialName) => {\r\n        const src = `/assets/model/${materialName}_${qualitySettings.modelLOD}.glb`;\r\n        return loadMaterial(materialName, src);\r\n      }),\r\n    ]);\r\n    GLTFLoader.UnregisterExtension(ExtensionName);\r\n\r\n    applyOverrideMaterials(floorplanId, floorplan.materialOverrideData);\r\n    /**\r\n     * 평면도 별 세팅\r\n     */\r\n    RoomSystem.updateRoomInFloorplan(floorplanId);\r\n  }\r\n  scene.blockfreeActiveMeshesAndRenderingGroups = false;\r\n  Profile.end('Model Load');\r\n  performance.addCustom('loadHome', 'Model Load', Profile.get('Model Load'));\r\n\r\n  //-----------------------------------------\r\n  /**\r\n   * Shader 컴파일\r\n   */\r\n  Profile.start('Shader Compile');\r\n  await Promise.all(scene.meshes.map((mesh) => mesh.material?.forceCompilationAsync(mesh)));\r\n  Profile.end('Shader Compile');\r\n  performance.addCustom('loadHome', 'Shader Compile', Profile.get('Shader Compile'));\r\n  //-----------------------------------------\r\n  // * 완료 콜백 호출\r\n  if (ObservableManager.instance.onAllModelLoaded.hasObservers()) {\r\n    ObservableManager.instance.onAllModelLoaded.notifyObservers(undefined);\r\n  }\r\n  // * 완료 후 1 frame 강제 렌더링\r\n  RenderManager.RenderUpdate();\r\n};\r\n\r\n//-----------------------------------------------------------------\r\nlet loadedCount = 0;\r\nlet totalCount = 0;\r\nconst IgnoreMeshName = '__root__';\r\nconst splitDot = '.';\r\nconst validateModelFormats = ['gltf', 'glb'];\r\n/**\r\n * @param prop ZEDProp\r\n * @param modelName Model의 이름입니다.\r\n * @param src Load할 Model의 경로\r\n * @param pivotPosition pivot 좌표값\r\n * @param position Model의 좌표값 (final position = pivotPosition + position)\r\n * @param rotationY Model의 회전값\r\n * @param scale Model의 크기값\r\n * @param onLoaded Model 완료 후 콜백\r\n * * 콜백 반환값\r\n * * model: Load한 Model에 관한 모든 데이터\r\n * * rootTransform: 입력한 modelName의 TransformNode\r\n */\r\nconst loadModel = async (\r\n  parentTransform: TransformNode,\r\n  floorplanId: string,\r\n  modelName: string,\r\n  src: string,\r\n  position: Vector3,\r\n  rotationY: number,\r\n  scale: Vector3\r\n) => {\r\n  try {\r\n    let model: ISceneLoaderAsyncResult;\r\n    src = src.trim();\r\n\r\n    // * 파일 포맷이 glb or gltf가 아닌 모델 제외\r\n    const extension = src.split(splitDot).pop();\r\n    if (extension && !validateModelFormats.includes(extension.toLowerCase())) {\r\n      console.log(`.${extension} file format is not supported`);\r\n      return;\r\n    }\r\n\r\n    // * Model Load\r\n    model = await SceneLoader.ImportMeshAsync(\r\n      '',\r\n      src,\r\n      undefined,\r\n      scene,\r\n      undefined,\r\n      `${splitDot}${extension}`\r\n    );\r\n\r\n    // * babylonMeshes에는 __root__라는 의미없는 mesh가 포함돼있어 Extend 계산에 방해돼 제외시킴\r\n    const meshes = model.meshes.filter((mesh) => mesh.name !== IgnoreMeshName);\r\n\r\n    // * 입력한 modelName으로 rootTransform을 탐색\r\n    let root = model.transformNodes.find((node) => node.name.includes(modelName));\r\n    let isMeshNode = !root;\r\n\r\n    // * rootTransform이 존재하지 않으면, 입력한 modelName으로 meshNode를 탐색\r\n    if (isMeshNode) {\r\n      root = meshes.find((node) => node.name.includes(modelName));\r\n    }\r\n\r\n    if (root) {\r\n      const pivotPosition = pivotPositions.get(floorplanId) ?? Vector3.Zero();\r\n\r\n      // * Data에 의한 좌표/방향/크기 설정\r\n      root.setAbsolutePosition(pivotPosition.add(position));\r\n      root.rotation = new Vector3(0, rotationY, 0);\r\n      root.scaling = scale;\r\n\r\n      const parent = root.parent;\r\n      let transform: TransformNode | undefined = undefined;\r\n      if (isMeshNode) {\r\n        // * MeshNode의 경우 임의의 TransformNode를 생성해 parent로 설정\r\n        transform = new TransformNode(root.name, scene);\r\n        root.parent = transform;\r\n      } else {\r\n        transform = root;\r\n      }\r\n\r\n      transform.parent = parentTransform;\r\n      if (parent) {\r\n        parent.dispose(false, false);\r\n      }\r\n    } else {\r\n      console.log(\r\n        `입력한 modelName의 TransformNode or Mesh를 찾을 수 없어. root를 반환할 수 없습니다. modelName의: [${modelName}]`\r\n      );\r\n    }\r\n\r\n    return model;\r\n  } catch (error) {\r\n    // console.log(error);\r\n  }\r\n};\r\nconst loadEnvironment = (scene: Scene, name: string, intensity?: number) => {\r\n  let envTex = loadedEnvironment.get(name);\r\n  if (!envTex) {\r\n    const src = `/assets/environment/${name}`;\r\n    envTex = CubeTexture.CreateFromPrefilteredData(src, scene);\r\n    envTex.gammaSpace = false;\r\n    // envTex.rotationY = Math.PI;\r\n    loadedEnvironment.set(name, envTex);\r\n  }\r\n\r\n  if (intensity) {\r\n    if (envTex.level != intensity) {\r\n      envTex.level = intensity;\r\n    }\r\n  }\r\n  return envTex;\r\n};\r\n//-----------------------------------------------------------------\r\nexport const addModel = async (\r\n  homeId: string,\r\n  floorplanId: string,\r\n  modelName: string,\r\n  position?: Vector3,\r\n  rotationY?: number,\r\n  scale?: Vector3\r\n) => {\r\n  if (!scene) return;\r\n\r\n  const parentTransform = scene.getTransformNodeByName(floorplanId);\r\n  if (!parentTransform) return;\r\n\r\n  const modelSrc = `/assets/model/${modelName}_${qualitySettings.modelLOD}.glb`;\r\n\r\n  GLTFLoader.RegisterExtension(\r\n    ExtensionName,\r\n    (loader) => new ZEDExtension(loader, homeId, floorplanId)\r\n  );\r\n  const model = await loadModel(\r\n    parentTransform,\r\n    floorplanId,\r\n    modelName,\r\n    modelSrc,\r\n    position ?? parentTransform.position,\r\n    rotationY ?? 0,\r\n    scale ?? Vector3.One()\r\n  );\r\n  GLTFLoader.UnregisterExtension(ExtensionName);\r\n\r\n  if (!model) return;\r\n\r\n  await Promise.all(model.meshes.map((mesh) => mesh.material?.forceCompilationAsync(mesh)));\r\n\r\n  RenderManager.RenderUpdate();\r\n\r\n  return model;\r\n};\r\n//-----------------------------------------------------------------\r\nconst loadMaterial = async (modelName: string, src: string) => {\r\n  try {\r\n    if (loadedMaterialList.has(modelName)) return;\r\n\r\n    src = src.trim();\r\n\r\n    // * 파일 포맷이 glb or gltf가 아닌 모델 제외\r\n    const extension = src.split(splitDot).pop();\r\n    if (extension && !validateModelFormats.includes(extension.toLowerCase())) {\r\n      console.log(`.${extension} file format is not supported`);\r\n      return;\r\n    }\r\n\r\n    // * Model Load\r\n    const model = await SceneLoader.ImportMeshAsync(\r\n      '',\r\n      src,\r\n      undefined,\r\n      scene,\r\n      undefined,\r\n      `${splitDot}${extension}`\r\n    );\r\n\r\n    model.meshes.forEach((m) => m.dispose(false, false));\r\n  } catch (error) {\r\n    // console.log(error);\r\n  }\r\n};\r\nexport const additionalLoadAndApplyMaterial = async (\r\n  entity: ZEDSchema['MaterialChangeable'],\r\n  overrideData: MaterialData\r\n) => {\r\n  const homeId = entity.Identifier.homeId;\r\n  const floorplanId = entity.Identifier.floorplanId;\r\n  const materialName = overrideData.materialName;\r\n\r\n  if (!loadedMaterialList.has(materialName)) {\r\n    GLTFLoader.RegisterExtension(\r\n      ExtensionName,\r\n      (loader) => new ZEDExtension(loader, homeId, floorplanId)\r\n    );\r\n    const src = `/assets/model/${materialName}_${qualitySettings.modelLOD}.glb`.trim();\r\n    await loadMaterial(materialName, src);\r\n    GLTFLoader.UnregisterExtension(ExtensionName);\r\n  }\r\n  await applyMaterial(entity, overrideData);\r\n};\r\nconst applyOverrideMaterials = (floorplanId: string, overrideData?: MaterialData[]) => {\r\n  if (!overrideData) return;\r\n\r\n  const materialChangeableEntities =\r\n    MaterialChangeSystem.getMaterialChangeableEntitiesInFloorplan(floorplanId);\r\n\r\n  for (const entity of materialChangeableEntities) {\r\n    const name = entity.TransformNode.name;\r\n    const dataList = overrideData.filter((d) => d.name === name);\r\n\r\n    for (let i = 0; i < dataList.length; i++) {\r\n      const data = dataList[i];\r\n      applyMaterial(entity, data);\r\n    }\r\n  }\r\n};\r\nconst applyMaterial = async (\r\n  entity: ZEDSchema['MaterialChangeable'],\r\n  overrideData: MaterialData\r\n) => {\r\n  const type = entity.Structure.structureType;\r\n  const reflection = type === StructureType.Floor;\r\n  const meshes = entity.Structure.meshes;\r\n  if (overrideData.index >= meshes.length) return;\r\n\r\n  const mesh = meshes[overrideData.index];\r\n  const materialName = overrideData.materialName;\r\n  const material = mesh.material;\r\n  if (\r\n    !material ||\r\n    material.name === materialName ||\r\n    !(material instanceof StandardMaterial || material instanceof PBRMaterial)\r\n  )\r\n    return;\r\n\r\n  const loadedMaterial = loadedMaterialList.get(materialName);\r\n  if (\r\n    !loadedMaterial ||\r\n    !(loadedMaterial instanceof StandardMaterial || loadedMaterial instanceof PBRMaterial)\r\n  )\r\n    return;\r\n\r\n  const newMaterial = loadedMaterial.clone(materialName);\r\n  if (newMaterial instanceof PBRMaterial) {\r\n    newMaterial.reflectionTexture = material.reflectionTexture;\r\n  } else if (newMaterial instanceof StandardMaterial) {\r\n    if (!reflection) {\r\n      newMaterial.reflectionTexture = null;\r\n    }\r\n    if (lightForStandardMaterial) {\r\n      lightForStandardMaterial.includedOnlyMeshes.push(mesh);\r\n    }\r\n  }\r\n  newMaterial.lightmapTexture = material.lightmapTexture;\r\n  newMaterial.useLightmapAsShadowmap = true;\r\n\r\n  mesh.material = newMaterial;\r\n  material.dispose(false, false);\r\n\r\n  await mesh.material.forceCompilationAsync(mesh);\r\n  RenderManager.RenderUpdate();\r\n\r\n  const baseMaterialData = entity.MaterialChangeable.materialData;\r\n  if (\r\n    baseMaterialData.find(\r\n      (d) =>\r\n        d.name === overrideData.name &&\r\n        d.index === overrideData.index &&\r\n        d.materialName === overrideData.materialName\r\n    )\r\n  ) {\r\n    const index = entity.MaterialChangeable.materialOverrideData.findIndex(\r\n      (a) => a.name === overrideData.name && a.index === overrideData.index\r\n    );\r\n    if (index !== -1) {\r\n      entity.MaterialChangeable.materialOverrideData.splice(index);\r\n    }\r\n  } else {\r\n    const index = entity.MaterialChangeable.materialOverrideData.findIndex(\r\n      (a) => a.name === overrideData.name && a.index === overrideData.index\r\n    );\r\n    if (index !== -1) {\r\n      entity.MaterialChangeable.materialOverrideData[index] = overrideData;\r\n    } else {\r\n      entity.MaterialChangeable.materialOverrideData.push(overrideData);\r\n    }\r\n  }\r\n};\r\n//-----------------------------------------------------------------\r\nexport const disposeLoader = () => {\r\n  SceneLoader.OnPluginActivatedObservable.clear();\r\n\r\n  scene = undefined;\r\n  // metadata = undefined;\r\n  pivotPositions.clear();\r\n\r\n  if (lightForStandardMaterial) lightForStandardMaterial.dispose(false, true);\r\n  lightForStandardMaterial = undefined;\r\n\r\n  loadedEnvironment.forEach((t) => {\r\n    if (t) t.dispose();\r\n  });\r\n  loadedEnvironment.clear();\r\n\r\n  loadedMaterialList.clear();\r\n};\r\n//-----------------------------------------------------------------\r\nexport class ZEDExtension implements IGLTFLoaderExtension {\r\n  //-------------------------------------------------------\r\n  public readonly name = ExtensionName;\r\n  public enabled: boolean;\r\n  private loader: GLTFLoader;\r\n  private homeId: string;\r\n  private floorplanId: string;\r\n\r\n  constructor(loader: GLTFLoader, homeId: string, floorplanId: string) {\r\n    this.loader = loader;\r\n    this.enabled = loader.isExtensionUsed(ExtensionName);\r\n    this.homeId = homeId;\r\n    this.floorplanId = floorplanId;\r\n  }\r\n  //-------------------------------------------------------\r\n  private lightmap = new Map<number, BaseTexture>();\r\n  private entities: Entity[] = [];\r\n\r\n  public dispose() {\r\n    this.lightmap.clear();\r\n    this.entities = [];\r\n\r\n    (this.loader as any) = null;\r\n  }\r\n  //-------------------------------------------------------\r\n  //@ts-ignore\r\n  public async loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n    if (scene.extras && scene.extras.floorplan) {\r\n      const entity = createEntity({\r\n        Identifier: {\r\n          homeId: this.homeId,\r\n          floorplanId: this.floorplanId,\r\n        },\r\n      });\r\n\r\n      World.addComponent(entity, 'Floorplan', {\r\n        extends: scene.extras.floorplan.extends,\r\n        pivotPosition: pivotPositions.get(this.floorplanId) ?? Vector3.Zero(),\r\n      });\r\n      this.entities.push(entity);\r\n    }\r\n\r\n    await this.loader.loadSceneAsync(context, scene);\r\n  }\r\n  //-------------------------------------------------------\r\n  public async loadNodeAsync(\r\n    context: string,\r\n    node: INode,\r\n    assign: (babylonMesh: TransformNode) => void\r\n    //@ts-ignore\r\n  ): Nullable<Promise<TransformNode>> {\r\n    await this.loader.loadNodeAsync(context, node, assign);\r\n\r\n    // * 첫 Model Load 완료 시 콜백\r\n    if (loadedCount === 0) {\r\n      if (ObservableManager.instance.onFirstModelLoaded.hasObservers()) {\r\n        ObservableManager.instance.onFirstModelLoaded.notifyObservers(undefined);\r\n      }\r\n    }\r\n    // * Model Load 완료 시 Progress 콜백\r\n    if (ObservableManager.instance.onModelLoadProgress.hasObservers()) {\r\n      ObservableManager.instance.onModelLoadProgress.notifyObservers(++loadedCount / totalCount);\r\n    }\r\n\r\n    const transform = node._babylonTransformNode;\r\n    const meshes = node._primitiveBabylonMeshes;\r\n\r\n    if (transform) {\r\n      if (meshes) {\r\n        this.optimizeMeshes(meshes);\r\n      }\r\n\r\n      const extras = node.extras;\r\n      if (extras) {\r\n        const entity = createEntity({\r\n          Identifier: {\r\n            homeId: this.homeId,\r\n            floorplanId: this.floorplanId,\r\n          },\r\n          TransformNode: transform,\r\n        });\r\n\r\n        //-------------------------------------------------------\r\n        const materialData = node.extras.material;\r\n        const structure = node.extras.structure;\r\n        if ((materialData || structure) && meshes) {\r\n          if ((materialData && materialData.reflection) || (structure && structure.reflection)) {\r\n            for (const mesh of meshes) {\r\n              const material = mesh.material as PBRMaterial;\r\n\r\n              // * Mirror 기능을 사용하기 위해 PBR => Standard로 교체\r\n              const newMaterial = new StandardMaterial(material.name, scene);\r\n              newMaterial.diffuseColor = material.albedoColor;\r\n              if (material.albedoTexture) newMaterial.diffuseTexture = material.albedoTexture;\r\n              if (material.bumpTexture) newMaterial.bumpTexture = material.bumpTexture;\r\n              if (material.ambientTexture) newMaterial.ambientTexture = material.ambientTexture;\r\n              if (material.lightmapTexture) {\r\n                newMaterial.lightmapTexture = material.lightmapTexture;\r\n                newMaterial.useLightmapAsShadowmap = true;\r\n              }\r\n              newMaterial.specularColor = Color3.Black();\r\n              if (qualitySettings.reflection)\r\n                newMaterial.reflectionTexture = ReflectorSystem.getReflectionTexture(\r\n                  this.floorplanId\r\n                );\r\n              newMaterial.ambientColor = Color3.White();\r\n\r\n              mesh.material = newMaterial;\r\n              if (!loadedMaterialList.has(material.name)) {\r\n                loadedMaterialList.set(newMaterial.name, newMaterial);\r\n              }\r\n              material.dispose(false, false);\r\n\r\n              if (structure) {\r\n                if (lightForStandardMaterial) {\r\n                  lightForStandardMaterial.includedOnlyMeshes.push(mesh);\r\n                }\r\n              }\r\n            }\r\n          } else if (materialData) {\r\n            for (const mesh of meshes) {\r\n              const material = mesh.material as PBRMaterial;\r\n              if (!loadedMaterialList.has(material.name)) {\r\n                loadedMaterialList.set(material.name, material);\r\n              }\r\n            }\r\n          } else if (structure) {\r\n            const structureType = structure.structureType as StructureType;\r\n            if (structureType === StructureType.Floor || structureType === StructureType.Wall) {\r\n              for (const mesh of meshes) {\r\n                const material = mesh.material as PBRMaterial;\r\n                if (!loadedMaterialList.has(material.name)) {\r\n                  loadedMaterialList.set(material.name, material);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (structure && meshes) {\r\n          const structureType = structure.structureType as StructureType;\r\n\r\n          if (structureType !== StructureType.Builtin) {\r\n            World.addComponent(entity, 'Structure', {\r\n              structureType: structureType,\r\n              meshes: meshes,\r\n            });\r\n          }\r\n\r\n          if (structureType === StructureType.Floor || structureType === StructureType.Wall) {\r\n            const materialData: MaterialData[] = [];\r\n            for (let i = 0; i < meshes.length; i++) {\r\n              const material = meshes[i].material;\r\n              if (material) {\r\n                materialData.push({\r\n                  name: transform.name,\r\n                  materialName: material.name,\r\n                  index: i,\r\n                });\r\n              }\r\n            }\r\n            World.addComponent(entity, 'MaterialChangeable', {\r\n              materialData: materialData,\r\n              materialOverrideData: [],\r\n            });\r\n          }\r\n\r\n          if (structureType === StructureType.Floor) {\r\n            World.addComponent(entity, 'Room', {\r\n              extends: transform.getHierarchyBoundingVectors(),\r\n              viewDataList: structure.viewDataList,\r\n            });\r\n            World.addComponent(entity, 'ThingState', {\r\n              type: ThingType.Light,\r\n              state: getDefaultThingState(ThingType.Light),\r\n            });\r\n            World.addComponent(entity, 'GUIDisplayable', true);\r\n            World.addComponent(entity, 'CameraTarget', true);\r\n            World.addComponent(entity, 'LightController', true);\r\n            World.addComponent(entity, 'MagnetismTarget', true);\r\n          } else if (structureType === StructureType.Wall) {\r\n            World.addComponent(entity, 'MagnetismTarget', true);\r\n          } else if (structureType === StructureType.OutterWall) {\r\n            World.addComponent(entity, 'Transparentable', true);\r\n          } else if (structureType === StructureType.Ceiling) {\r\n            World.addComponent(entity, 'Ceiling', true);\r\n          } else if (structureType === StructureType.Hallway) {\r\n            World.addComponent(entity, 'Hallway', true);\r\n          }\r\n\r\n          if (\r\n            structureType !== StructureType.OutterWall &&\r\n            structureType !== StructureType.Hallway\r\n          ) {\r\n            World.addComponent(entity, 'RoomObject', {});\r\n          }\r\n        }\r\n\r\n        //-------------------------------------------------------\r\n        const furniture = node.extras.furniture;\r\n        if (furniture && transform) {\r\n          //-------------------------------------------------------\r\n          if (furniture.moveable) {\r\n            const magneticFace = furniture.magneticFace;\r\n            World.addComponent(entity, 'TransformMovable', {\r\n              magnetismFixtureFace: magneticFace,\r\n            });\r\n          }\r\n          //-------------------------------------------------------\r\n          if (furniture.video) {\r\n            let target = transform\r\n              .getChildTransformNodes()\r\n              .find((t) => t.name == furniture.video.target);\r\n\r\n            if (!target) target = transform;\r\n\r\n            const childMeshes = target.getChildMeshes();\r\n            if (childMeshes.length > furniture.video.index) {\r\n              const targetMesh = childMeshes[furniture.video.index];\r\n              World.addComponent(entity, 'VideoPlayer', {\r\n                initialized: false,\r\n                src: '/assets/video/zigbang.mp4',\r\n                mesh: targetMesh,\r\n                material: targetMesh.material as PBRMaterial,\r\n                defaultPlay: false,\r\n              });\r\n            }\r\n          }\r\n          //-------------------------------------------------------\r\n          if (furniture.thingType && furniture.thingType >= 0) {\r\n            const thingType = furniture.thingType as ThingType;\r\n\r\n            // * Thing에 한정해 Furniture에 GUIDisplayable 추가 (GUI를 표시하기 위한 좌표를 계산해 콜백으로 반환하는 Component)\r\n            World.addComponent(entity, 'ThingState', {\r\n              type: thingType,\r\n              state: getDefaultThingState(thingType),\r\n            });\r\n            World.addComponent(entity, 'GUIDisplayable', {\r\n              displayName: transform.name,\r\n            });\r\n\r\n            // * Thing에 한정해 Furniture에 CameraTarget 추가 (Camera의 MoveToTarget을 하기 위한 Component)\r\n            World.addComponent(entity, 'CameraTarget', {});\r\n\r\n            // * Door와 Window Thing에 한정해 Openable 추가 (열리고 닫히고를 하기 위한 Component)\r\n            if (thingType === ThingType.Door || thingType === ThingType.Window) {\r\n              if (node.extras.furniture.animation) {\r\n                const target = transform\r\n                  .getChildTransformNodes()\r\n                  .find((t) => t.name == node.extras.furniture.animation.target);\r\n                if (target) {\r\n                  const animation = node.extras.furniture.animation;\r\n\r\n                  World.addComponent(entity, 'Openable', {\r\n                    target: target,\r\n                    openPosition: new Vector3(\r\n                      -animation.openPosition.x,\r\n                      animation.openPosition.y,\r\n                      -animation.openPosition.z\r\n                    ),\r\n                    closePosition: new Vector3(\r\n                      -animation.closePosition.x,\r\n                      animation.closePosition.y,\r\n                      -animation.closePosition.z\r\n                    ),\r\n                    openRotation: new Vector3(\r\n                      Angle.FromDegrees(-animation.openRotation.x).radians(),\r\n                      Angle.FromDegrees(-animation.openRotation.y).radians(),\r\n                      Angle.FromDegrees(-animation.openRotation.z).radians()\r\n                    ),\r\n                    closeRotation: new Vector3(\r\n                      Angle.FromDegrees(-animation.closeRotation.x).radians(),\r\n                      Angle.FromDegrees(-animation.closeRotation.y).radians(),\r\n                      Angle.FromDegrees(-animation.closeRotation.z).radians()\r\n                    ),\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          World.addComponent(entity, 'ReflectionTarget', true);\r\n          World.addComponent(entity, 'RoomObject', {});\r\n\r\n          // TODO: 문/창문 앞뒷면 따로 처리하는 것 구현 필요\r\n        }\r\n        //-------------------------------------------------------\r\n        this.entities.push(entity);\r\n      }\r\n    }\r\n  }\r\n  private optimizeMeshes(meshes: AbstractMesh[]) {\r\n    for (const mesh of meshes) {\r\n      // 위치/방향/크기 고정\r\n      mesh.freezeWorldMatrix();\r\n      // BoundingInfo 갱신 중지\r\n      mesh.doNotSyncBoundingInfo = true;\r\n      // Pick 대상 제외 (raycast)\r\n      mesh.isPickable = false;\r\n      // 어떠한 경우에도 컬링하지 않고 활성화하는 지 여부\r\n      mesh.alwaysSelectAsActiveMesh = false;\r\n    }\r\n  }\r\n  //-------------------------------------------------------\r\n  public async loadMaterialPropertiesAsync(\r\n    context: string,\r\n    material: IMaterial,\r\n    babylonMaterial: Material\r\n  ) {\r\n    await this.loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n    const constantContext = `${context}/commonConstant`;\r\n\r\n    if (babylonMaterial instanceof PBRMaterial) {\r\n      //-------------------------------------------\r\n      babylonMaterial.albedoColor.r = Math.max(0, Math.min(babylonMaterial.albedoColor.r, 1));\r\n      babylonMaterial.albedoColor.g = Math.max(0, Math.min(babylonMaterial.albedoColor.g, 1));\r\n      babylonMaterial.albedoColor.b = Math.max(0, Math.min(babylonMaterial.albedoColor.b, 1));\r\n      babylonMaterial.alphaCutOff = 0.5;\r\n      babylonMaterial.maxSimultaneousLights = 1;\r\n\r\n      if (material.extras) {\r\n        //-------------------------------------------\r\n        if (material.extras.lightmapTexture) {\r\n          const lightmapTexture = material.extras.lightmapTexture;\r\n          const i = lightmapTexture.index ?? -1;\r\n          if (i >= 0) {\r\n            babylonMaterial.lightmapTexture =\r\n              this.lightmap.get(i) ??\r\n              (await this.loader.loadTextureInfoAsync(\r\n                `${constantContext}/lightmapTexture`,\r\n                lightmapTexture,\r\n                (bt) => {\r\n                  bt.level = i.lightmapLevel ?? 1;\r\n                  this.lightmap.set(i, bt);\r\n                }\r\n              ));\r\n            babylonMaterial.useLightmapAsShadowmap = true;\r\n          }\r\n          babylonMaterial.ambientColor = Color3.White();\r\n        }\r\n\r\n        //-------------------------------------------\r\n        if (material.extras.reflectionProbe) {\r\n          const scene = EngineStore.LastCreatedScene;\r\n          if (scene) {\r\n            const textureName = `${material.extras.reflectionProbe.name}.env`;\r\n            let envTex = loadedEnvironment.get(textureName);\r\n            if (!envTex) {\r\n              const src = `/assets/environment/${textureName}`;\r\n              envTex = CubeTexture.CreateFromPrefilteredData(src, scene);\r\n              envTex.gammaSpace = false;\r\n              loadedEnvironment.set(textureName, envTex);\r\n\r\n              const intensity = material.extras.reflectionProbe.intensity;\r\n              if (intensity) {\r\n                if (envTex.level != intensity) {\r\n                  envTex.level = intensity;\r\n                }\r\n              }\r\n            }\r\n            babylonMaterial.reflectionTexture = envTex;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (material.extras) {\r\n    }\r\n  }\r\n  //-------------------------------------------------------\r\n  public onReady(): void {}\r\n}\r\n","import { DepthOfFieldEffectBlurLevel, TonemappingOperator } from '@babylonjs/core';\r\n\r\nexport interface PostprocessSettings {\r\n  useMSAA?: boolean;\r\n  useFXAA?: boolean;\r\n  useToneMapping?: boolean;\r\n  toneMappingType?: TonemappingOperator;\r\n  contrast?: number;\r\n  expoure?: number;\r\n\r\n  useColorGrading?: boolean;\r\n  lutTexture?: string;\r\n  lutIsBlob?: boolean;\r\n  useColorCurve?: boolean;\r\n  colorCurveSettings?: ColorCurveSettings;\r\n\r\n  useBloom?: boolean;\r\n  bloomKernel?: number;\r\n  bloomScale?: number;\r\n  bloomThreshold?: number;\r\n  bloomWeight?: number;\r\n\r\n  useDepthOfField?: boolean;\r\n  blurLevel?: DepthOfFieldEffectBlurLevel; // 0 by default\r\n  fStop?: number; // 1.4 by default\r\n  focalLength?: number; // 50 by default, mm\r\n  focusDistance?: number; // 2000 by default, mm\r\n  lensSize?: number; // 50 by default\r\n\r\n  useChromaticAberration?: boolean;\r\n  aberrationAmount?: number;\r\n\r\n  useVignette?: boolean;\r\n  vignetteWeight?: number;\r\n\r\n  useSharpen?: boolean;\r\n  edgeAmount?: number;\r\n  colorAmount?: number;\r\n\r\n  useMotionBlur?: boolean;\r\n  motionStrength?: number;\r\n}\r\n\r\nexport interface ColorCurveSettings {\r\n  globalDensity: number;\r\n  globalExposure: number;\r\n  globalHue: number;\r\n  globalSaturation: number;\r\n  highlightsDensity: number;\r\n  highlightsExposure: number;\r\n  highlightsHue: number;\r\n  highlightsSaturation: number;\r\n  midtonesDensity: number;\r\n  midtonesExposure: number;\r\n  midtonesHue: number;\r\n  midtonesSaturation: number;\r\n  shadowsDensity: number;\r\n  shadowsExposure: number;\r\n  shadowsHue: number;\r\n  shadowsSaturation: number;\r\n}\r\n\r\nexport let defaultPostprocessSettings: PostprocessSettings = {\r\n  useMSAA: true,\r\n  useFXAA: true,\r\n  useToneMapping: true,\r\n  toneMappingType: TonemappingOperator.Hable,\r\n  contrast: 1.75,\r\n  expoure: 1.35,\r\n  useColorGrading: false,\r\n  lutTexture: '',\r\n  useColorCurve: false,\r\n  colorCurveSettings: {\r\n    globalDensity: 0, // 0 by default\r\n    globalExposure: 0, // 0 by default\r\n    globalHue: 30, // 30 by default\r\n    globalSaturation: 0, // 0 by default\r\n    highlightsDensity: 0, // 0 by default\r\n    highlightsExposure: 0, // 0 by default\r\n    highlightsHue: 30, // 30 by default\r\n    highlightsSaturation: 0, // 0 by default\r\n    midtonesDensity: 0, // 0 by default\r\n    midtonesExposure: 0, // 0 by default\r\n    midtonesHue: 30, // 30 by default\r\n    midtonesSaturation: 0, // 0 by default\r\n    shadowsDensity: 0, // 0 by default\r\n    shadowsExposure: 0, // 0 by default\r\n    shadowsHue: 30, // 30 by default\r\n    shadowsSaturation: 0, // 0 by default;\r\n  },\r\n\r\n  useBloom: false,\r\n  bloomKernel: 64, // 64 by default\r\n  bloomScale: 0.5, // 0.5 by default\r\n  bloomThreshold: 0.9, // 0.9 by default\r\n  bloomWeight: 0.15, // 0.15 by default\r\n\r\n  useDepthOfField: false,\r\n  blurLevel: DepthOfFieldEffectBlurLevel.Low, // 0 by default\r\n  fStop: 1.4, // 1.4 by default\r\n  focalLength: 50, // 50 by default, mm\r\n  focusDistance: 2000, // 2000 by default, mm\r\n  lensSize: 50, // 50 by default\r\n\r\n  useVignette: true,\r\n  vignetteWeight: 1.05,\r\n\r\n  useChromaticAberration: false,\r\n  aberrationAmount: 10,\r\n\r\n  useSharpen: false,\r\n  edgeAmount: 0.3,\r\n  colorAmount: 1,\r\n\r\n  useMotionBlur: false,\r\n  motionStrength: 1,\r\n};\r\n\r\nexport const setDefalutPostprocessSettings = (settings: PostprocessSettings) => {\r\n  defaultPostprocessSettings = settings;\r\n};\r\n","import {\r\n  ArcRotateCamera,\r\n  BaseCameraPointersInput,\r\n  CameraInputTypes,\r\n  type IPointerEvent,\r\n  type Nullable,\r\n  type PointerTouch,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nimport { RenderManager } from '@/manager';\r\n\r\n\r\n/**\r\n * Manage the pointers inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\n\r\nexport class ArcRotateCameraPointersInput extends BaseCameraPointersInput {\r\n  // Issue #58 - Pan with one finger, Rotate with two fingers\r\n  public swapPanAndRotate = true;\r\n\r\n  /**\r\n   * Defines the camera the input is attached to.\r\n   */\r\n  public camera: ArcRotateCamera = new ArcRotateCamera('', 0, 0, 0, new Vector3());\r\n\r\n  /**\r\n   * The minimum radius used for pinch, to avoid radius lock at 0\r\n   */\r\n  public static MinimumRadiusForPinch: number = 0.001;\r\n\r\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\r\n  public getClassName(): string {\r\n    return 'ArcRotateCameraPointersInput';\r\n  }\r\n\r\n  /**\r\n   * Defines the buttons associated with the input to handle camera move.\r\n   */\r\n  // @serialize()\r\n  public buttons = [0, 1, 2];\r\n\r\n  /**\r\n   * Defines the pointer angular sensibility  along the X axis or how fast is\r\n   * the camera rotating.\r\n   */\r\n  // @serialize()\r\n  public angularSensibilityX = 1000.0;\r\n\r\n  /**\r\n   * Defines the pointer angular sensibility along the Y axis or how fast is\r\n   * the camera rotating.\r\n   */\r\n  // @serialize()\r\n  public angularSensibilityY = 1000.0;\r\n\r\n  /**\r\n   * Defines the pointer pinch precision or how fast is the camera zooming.\r\n   */\r\n  // @serialize()\r\n  public pinchPrecision = 12.0;\r\n\r\n  /**\r\n   * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n   * from 0.\r\n   * It defines the percentage of current camera.radius to use as delta when\r\n   * pinch zoom is used.\r\n   */\r\n  // @serialize()\r\n  public pinchDeltaPercentage = 0;\r\n\r\n  /**\r\n   * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\r\n   * that any object in the plane at the camera's target point will scale\r\n   * perfectly with finger motion.\r\n   * Overrides pinchDeltaPercentage and pinchPrecision.\r\n   */\r\n  // @serialize()\r\n  public useNaturalPinchZoom: boolean = false;\r\n\r\n  /**\r\n   * Defines whether zoom (2 fingers pinch) is enabled through multitouch\r\n   */\r\n  // @serialize()\r\n  public pinchZoom: boolean = true;\r\n\r\n  /**\r\n   * Defines the pointer panning sensibility or how fast is the camera moving.\r\n   */\r\n  // @serialize()\r\n  public panningSensibility: number = 1000.0;\r\n\r\n  /**\r\n   * Defines whether panning (2 fingers swipe) is enabled through multitouch.\r\n   */\r\n  // @serialize()\r\n  public multiTouchPanning: boolean = true;\r\n\r\n  /**\r\n   * Defines whether panning is enabled for both pan (2 fingers swipe) and\r\n   * zoom (pinch) through multitouch.\r\n   */\r\n  // @serialize()\r\n  public multiTouchPanAndZoom: boolean = true;\r\n\r\n  /**\r\n   * Revers pinch action direction.\r\n   */\r\n  public pinchInwards = true;\r\n\r\n  private _isPanClick: boolean = false;\r\n  private _twoFingerActivityCount: number = 0;\r\n  private _isPinching: boolean = false;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Move camera from multi touch panning positions.\r\n   * @param previousMultiTouchPanPosition\r\n   * @param multiTouchPanPosition\r\n   */\r\n  private _computeMultiTouchPanning(\r\n    previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n    multiTouchPanPosition: Nullable<PointerTouch>\r\n  ): void {\r\n    if (this.panningSensibility !== 0 && previousMultiTouchPanPosition && multiTouchPanPosition) {\r\n      const moveDeltaX = multiTouchPanPosition.x - previousMultiTouchPanPosition.x;\r\n      const moveDeltaY = multiTouchPanPosition.y - previousMultiTouchPanPosition.y;\r\n      if (this.swapPanAndRotate) {\r\n        this.camera.inertialAlphaOffset -= moveDeltaX / this.angularSensibilityX;\r\n        this.camera.inertialBetaOffset -= moveDeltaY / this.angularSensibilityX;\r\n      } else {\r\n        const [deltaX, deltaY] = this.checkIsPanPossible(moveDeltaX, moveDeltaY);\r\n        this.camera.inertialPanningX += -deltaX / this.panningSensibility;\r\n        this.camera.inertialPanningY += deltaY / this.panningSensibility;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move camera from pinch zoom distances.\r\n   * @param previousPinchSquaredDistance\r\n   * @param pinchSquaredDistance\r\n   */\r\n  private _computePinchZoom(\r\n    previousPinchSquaredDistance: number,\r\n    pinchSquaredDistance: number\r\n  ): void {\r\n    const radius = this.camera.radius || ArcRotateCameraPointersInput.MinimumRadiusForPinch;\r\n    if (this.useNaturalPinchZoom) {\r\n      this.camera.radius =\r\n        (radius * Math.sqrt(previousPinchSquaredDistance)) / Math.sqrt(pinchSquaredDistance);\r\n    } else if (this.pinchDeltaPercentage) {\r\n      this.camera.inertialRadiusOffset +=\r\n        (pinchSquaredDistance - previousPinchSquaredDistance) *\r\n        0.001 *\r\n        radius *\r\n        this.pinchDeltaPercentage;\r\n    } else {\r\n      this.camera.inertialRadiusOffset +=\r\n        (pinchSquaredDistance - previousPinchSquaredDistance) /\r\n        ((this.pinchPrecision *\r\n          (this.pinchInwards ? 1 : -1) *\r\n          (this.angularSensibilityX + this.angularSensibilityY)) /\r\n          2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on pointer POINTERMOVE event if only a single touch is active.\r\n   * @param point\r\n   * @param offsetX\r\n   * @param offsetY\r\n   */\r\n  public onTouch(point: Nullable<PointerTouch>, offsetX: number, offsetY: number): void {\r\n    if (\r\n      this.panningSensibility !== 0 &&\r\n      ((this._ctrlKey && this.camera._useCtrlForPanning) || this._isPanClick)\r\n    ) {\r\n       {\r\n        const [deltaX, deltaY] = this.checkIsPanPossible(offsetX, offsetY);\r\n        this.camera.inertialPanningX += -deltaX / this.panningSensibility;\r\n        this.camera.inertialPanningY += deltaY / this.panningSensibility;\r\n        // 두손가락 팬잉\r\n        RenderManager.RenderUpdate();\r\n      }\r\n    } else {\r\n      if (this.swapPanAndRotate) {\r\n        const [deltaX, deltaY] = this.checkIsPanPossible(offsetX, offsetY);\r\n        this.camera.inertialPanningX += -deltaX / this.panningSensibility;\r\n        this.camera.inertialPanningY += deltaY / this.panningSensibility;\r\n        // 한손가락 팬잉\r\n        RenderManager.RenderUpdate();\r\n      } else {\r\n        this.camera.inertialAlphaOffset -= offsetX / this.angularSensibilityX;\r\n        this.camera.inertialBetaOffset -= offsetY / this.angularSensibilityY;\r\n        // 한손가락 로테이션\r\n        RenderManager.RenderUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  public checkIsPanPossible(offsetX: number, offsetY: number): number[] {\r\n    return [offsetX, offsetY];\r\n  }\r\n\r\n  /**\r\n   * Called on pointer POINTERDOUBLETAP event.\r\n   */\r\n  public onDoubleTap() {\r\n    if (this.camera.useInputToRestoreState) {\r\n      this.camera.restoreState();\r\n      // 두번 연속 터치\r\n      RenderManager.RenderUpdate();\r\n    }\r\n  }\r\n\r\n  private startA: { x: number; y: number } = { x: 0, y: 0 };\r\n  private startB: { x: number; y: number } = { x: 0, y: 0 };\r\n\r\n  /**\r\n   * Called on pointer POINTERMOVE event if multiple touches are active.\r\n   * @param pointA\r\n   * @param pointB\r\n   * @param previousPinchSquaredDistance\r\n   * @param pinchSquaredDistance\r\n   * @param previousMultiTouchPanPosition\r\n   * @param multiTouchPanPosition\r\n   */\r\n  public onMultiTouch(\r\n    pointA: Nullable<PointerTouch>,\r\n    pointB: Nullable<PointerTouch>,\r\n    previousPinchSquaredDistance: number,\r\n    pinchSquaredDistance: number,\r\n    previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n    multiTouchPanPosition: Nullable<PointerTouch>\r\n  ): void {\r\n    if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\r\n      // First time this method is called for new pinch.\r\n      // Next time this is called there will be a\r\n      // previousPinchSquaredDistance and pinchSquaredDistance to compare.\r\n      return;\r\n    }\r\n    if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\r\n      // Last time this method is called at the end of a pinch.\r\n      return;\r\n    }\r\n\r\n    // Zoom and panning enabled together\r\n    if (this.multiTouchPanAndZoom) {\r\n      this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\r\n      this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\r\n      RenderManager.RenderUpdate();\r\n\r\n      // Zoom and panning enabled but only one at a time\r\n    } else if (this.multiTouchPanning && this.pinchZoom) {\r\n      this._twoFingerActivityCount++;\r\n\r\n      if (pointA && pointB) {\r\n        if (this._twoFingerActivityCount <= 1) {\r\n          this.startA.x = pointA.x;\r\n          this.startA.y = pointA.y;\r\n          this.startB.x = pointB.x;\r\n          this.startB.y = pointB.y;\r\n          this._isPinching = true;\r\n        } else if (2 <= this._twoFingerActivityCount && this._twoFingerActivityCount <= 10) {\r\n          const vecA = [pointA.x - this.startA.x, pointA.y - this.startA.y];\r\n          const vecB = [pointB.x - this.startB.x, pointB.y - this.startB.y];\r\n          const innerProduct = vecA[0] * vecB[0] + vecA[1] * vecB[1];\r\n          this._isPinching = innerProduct <= 0;\r\n        }\r\n      }\r\n\r\n      if (this._isPinching) {\r\n        // Since pinch has not been active long, assume we intend to zoom.\r\n        this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\r\n        RenderManager.RenderUpdate();\r\n\r\n        // Since we are pinching, remain pinching on next iteration.\r\n        // this._isPinching = true;\r\n      } else {\r\n        // Pause between pinch starting and moving implies not a zoom event. Pan instead.\r\n        this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\r\n        RenderManager.RenderUpdate();\r\n      }\r\n\r\n      // Panning enabled, zoom disabled\r\n    } else if (this.multiTouchPanning) {\r\n      this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\r\n      RenderManager.RenderUpdate();\r\n\r\n      // Zoom enabled, panning disabled\r\n    } else if (this.pinchZoom) {\r\n      this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\r\n      RenderManager.RenderUpdate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called each time a new POINTERDOWN event occurs. Ie, for each button\r\n   * press.\r\n   * @param evt\r\n   */\r\n  public onButtonDown(evt: IPointerEvent): void {\r\n    this._isPanClick = evt.button === this.camera._panningMouseButton;\r\n  }\r\n\r\n  /**\r\n   * Called each time a new POINTERUP event occurs. Ie, for each button\r\n   * release.\r\n   */\r\n  public onButtonUp(): void {\r\n    this._twoFingerActivityCount = 0;\r\n    this._isPinching = false;\r\n  }\r\n\r\n  /**\r\n   * Called when window becomes inactive.\r\n   */\r\n  public onLostFocus(): void {\r\n    this._isPanClick = false;\r\n    this._twoFingerActivityCount = 0;\r\n    this._isPinching = false;\r\n  }\r\n}\r\n(<any>CameraInputTypes)['ArcRotateCameraPointersInput'] = ArcRotateCameraPointersInput;\r\n","import {\r\n  Animation,\r\n  ArcRotateCamera,\r\n  Scene,\r\n  TargetCamera,\r\n  Vector3,\r\n  Viewport,\r\n} from '@babylonjs/core';\r\nimport { CircleEase, EasingFunction } from '@babylonjs/core/Animations/easing';\r\n\r\nimport { generateAnimation, playAnimation, timeToFrame } from '../AnimationHelper';\r\nimport { createEasingFunction, EasingFunctionType, EasingModeType } from '../EasingFunctionType';\r\n\r\nimport { arcToFree, toRadian } from './CameraUtils';\r\n\r\nexport class CameraAnimationHelper {\r\n  private scene: Scene;\r\n\r\n  constructor(scene: Scene) {\r\n    this.scene = scene;\r\n\r\n    this.easingFunction = new CircleEase();\r\n    this.easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEOUT);\r\n  }\r\n\r\n  public moveAnimationTargetCameraWithArcRotate = async (\r\n    camera: TargetCamera,\r\n    target: Vector3,\r\n    alpha: number,\r\n    beta: number,\r\n    radius: number,\r\n    seconds: number\r\n  ) => {\r\n    const { pos, rot } = arcToFree(this.scene, target, alpha, beta, radius);\r\n\r\n    if (seconds <= 0) {\r\n      camera.target = target;\r\n      camera.position = pos;\r\n      camera.upVector = new Vector3(0, 1, 0);\r\n    } else {\r\n      await playAnimation(\r\n        {\r\n          target: camera,\r\n          property: [\r\n            {\r\n              targetProperty: 'position',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.position,\r\n                to: pos,\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'rotation',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.rotation,\r\n                to: rot,\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'upVector',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.upVector,\r\n                to: new Vector3(0, 1, 0),\r\n              },\r\n            },\r\n          ],\r\n          easingFunction: this.getEasingFunction(),\r\n          onAnimationEnd: () => {},\r\n        },\r\n        this.scene\r\n      );\r\n    }\r\n  };\r\n\r\n  public moveAnimationTargetCamera = async (\r\n    camera: TargetCamera,\r\n    pos: Vector3,\r\n    rot: Vector3,\r\n    seconds: number\r\n  ) => {\r\n    if (seconds <= 0) {\r\n      camera.position = pos;\r\n      camera.rotation = rot;\r\n    } else {\r\n      await playAnimation(\r\n        {\r\n          target: camera,\r\n          property: [\r\n            {\r\n              targetProperty: 'position',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.position,\r\n                to: pos,\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'rotation',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.rotation,\r\n                to: rot,\r\n              },\r\n            },\r\n          ],\r\n          easingFunction: this.getEasingFunction(),\r\n          onAnimationEnd: () => {},\r\n        },\r\n        this.scene\r\n      );\r\n    }\r\n  };\r\n\r\n  public moveAnimation = async (\r\n    camera: ArcRotateCamera,\r\n    target: Vector3,\r\n    alpha: number,\r\n    beta: number,\r\n    radius: number,\r\n    seconds: number\r\n  ) => {\r\n    this.resetInertia(camera);\r\n\r\n    const angleLimit = (rad: number): number => {\r\n      if (rad > Math.PI) rad -= 2 * Math.PI;\r\n      if (rad < -Math.PI) rad += 2 * Math.PI;\r\n      return rad;\r\n    };\r\n\r\n    if (seconds <= 0) {\r\n      camera.target = target;\r\n      camera.alpha = angleLimit(alpha);\r\n      camera.beta = beta;\r\n      camera.radius = radius;\r\n    } else {\r\n      await playAnimation(\r\n        {\r\n          target: camera,\r\n          property: [\r\n            {\r\n              targetProperty: 'target',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.target,\r\n                to: target,\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'alpha',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: angleLimit(camera.alpha),\r\n                to: angleLimit(alpha),\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'beta',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.beta,\r\n                to: beta,\r\n              },\r\n            },\r\n            {\r\n              targetProperty: 'radius',\r\n              keyFrame: {\r\n                duration: seconds,\r\n                from: camera.radius,\r\n                to: radius,\r\n              },\r\n            },\r\n          ],\r\n          easingFunction: this.getEasingFunction(),\r\n          onAnimationEnd: () => {},\r\n        },\r\n        this.scene\r\n      );\r\n    }\r\n  };\r\n\r\n  public changeAlphaWithAnimation = (\r\n    alphaFrom: number,\r\n    alphaTo: number,\r\n    camera: ArcRotateCamera\r\n  ) => {\r\n    this.resetInertia(camera);\r\n\r\n    playAnimation(\r\n      {\r\n        target: camera,\r\n        property: {\r\n          targetProperty: 'alpha',\r\n          keyFrame: {\r\n            duration: 0.2,\r\n            from: alphaFrom,\r\n            to: alphaTo,\r\n          },\r\n        },\r\n        easingFunction: this.getEasingFunction(),\r\n      },\r\n      this.scene\r\n    );\r\n  };\r\n\r\n  public positionAnimation = (\r\n    camera: TargetCamera,\r\n    position: Vector3,\r\n    seconds: number,\r\n    stopCurrent?: boolean\r\n  ) => {\r\n    playAnimation(\r\n      {\r\n        target: camera,\r\n        property: [\r\n          {\r\n            targetProperty: 'position',\r\n            keyFrame: {\r\n              duration: seconds,\r\n              from: camera.position,\r\n              to: position,\r\n            },\r\n          },\r\n          {\r\n            targetProperty: 'target',\r\n            keyFrame: {\r\n              duration: seconds,\r\n              from: camera.target,\r\n              to: camera.target,\r\n            },\r\n          },\r\n        ],\r\n        easingFunction: this.getEasingFunction(),\r\n      },\r\n      this.scene,\r\n      stopCurrent\r\n    );\r\n  };\r\n\r\n  public zoomAnimation = (\r\n    camera: ArcRotateCamera,\r\n    radius: number,\r\n    target: Vector3,\r\n    seconds: number,\r\n    stopCurrent?: boolean\r\n  ) => {\r\n    this.resetInertia(camera);\r\n\r\n    playAnimation(\r\n      {\r\n        target: camera,\r\n        property: [\r\n          {\r\n            targetProperty: 'radius',\r\n            keyFrame: {\r\n              duration: seconds,\r\n              from: camera.radius,\r\n              to: radius,\r\n            },\r\n          },\r\n          {\r\n            targetProperty: 'target',\r\n            keyFrame: {\r\n              duration: seconds,\r\n              from: camera.target,\r\n              to: target,\r\n            },\r\n          },\r\n        ],\r\n        easingFunction: this.getEasingFunction(),\r\n      },\r\n      this.scene,\r\n      stopCurrent\r\n    );\r\n  };\r\n\r\n  public viewportAnimation = (\r\n    camera: TargetCamera,\r\n    startViewport: Viewport,\r\n    endViewport: Viewport,\r\n    second: number,\r\n    onEnd?: () => void\r\n  ) => {\r\n    playAnimation(\r\n      {\r\n        target: camera.viewport,\r\n        property: [\r\n          {\r\n            targetProperty: 'x',\r\n            keyFrame: {\r\n              duration: second,\r\n              from: startViewport.x,\r\n              to: endViewport.x,\r\n            },\r\n          },\r\n          {\r\n            targetProperty: 'y',\r\n            keyFrame: {\r\n              duration: second,\r\n              from: startViewport.y,\r\n              to: endViewport.y,\r\n            },\r\n          },\r\n          {\r\n            targetProperty: 'width',\r\n            keyFrame: {\r\n              duration: second,\r\n              from: startViewport.width,\r\n              to: endViewport.width,\r\n            },\r\n          },\r\n          {\r\n            targetProperty: 'height',\r\n            keyFrame: {\r\n              duration: second,\r\n              from: startViewport.height,\r\n              to: endViewport.height,\r\n            },\r\n          },\r\n        ],\r\n        onAnimationEnd: onEnd,\r\n      },\r\n      this.scene\r\n    );\r\n  };\r\n\r\n  public static async toOtherCameraState(\r\n    camera: TargetCamera,\r\n    destination: TargetCamera,\r\n    scene: Scene,\r\n    duration: number\r\n  ) {\r\n    const endFrame = timeToFrame(duration);\r\n\r\n    const animPos = generateAnimation('position', Animation.ANIMATIONTYPE_VECTOR3);\r\n    animPos.setKeys([\r\n      { frame: 0, value: camera.position },\r\n      { frame: endFrame, value: destination.position },\r\n    ]);\r\n    camera.animations.push(animPos);\r\n\r\n    const animFov = generateAnimation('fov', Animation.ANIMATIONTYPE_FLOAT);\r\n    animFov.setKeys([\r\n      { frame: 0, value: camera.fov },\r\n      { frame: endFrame, value: destination.fov },\r\n    ]);\r\n    camera.animations.push(animFov);\r\n\r\n    const animRot = generateAnimation('rotation', Animation.ANIMATIONTYPE_VECTOR3);\r\n    const rot1 = camera.rotation;\r\n    const rot2 = destination.rotationQuaternion.toEulerAngles();\r\n    if (rot2.y < 0) rot2.y += 360 * toRadian;\r\n    animRot.setKeys([\r\n      { frame: 0, value: rot1 },\r\n      { frame: endFrame, value: rot2 },\r\n    ]);\r\n    camera.animations.push(animRot);\r\n\r\n    const animatable = scene.beginAnimation(camera, 0, timeToFrame(duration), false);\r\n\r\n    await animatable.waitAsync();\r\n  }\r\n\r\n  private resetInertia = (camera: ArcRotateCamera) => {\r\n    camera.inertialAlphaOffset = 0;\r\n    camera.inertialBetaOffset = 0;\r\n    camera.inertialPanningX = 0;\r\n    camera.inertialPanningY = 0;\r\n  };\r\n\r\n  private easingFunction: EasingFunction;\r\n\r\n  private getEasingFunction = (): EasingFunction => {\r\n    return this.easingFunction;\r\n  };\r\n\r\n  public setEasingFunction = (functionType: EasingFunctionType, mode: EasingModeType): void => {\r\n    this.easingFunction = createEasingFunction(functionType, mode);\r\n  };\r\n}\r\n","import { Axis, FreeCamera, Node, Quaternion, Vector3 } from '@babylonjs/core';\r\n\r\nimport { FreeCameraDeviceOrientationInput } from './freeCameraDeviceOrientationInput';\r\n\r\nimport type { Scene } from '@babylonjs/core';\r\n\r\nNode.AddNodeConstructor('DeviceOrientationCamera', (name, scene) => {\r\n  return () => new DeviceOrientationCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n// We're mainly based on the logic defined into the FreeCamera code\r\n/**\r\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\r\n * being tilted forward or back and left or right.\r\n */\r\nexport class DeviceOrientationCamera extends FreeCamera {\r\n  private _initialQuaternion!: Quaternion;\r\n  private _quaternionCache: Quaternion;\r\n  private _tmpDragQuaternion = new Quaternion();\r\n  private _disablePointerInputWhenUsingDeviceOrientation = true;\r\n\r\n  /**\r\n   * Creates a new device orientation camera\r\n   * @param name The name of the camera\r\n   * @param position The start position camera\r\n   * @param scene The scene the camera belongs to\r\n   */\r\n  constructor(name: string, position: Vector3, scene?: Scene) {\r\n    super(name, position, scene);\r\n    this._quaternionCache = new Quaternion();\r\n    this.inputs.addDeviceOrientation();\r\n\r\n    // this.addInputCallback();\r\n  }\r\n\r\n  public addCustomInput(customInput: FreeCameraDeviceOrientationInput) {\r\n    this._customInput = customInput;\r\n    this.inputs.add(customInput);\r\n\r\n    this.addCallbackToCustomInput();\r\n  }\r\n\r\n  private _customInput?: FreeCameraDeviceOrientationInput;\r\n\r\n  private addCallbackToCustomInput = () => {\r\n    // When the orientation sensor fires it's first event, disable mouse input\r\n    if (this._customInput) {\r\n        this._customInput._onDeviceOrientationChangedObservable.addOnce(() => {\r\n          if (this._disablePointerInputWhenUsingDeviceOrientation) {\r\n            if (this.inputs._mouseInput) {\r\n              this.inputs._mouseInput._allowCameraRotation = false;\r\n              this.inputs._mouseInput.onPointerMovedObservable.add((e) => {\r\n                if (this._dragFactor != 0) {\r\n                  if (!this._initialQuaternion) {\r\n                    this._initialQuaternion = new Quaternion();\r\n                  }\r\n                  // Rotate the initial space around the y axis to allow users to \"turn around\" via touch/mouse\r\n                  Quaternion.FromEulerAnglesToRef(\r\n                    0,\r\n                    e.offsetX * this._dragFactor,\r\n                    0,\r\n                    this._tmpDragQuaternion\r\n                  );\r\n                  this._initialQuaternion.multiplyToRef(\r\n                    this._tmpDragQuaternion,\r\n                    this._initialQuaternion\r\n                  );\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Gets or sets a boolean indicating that pointer input must be disabled on first orientation sensor update (Default: true)\r\n   */\r\n  public get disablePointerInputWhenUsingDeviceOrientation() {\r\n    return this._disablePointerInputWhenUsingDeviceOrientation;\r\n  }\r\n\r\n  public set disablePointerInputWhenUsingDeviceOrientation(value: boolean) {\r\n    this._disablePointerInputWhenUsingDeviceOrientation = value;\r\n  }\r\n\r\n  private _dragFactor = 0;\r\n  /**\r\n   * Enabled turning on the y axis when the orientation sensor is active\r\n   * @param dragFactor the factor that controls the turn speed (default: 1/300)\r\n   */\r\n  public enableHorizontalDragging(dragFactor = 1 / 300) {\r\n    this._dragFactor = dragFactor;\r\n  }\r\n\r\n  /**\r\n   * Gets the current instance class name (\"DeviceOrientationCamera\").\r\n   * This helps avoiding instanceof at run time.\r\n   * @returns the class name\r\n   */\r\n  public getClassName(): string {\r\n    return 'DeviceOrientationCamera';\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * Checks and applies the current values of the inputs to the camera. (Internal use only)\r\n   */\r\n  public _checkInputs(): void {\r\n    super._checkInputs();\r\n    this._quaternionCache.copyFrom(this.rotationQuaternion);\r\n    if (this._initialQuaternion) {\r\n      this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the camera to its default orientation on the specified axis only.\r\n   * @param axis The axis to reset\r\n   */\r\n  public resetToCurrentRotation(axis: Axis = Axis.Y): void {\r\n    //can only work if this camera has a rotation quaternion already.\r\n    if (!this.rotationQuaternion) {\r\n      return;\r\n    }\r\n\r\n    if (!this._initialQuaternion) {\r\n      this._initialQuaternion = new Quaternion();\r\n    }\r\n\r\n    this._initialQuaternion.copyFrom(this._quaternionCache || this.rotationQuaternion);\r\n\r\n    ['x', 'y', 'z'].forEach((axisName) => {\r\n      if (!(<any>axis)[axisName]) {\r\n        (<any>this._initialQuaternion)[axisName] = 0;\r\n      } else {\r\n        (<any>this._initialQuaternion)[axisName] *= -1;\r\n      }\r\n    });\r\n    this._initialQuaternion.normalize();\r\n    //force rotation update\r\n    this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n  }\r\n}\r\n","import { CameraInputTypes, Observable, Quaternion, Tools, Vector3 } from '@babylonjs/core';\r\n\r\nimport { toAngle, toRadian } from './CameraUtils';\r\n\r\nimport type { FreeCamera, ICameraInput, Nullable } from '@babylonjs/core';\r\n\r\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraDeviceOrientationInput implements ICameraInput<FreeCamera> {\r\n  private _camera!: FreeCamera;\r\n\r\n  private _screenOrientationAngle: number = 0;\r\n\r\n  private _constantTranform: Quaternion;\r\n  private _screenQuaternion: Quaternion = new Quaternion();\r\n\r\n  private _initAlpha: number = 0;\r\n  private _alpha: number = 0;\r\n  private _beta: number = 0;\r\n  private _gamma: number = 0;\r\n\r\n  /** alpha+beta+gamma smoothing. 0: no smoothing, 1: new data ignored, 0.9 recommended for smoothing */\r\n  public smoothFactor: number = 0;\r\n\r\n  /**\r\n   * Can be used to detect if a device orientation sensor is available on a device\r\n   * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n   * @returns a promise that will resolve on orientation change\r\n   */\r\n  public static WaitForOrientationChangeAsync(timeout?: number): Promise<void> {\r\n    return new Promise((res, rej) => {\r\n      let gotValue = false;\r\n      const eventHandler = () => {\r\n        window.removeEventListener('deviceorientation', eventHandler);\r\n        gotValue = true;\r\n        res();\r\n      };\r\n\r\n      // If timeout is populated reject the promise\r\n      if (timeout) {\r\n        setTimeout(() => {\r\n          if (!gotValue) {\r\n            window.removeEventListener('deviceorientation', eventHandler);\r\n            rej('WaitForOrientationChangeAsync timed out');\r\n          }\r\n        }, timeout);\r\n      }\r\n\r\n      if (\r\n        typeof DeviceOrientationEvent !== 'undefined' &&\r\n        typeof (<any>DeviceOrientationEvent).requestPermission === 'function'\r\n      ) {\r\n        (<any>DeviceOrientationEvent)\r\n          .requestPermission()\r\n          .then((response: string) => {\r\n            if (response == 'granted') {\r\n              window.addEventListener('deviceorientation', eventHandler);\r\n            } else {\r\n              Tools.Warn('Permission not granted.');\r\n            }\r\n          })\r\n          .catch((error: any) => {\r\n            Tools.Error(error);\r\n          });\r\n      } else {\r\n        window.addEventListener('deviceorientation', eventHandler);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public _onDeviceOrientationChangedObservable = new Observable<void>();\r\n  /**\r\n   * Instantiates a new input\r\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n   */\r\n  constructor(initDir?: Vector3) {\r\n    // 최초 시작 각도를 설정할 수 있도록 한다\r\n    if (initDir) {\r\n      const dirNormal = initDir.normalize();\r\n      this._initAlpha = (Math.atan2(dirNormal.z, dirNormal.x) * toAngle - 90 + 360) % 360;\r\n    }\r\n\r\n    this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n    this._orientationChanged();\r\n  }\r\n\r\n  /**\r\n   * Define the camera controlled by the input.\r\n   */\r\n  public get camera(): FreeCamera {\r\n    return this._camera;\r\n  }\r\n\r\n  public set camera(camera: FreeCamera) {\r\n    this._camera = camera;\r\n    if (this._camera != null && !this._camera.rotationQuaternion) {\r\n      this._camera.rotationQuaternion = new Quaternion();\r\n    }\r\n    if (this._camera) {\r\n      this._camera.onDisposeObservable.add(() => {\r\n        this._onDeviceOrientationChangedObservable.clear();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\r\n  public attachControl(): void {\r\n    const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n    if (hostWindow) {\r\n      const eventHandler = () => {\r\n        hostWindow!.addEventListener('orientationchange', this._orientationChanged);\r\n        hostWindow!.addEventListener('deviceorientation', this._deviceOrientation);\r\n        //In certain cases, the attach control is called AFTER orientation was changed,\r\n        //So this is needed.\r\n        this._orientationChanged();\r\n      };\r\n      if (\r\n        typeof DeviceOrientationEvent !== 'undefined' &&\r\n        typeof (<any>DeviceOrientationEvent).requestPermission === 'function'\r\n      ) {\r\n        (<any>DeviceOrientationEvent)\r\n          .requestPermission()\r\n          .then((response: string) => {\r\n            if (response === 'granted') {\r\n              eventHandler();\r\n            } else {\r\n              Tools.Warn('Permission not granted.');\r\n            }\r\n          })\r\n          .catch((error: any) => {\r\n            Tools.Error(error);\r\n          });\r\n      } else {\r\n        eventHandler();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _orientationChanged = () => {\r\n    this._screenOrientationAngle =\r\n      <any>window.orientation !== undefined\r\n        ? +(<any>window.orientation)\r\n        : (<any>window.screen).orientation && (<any>window.screen).orientation['angle']\r\n        ? (<any>window.screen).orientation.angle\r\n        : 0;\r\n    this._screenOrientationAngle = -Tools.ToRadians(this._screenOrientationAngle / 2);\r\n    this._screenQuaternion.copyFromFloats(\r\n      0,\r\n      Math.sin(this._screenOrientationAngle),\r\n      0,\r\n      Math.cos(this._screenOrientationAngle)\r\n    );\r\n  };\r\n\r\n  private _promiseResolve?: Function;\r\n\r\n  public async getGyroAngles(): Promise<number[]> {\r\n    return new Promise<number[]>((resolve, reject) => {\r\n      this._promiseResolve = resolve;\r\n    });\r\n  }\r\n\r\n  private _adjustAlpha: number = 0;\r\n  private _count = 0;\r\n\r\n  private _deviceOrientation = (evt: DeviceOrientationEvent) => {\r\n    if (evt.alpha && this._count < 10) this._count++;\r\n\r\n    if (this._count === 1 && evt.alpha) {\r\n      // 최초에 들어오는 alpha 를 기준으로 삼는다\r\n      // (나침반 기준 절대방향을 제거, 항상 처음 각도를 기준 0도로 삼기 위해서)\r\n      this._adjustAlpha = evt.alpha;\r\n    }\r\n\r\n    const alphaAdjusted = evt.alpha === null ? null : evt.alpha - this._adjustAlpha + 0.01;\r\n\r\n    if (this.smoothFactor) {\r\n      this._alpha =\r\n        alphaAdjusted !== null\r\n          ? Tools.SmoothAngleChange(this._alpha, alphaAdjusted, this.smoothFactor)\r\n          : 0;\r\n      this._beta =\r\n        evt.beta !== null ? Tools.SmoothAngleChange(this._beta, evt.beta, this.smoothFactor) : 0;\r\n      this._gamma =\r\n        evt.gamma !== null ? Tools.SmoothAngleChange(this._gamma, evt.gamma, this.smoothFactor) : 0;\r\n    } else {\r\n      this._alpha = alphaAdjusted !== null ? (alphaAdjusted + 360) % 360 : 0;\r\n      this._beta = evt.beta !== null ? evt.beta : 0;\r\n      this._gamma = evt.gamma !== null ? evt.gamma : 0;\r\n    }\r\n\r\n    if (evt.alpha !== null) {\r\n      this._onDeviceOrientationChangedObservable.notifyObservers();\r\n    }\r\n\r\n    if (this._count === 2 && evt.alpha) {\r\n      if (this._promiseResolve) {\r\n        this.checkInputs();\r\n        this._promiseResolve([alphaAdjusted, evt.beta, evt.gamma]);\r\n        this._promiseResolve = undefined;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   */\r\n  public detachControl(): void {\r\n    window.removeEventListener('orientationchange', this._orientationChanged);\r\n    window.removeEventListener('deviceorientation', this._deviceOrientation);\r\n    this._alpha = 0;\r\n  }\r\n\r\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\r\n  public checkInputs(): void {\r\n    //if no device orientation provided, don't update the rotation.\r\n    //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\r\n    if (!this._alpha) {\r\n      return;\r\n    }\r\n    Quaternion.RotationYawPitchRollToRef(\r\n      Tools.ToRadians((this._initAlpha + this._alpha) % 360),\r\n      Tools.ToRadians(this._beta),\r\n      -Tools.ToRadians(this._gamma),\r\n      this.camera.rotationQuaternion\r\n    );\r\n    this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\r\n    this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\r\n    //Mirror on XY Plane\r\n    this._camera.rotationQuaternion.z *= -1;\r\n    this._camera.rotationQuaternion.w *= -1;\r\n  }\r\n\r\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\r\n  public getClassName(): string {\r\n    return 'FreeCameraDeviceOrientationInput';\r\n  }\r\n\r\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\r\n  public getSimpleName(): string {\r\n    return 'deviceOrientation';\r\n  }\r\n}\r\n\r\n(<any>CameraInputTypes)['FreeCameraDeviceOrientationInput'] = FreeCameraDeviceOrientationInput;\r\n","import {\r\n  ArcRotateCamera,\r\n  FreeCamera,\r\n  FreeCameraMouseInput,\r\n  FreeCameraTouchInput,\r\n  type Nullable,\r\n  PointerEventTypes,\r\n  PointerInput,\r\n  Scene,\r\n  TargetCamera,\r\n  Vector3,\r\n  Viewport,\r\n} from '@babylonjs/core';\r\n\r\nimport { CameraAngle, CameraControlType, CameraPosition } from '@/data';\r\nimport { RenderManager } from '@/manager';\r\n\r\nimport { ArcRotateCameraPointersInput } from './util/camera/ArcRotateCameraPointersInput';\r\nimport { CameraAnimationHelper } from './util/camera/CameraAnimationHelper';\r\nimport {\r\n  arcToFree,\r\n  freeToArc,\r\n  getFitRadius,\r\n  isPanningPossible,\r\n  toAngle,\r\n  toRadian,\r\n} from './util/camera/CameraUtils';\r\nimport { DeviceOrientationCamera } from './util/camera/deviceOrientationCamera';\r\nimport { FreeCameraDeviceOrientationInput } from './util/camera/freeCameraDeviceOrientationInput';\r\nimport { EasingFunctionType, EasingModeType } from './util/EasingFunctionType';\r\n\r\n// 모든 ZED 카메라의 부모가 되는 abstract 클래스\r\n// 비어있는 함수들, 공통의 targetCamera 기준으로 구현 예정\r\nexport abstract class ZEDCameraBase {\r\n  protected scene: Scene;\r\n  protected animationHelper: CameraAnimationHelper;\r\n\r\n  protected currentEasingFunctionType = EasingFunctionType.CircleEase;\r\n  protected currentEasingMode = EasingModeType.Out;\r\n\r\n  protected defaultTarget: Vector3 = Vector3.Zero();\r\n  protected defaultRadius: number = 3;\r\n  protected defaultAlpha: number = 90 * toRadian;\r\n  protected defaultBeta: number = 0;\r\n  protected defaultFov: number = 0.8;\r\n\r\n  protected fitRadiusWithMargin = 12;\r\n\r\n  protected ext: { min: Vector3; max: Vector3 } | undefined;\r\n\r\n  public static minDistance: number | null = 1;\r\n  public static maxDistance: number | null = null;\r\n\r\n  constructor(scene: Scene) {\r\n    this.scene = scene;\r\n    this.animationHelper = new CameraAnimationHelper(this.scene);\r\n  }\r\n\r\n  public reset() {}\r\n\r\n  public abstract babylonCamera(): TargetCamera;\r\n\r\n  public copyFromCamera(zedcamera: ZEDCameraBase) {\r\n    const refCam = zedcamera.babylonCamera();\r\n    const thisCam = this.babylonCamera();\r\n\r\n    refCam.getWorldMatrix();\r\n\r\n    // 각 카메라별 동작\r\n    if (thisCam instanceof ArcRotateCamera) {\r\n      // lower radius 가 더 큰 경우에는 값이 틀어지므로 먼저 수정\r\n      // (아래 로직보다 먼저 수행)\r\n      const radius = refCam.getTarget().subtract(refCam.position).length();\r\n      if (thisCam.lowerRadiusLimit && radius < thisCam.lowerRadiusLimit) {\r\n        thisCam.lowerRadiusLimit = radius;\r\n        ZEDCameraBase.minDistance = radius;\r\n      }\r\n    } else {\r\n      // free camera 는 upVector 까지 복사\r\n      thisCam.upVector = refCam.upVector;\r\n    }\r\n\r\n    // 공통 연산 (fov, position, target)\r\n    thisCam.fov = refCam.fov;\r\n    thisCam.position = refCam.position;\r\n    thisCam.setTarget(refCam.getTarget());\r\n\r\n    thisCam.getWorldMatrix();\r\n  }\r\n\r\n  public setActive(): void {\r\n    this.scene.activeCamera = this.babylonCamera();\r\n  }\r\n\r\n  public initWithExtends(ext: { min: Vector3; max: Vector3 }, resetAngles = true, seconds = 0.3) {\r\n    this.ext = ext;\r\n\r\n    this.defaultTarget.x = (ext.min.x + ext.max.x) * 0.5;\r\n    this.defaultTarget.y = ext.min.y;\r\n    this.defaultTarget.z = (ext.min.z + ext.max.z) * 0.5;\r\n\r\n    const fitRadius = getFitRadius(this.scene, ext, this.babylonCamera());\r\n    if (!fitRadius) return;\r\n\r\n    const camera = this.babylonCamera();\r\n    camera.getWorldMatrix();\r\n\r\n    const current = freeToArc(\r\n      this.scene,\r\n      camera.position,\r\n      camera.rotation,\r\n      camera.target.subtract(camera.position).length()\r\n    );\r\n\r\n    const alpha = resetAngles ? this.defaultAlpha : current.alpha;\r\n    const beta = resetAngles ? this.defaultBeta : current.beta;\r\n\r\n    this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      this.defaultTarget,\r\n      alpha,\r\n      beta,\r\n      fitRadius,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public renderApply() {\r\n    RenderManager.RenderUpdate();\r\n  }\r\n\r\n  public topFit(ext: { min: Vector3; max: Vector3 }) {\r\n    const camera = this.babylonCamera();\r\n\r\n    const currentDist = camera.position.subtract(this.defaultTarget).length();\r\n    const { pos, rot } = arcToFree(\r\n      this.scene,\r\n      this.defaultTarget,\r\n      this.defaultAlpha,\r\n      this.defaultBeta,\r\n      currentDist\r\n    );\r\n    camera.fov = this.defaultFov;\r\n    camera.position = pos;\r\n    camera.setTarget(this.defaultTarget);\r\n\r\n    this.zoomFit(true, ext);\r\n  }\r\n\r\n  public setCameraLimits(applyLimits = true) {}\r\n\r\n  public setMinMaxDistance(val: { min?: number | null; max?: number | null }) {}\r\n\r\n  public isRemainInertia(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public quaterView(alphaAngle = 45, betaAngle = 45, seconds: number) {\r\n    const alpha = alphaAngle * toRadian;\r\n    const beta = betaAngle * toRadian;\r\n    const r = this.fitRadiusWithMargin;\r\n    this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      this.defaultTarget,\r\n      alpha,\r\n      beta,\r\n      r,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public quaterViewFit(\r\n    alphaAngle = 45,\r\n    betaAngle = 45,\r\n    seconds: number,\r\n    zoomPercent: number,\r\n    ext: { min: Vector3; max: Vector3 }\r\n  ) {\r\n    const alpha = alphaAngle * toRadian;\r\n    const beta = betaAngle * toRadian;\r\n    const r = getFitRadius(this.scene, ext, this.babylonCamera());\r\n    const ratio = 1 + (100 - zoomPercent) / 100;\r\n\r\n    if (r === undefined) return;\r\n    this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      this.defaultTarget,\r\n      alpha,\r\n      beta,\r\n      r * ratio,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public zoomIn(percent = 30, seconds = 0.3) {\r\n    if (percent < 0) {\r\n      return;\r\n    }\r\n    const camera = this.babylonCamera();\r\n    camera.getWorldMatrix();\r\n    const pos = camera.position.clone();\r\n    const target = camera.target.clone();\r\n    const dir = pos.subtract(target).normalize();\r\n\r\n    const curDist = pos.subtract(target).length();\r\n    const newDist = curDist * (1 - percent / 100);\r\n\r\n    const newPos = target.add(dir.scale(newDist));\r\n\r\n    this.animationHelper.positionAnimation(camera, newPos, seconds);\r\n  }\r\n\r\n  public zoomOut(percent = 30, seconds = 0.3) {\r\n    if (percent < 0) {\r\n      return;\r\n    }\r\n\r\n    const camera = this.babylonCamera();\r\n    camera.getWorldMatrix();\r\n    const pos = camera.position.clone();\r\n    const target = camera.target.clone();\r\n    const dir = pos.subtract(target).normalize();\r\n\r\n    const curDist = pos.subtract(target).length();\r\n    const newDist = curDist * (1 + percent / 100);\r\n\r\n    const newPos = target.add(dir.scale(newDist));\r\n\r\n    this.animationHelper.positionAnimation(camera, newPos, seconds);\r\n  }\r\n\r\n  public setDistance(distance = 3, seconds = 0.3) {\r\n    const camera = this.babylonCamera();\r\n    camera.getWorldMatrix();\r\n    const pos = camera.position.clone();\r\n    const target = camera.target.clone();\r\n    const dir = pos.subtract(target).normalize();\r\n    const newPos = target.add(dir.scale(distance));\r\n\r\n    this.animationHelper.positionAnimation(camera, newPos, seconds);\r\n  }\r\n\r\n  public zoomFitOnInit(ext: { min: Vector3; max: Vector3 }) {}\r\n\r\n  protected zoomFit(useAnimation = false, ext: { min: Vector3; max: Vector3 }) {\r\n    const fitRadius = getFitRadius(this.scene, ext, this.babylonCamera());\r\n    if (fitRadius === undefined) {\r\n      return;\r\n    }\r\n\r\n    const camera = this.babylonCamera();\r\n    camera.getWorldMatrix();\r\n    camera.target = this.defaultTarget;\r\n\r\n    const pos = camera.position.clone();\r\n    const target = camera.target.clone();\r\n    const dir = pos.subtract(target).normalize();\r\n    const newPos = target.add(dir.scale(fitRadius));\r\n\r\n    this.animationHelper.positionAnimation(camera, newPos, 0.4);\r\n\r\n    if (useAnimation) {\r\n      this.animationHelper.positionAnimation(camera, newPos, 0.4);\r\n    } else {\r\n      camera.position = newPos;\r\n    }\r\n  }\r\n\r\n  public async moveTo(\r\n    pos: CameraPosition,\r\n    cameraAngle: CameraAngle,\r\n    isRelativeAngle = false,\r\n    seconds = 1\r\n  ) {\r\n    let startVec = new Vector3(0, 0, -1);\r\n    if (isRelativeAngle) {\r\n      startVec = this.babylonCamera().target.subtract(this.babylonCamera().position).normalize();\r\n    }\r\n    const [alpha, beta] = cameraAngle.getRotatedAlphaBetaAsRadianFrom(startVec);\r\n    const vec = CameraAngle.convertToVectorFromAlphaBetaRadian(alpha, beta);\r\n    const convertedPos = new Vector3(-pos.x, pos.h, -pos.y);\r\n    this.babylonCamera().getWorldMatrix();\r\n    let target = this.babylonCamera().target.clone();\r\n    let newPos = this.babylonCamera().position.clone();\r\n    if (pos.isRelative) {\r\n      newPos = this.babylonCamera().position.add(convertedPos);\r\n      target = newPos.subtract(vec.scale(-1));\r\n    } else {\r\n      target = convertedPos.add(vec);\r\n      newPos = target.subtract(vec);\r\n    }\r\n    const newRadius = Vector3.Distance(newPos, target);\r\n\r\n    await this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      target,\r\n      alpha,\r\n      beta,\r\n      1,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public async moveToCameraTarget(\r\n    position: Vector3,\r\n    forward: Vector3,\r\n    cameraAngle: CameraAngle,\r\n    dist: number,\r\n    seconds = 1,\r\n    fromForward = true\r\n  ) {\r\n    const startVec = fromForward ? forward.clone().normalize().scale(-1) : new Vector3(0, 0, -1);\r\n    const [alpha, beta] = cameraAngle.getRotatedAlphaBetaAsRadianFrom(startVec);\r\n    const target = position;\r\n\r\n    await this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      target,\r\n      alpha,\r\n      beta,\r\n      dist,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public async moveToCoordinate(position: Vector3, rotation: Vector3, seconds = 1) {\r\n    await this.animationHelper.moveAnimationTargetCamera(\r\n      this.babylonCamera(),\r\n      position,\r\n      rotation,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public topViewFit(seconds = 0.3, ext: { min: Vector3; max: Vector3 }) {\r\n    const target = this.defaultTarget;\r\n    const radius = getFitRadius(this.scene, ext, this.babylonCamera());\r\n    if (radius === undefined) {\r\n      return;\r\n    }\r\n    this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      target,\r\n      this.defaultAlpha,\r\n      this.defaultBeta,\r\n      radius,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public topViewCustom(\r\n    x: number,\r\n    y: number,\r\n    zoomPercent: number,\r\n    rotation: number,\r\n    seconds = 0.3,\r\n    ext: { min: Vector3; max: Vector3 }\r\n  ) {\r\n    if (zoomPercent <= 0) {\r\n      return;\r\n    }\r\n    const target = this.defaultTarget;\r\n    const newTarget = new Vector3(target.x - x, target.y, target.z - y);\r\n    const radius = getFitRadius(this.scene, ext, this.babylonCamera());\r\n    if (radius === undefined) {\r\n      return;\r\n    }\r\n    const ratio = 1 + (100 - zoomPercent) / 100;\r\n    this.animationHelper.moveAnimationTargetCameraWithArcRotate(\r\n      this.babylonCamera(),\r\n      newTarget,\r\n      this.defaultAlpha + rotation * toRadian,\r\n      this.defaultBeta,\r\n      radius * ratio,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public setEasingFunction(functionType: EasingFunctionType, mode: EasingModeType): void {\r\n    if (functionType === this.currentEasingFunctionType && mode === this.currentEasingMode) {\r\n      return;\r\n    }\r\n    this.currentEasingFunctionType = functionType;\r\n    this.currentEasingMode = mode;\r\n    this.animationHelper.setEasingFunction(functionType, mode);\r\n  }\r\n\r\n  public getCurrentEasingSetting(): [EasingFunctionType, EasingModeType] {\r\n    return [this.currentEasingFunctionType, this.currentEasingMode];\r\n  }\r\n\r\n  public setViewport(to: Viewport): void {\r\n    Object.assign(this.babylonCamera().viewport, to);\r\n  }\r\n\r\n  public getViewport(): Viewport {\r\n    return this.babylonCamera().viewport;\r\n  }\r\n\r\n  public transformViewport(from: Viewport, to: Viewport, frame: number, onEnd?: () => void): void {\r\n    this.animationHelper.viewportAnimation(this.babylonCamera(), from, to, frame, onEnd);\r\n  }\r\n\r\n  public enableControl(enable: boolean): void {\r\n    this.babylonCamera().inputs.removeByType('FreeCameraMouseInput');\r\n\r\n    if (enable) {\r\n      this.babylonCamera().inputs.add(new FreeCameraMouseInput());\r\n    }\r\n  }\r\n\r\n  public moveToPosition(pos: Nullable<Vector3> | undefined, dir?: Vector3): void {\r\n    const camera = this.babylonCamera();\r\n    if (pos) {\r\n      camera.position = new Vector3(pos.x, 1.6, pos.z);\r\n      if (dir) {\r\n        camera.setTarget(camera.position.add(dir.normalize()));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class ZEDFreeCamera extends ZEDCameraBase {\r\n  private camera: FreeCamera;\r\n\r\n  constructor(scene: Scene) {\r\n    super(scene);\r\n\r\n    this.camera = new FreeCamera('free', Vector3.Zero(), this.scene);\r\n\r\n    this.camera.fov = 1.2;\r\n    this.camera.inertia = 0;\r\n    this.camera.minZ = 0.1;\r\n    this.camera.attachControl(undefined, true);\r\n  }\r\n\r\n  public override babylonCamera(): TargetCamera {\r\n    return this.camera;\r\n  }\r\n}\r\n\r\nexport class ZEDGyroCamera extends ZEDCameraBase {\r\n  private camera: DeviceOrientationCamera;\r\n\r\n  private _customInput: FreeCameraDeviceOrientationInput;\r\n\r\n  constructor(scene: Scene, pos?: Vector3, dir?: Vector3) {\r\n    super(scene);\r\n\r\n    const startPos = new Vector3(2.2, 1.6, -1);\r\n    if (pos) {\r\n      startPos.x = pos.x;\r\n      startPos.z = pos.z;\r\n    }\r\n    this.camera = new DeviceOrientationCamera('gyro', startPos, this.scene);\r\n\r\n    this.camera.inputs.removeByType('FreeCameraDeviceOrientationInput');\r\n    this._customInput = new FreeCameraDeviceOrientationInput(dir);\r\n\r\n    this.camera.addCustomInput(this._customInput);\r\n\r\n    this.camera.fov = 1.2;\r\n    this.camera.inertia = 0;\r\n    this.camera.minZ = 0.1;\r\n    this.camera.attachControl(undefined, true);\r\n    this.camera.enableHorizontalDragging(-2 / 300);\r\n  }\r\n\r\n  public async getGyroAngles(): Promise<number[]> {\r\n    return this._customInput.getGyroAngles();\r\n  }\r\n\r\n  public override babylonCamera(): TargetCamera {\r\n    return this.camera;\r\n  }\r\n\r\n  public override moveToPosition(pos: Nullable<Vector3> | undefined, dir?: Vector3): void {\r\n    if (pos) {\r\n      this.camera.position = new Vector3(pos.x, 1.6, pos.z);\r\n      if (dir) {\r\n        this.camera.target = this.camera.position.add(dir.normalize());\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class ZEDCamera extends ZEDCameraBase {\r\n  private camera: ArcRotateCamera;\r\n\r\n  constructor(scene: Scene) {\r\n    super(scene);\r\n\r\n    const createArcRotateCamera = true;\r\n    const replace = true;\r\n    const attachCameraControls = true;\r\n    scene.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\r\n    this.camera = this.scene.activeCamera as ArcRotateCamera;\r\n\r\n    this.initializeArcRotateCamera();\r\n  }\r\n\r\n  private initializeArcRotateCamera() {\r\n    this.setDefault();\r\n\r\n    this.setCameraLimits();\r\n\r\n    // Camera Acceleration down (default : 0.9)\r\n    this.camera.inertia = 0.3;\r\n    this.camera.panningInertia = 0.3;\r\n\r\n    const pointersInput = this.createPointersInput();\r\n\r\n    // Pan - Rotate swap (Pan with one finger)\r\n    this.camera.inputs.removeByType('ArcRotateCameraPointersInput');\r\n    this.camera.inputs.add(pointersInput);\r\n\r\n    this.applyCameraSpeed();\r\n\r\n    // Z-fighting 방지용 near 세팅 (0.05 를 최소로, 거리가 멀면 더 길게)\r\n    this.camera.minZ = 0.05;\r\n    this.camera.onViewMatrixChangedObservable.add((camera, es) => {\r\n      if (camera instanceof ArcRotateCamera) {\r\n        camera.minZ = camera.radius * 0.005; // 10m 기준 0.05 min 값 가지도록\r\n        if (camera.radius > 20) camera.minZ += 0.1; // 충분히 멀 경우는 넉넉하게\r\n        camera.minZ = Math.max(camera.minZ, 0.05); // 최소값 0.05\r\n      }\r\n    });\r\n  }\r\n\r\n  public override babylonCamera(): TargetCamera {\r\n    return this.camera;\r\n  }\r\n\r\n  private cameraTypeSetting = CameraControlType.AllEach;\r\n\r\n  private defaultLowerBetaLimit = 2 * toRadian;\r\n  private defaultUpperBetaLimit = 90 * toRadian;\r\n\r\n  public override initWithExtends(\r\n    ext: { min: Vector3; max: Vector3 },\r\n    resetAngles = true,\r\n    seconds = 0.3\r\n  ) {\r\n    this.ext = ext;\r\n\r\n    this.defaultTarget.x = (ext.min.x + ext.max.x) * 0.5;\r\n    this.defaultTarget.y = ext.min.y;\r\n    this.defaultTarget.z = (ext.min.z + ext.max.z) * 0.5;\r\n\r\n    const fitRadius = getFitRadius(this.scene, ext, this.camera);\r\n    if (!fitRadius) return;\r\n\r\n    const alpha = resetAngles ? this.defaultAlpha : this.camera.alpha;\r\n    const beta = resetAngles ? this.defaultBeta : this.camera.beta;\r\n\r\n    this.animationHelper.moveAnimation(\r\n      this.camera,\r\n      this.defaultTarget,\r\n      alpha,\r\n      beta,\r\n      fitRadius,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  private setSceneEvents() {\r\n    // Add double-tap handler\r\n    const scene = this.scene;\r\n    const camera = this.camera;\r\n    const fitRadiusWithMargin = this.fitRadiusWithMargin;\r\n    const zoomInToPoint = this.zoomInToPoint;\r\n    const restoreCameraWithRotationHold = this.restoreCameraWithRotationHold;\r\n    const renderUpdate = () => RenderManager.RenderUpdate();\r\n    scene.onPointerObservable.add((evt) => {\r\n      switch (evt.type) {\r\n        case PointerEventTypes.POINTERDOUBLETAP:\r\n          if (evt.pickInfo?.pickedPoint) {\r\n            const currentRadius = camera.radius;\r\n            if (currentRadius >= fitRadiusWithMargin * 0.95) {\r\n              zoomInToPoint(camera, evt.pickInfo?.pickedPoint);\r\n            } else {\r\n              restoreCameraWithRotationHold(camera);\r\n            }\r\n          }\r\n          break;\r\n        case PointerEventTypes.POINTERWHEEL:\r\n          renderUpdate();\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  private setDefault() {\r\n    this.camera.target = this.defaultTarget;\r\n    this.camera.radius = this.defaultRadius;\r\n    this.camera.alpha = this.defaultAlpha;\r\n    this.camera.beta = this.defaultBeta;\r\n    this.camera.fov = this.defaultFov;\r\n  }\r\n\r\n  public override topFit(ext: { min: Vector3; max: Vector3 }) {\r\n    this.camera.target = this.defaultTarget;\r\n    this.camera.alpha = this.defaultAlpha;\r\n    this.camera.beta = this.defaultBeta;\r\n    this.camera.fov = this.defaultFov;\r\n\r\n    this.zoomFit(true, ext);\r\n  }\r\n\r\n  private setCameraType(val: number) {\r\n    this.cameraTypeSetting = val;\r\n  }\r\n\r\n  private panSpeedAdjust = 2;\r\n  private rotationSpeedAdjust = 2;\r\n  private zoomSpeedAdjust = 0;\r\n\r\n  private setCameraSpeedOption(panSpeed: number, rotationSpeed: number, zoomSpeed: number) {\r\n    this.panSpeedAdjust = panSpeed;\r\n    this.rotationSpeedAdjust = rotationSpeed;\r\n    this.zoomSpeedAdjust = zoomSpeed;\r\n\r\n    this.applyCameraSpeed();\r\n  }\r\n\r\n  private applyCameraSpeed() {\r\n    // small is faster (default : 1000)\r\n    this.camera.panningSensibility = 150 * Math.pow(0.7, this.panSpeedAdjust);\r\n    // small is faster (default : 12)\r\n    this.camera.pinchPrecision = 36 * Math.pow(0.7, this.zoomSpeedAdjust);\r\n    // small is faster (default : 1000)\r\n    this.camera.angularSensibilityX = 500 * Math.pow(0.7, this.rotationSpeedAdjust);\r\n    this.camera.angularSensibilityY = 500 * Math.pow(0.7, this.rotationSpeedAdjust);\r\n  }\r\n\r\n  public override setCameraLimits(applyLimits = true) {\r\n    this.camera.lowerBetaLimit = applyLimits ? this.defaultLowerBetaLimit : null;\r\n    this.camera.upperBetaLimit = applyLimits ? this.defaultUpperBetaLimit : null;\r\n    this.camera.lowerRadiusLimit = applyLimits ? ZEDCameraBase.minDistance : null;\r\n  }\r\n\r\n  public override setMinMaxDistance(value: { min?: number | null; max?: number | null }) {\r\n    if (value.min !== undefined) {\r\n      ZEDCameraBase.minDistance = value.min;\r\n      this.camera.lowerRadiusLimit = value.min;\r\n    }\r\n    if (value.max !== undefined) {\r\n      ZEDCameraBase.maxDistance = value.max;\r\n      this.camera.upperRadiusLimit = value.max;\r\n    }\r\n  }\r\n\r\n  public recoverMinMaxDistance() {\r\n    this.setMinMaxDistance({ min: ZEDCameraBase.minDistance, max: ZEDCameraBase.maxDistance });\r\n  }\r\n\r\n  private setCameraValue(ext: { min: Vector3; max: Vector3 }) {\r\n    this.initializeArcRotateCamera();\r\n\r\n    // set max radius\r\n    const fitRadius = getFitRadius(this.scene, ext, this.camera);\r\n    if (fitRadius !== undefined) {\r\n      this.camera.upperRadiusLimit = fitRadius * 1.5;\r\n      this.fitRadiusWithMargin = fitRadius;\r\n    } else {\r\n      throw new Error('Fail to get fitRadius in setCameraValue');\r\n    }\r\n  }\r\n\r\n  private createPointersInput() {\r\n    const pointersInput = new ArcRotateCameraPointersInput();\r\n\r\n    pointersInput.checkIsPanPossible = (offsetX: number, offsetY: number) => {\r\n      return isPanningPossible(offsetX, offsetY, this.scene, this.camera);\r\n    };\r\n\r\n    const cameraTypeSetting = this.cameraTypeSetting;\r\n    if (\r\n      cameraTypeSetting === CameraControlType.PanZoom ||\r\n      cameraTypeSetting === CameraControlType.PanRotate\r\n    ) {\r\n      pointersInput.swapPanAndRotate = true;\r\n      pointersInput.multiTouchPanAndZoom = false;\r\n      if (cameraTypeSetting === CameraControlType.PanZoom) {\r\n        pointersInput.multiTouchPanning = false;\r\n        pointersInput.pinchZoom = true;\r\n      } else {\r\n        pointersInput.multiTouchPanning = true;\r\n        pointersInput.pinchZoom = false;\r\n      }\r\n    } else if (\r\n      cameraTypeSetting === CameraControlType.RotateZoom ||\r\n      cameraTypeSetting === CameraControlType.RotatePan\r\n    ) {\r\n      pointersInput.swapPanAndRotate = false;\r\n      pointersInput.multiTouchPanAndZoom = false;\r\n      if (cameraTypeSetting === CameraControlType.RotateZoom) {\r\n        pointersInput.multiTouchPanning = false;\r\n        pointersInput.pinchZoom = true;\r\n      } else {\r\n        pointersInput.multiTouchPanning = true;\r\n        pointersInput.pinchZoom = false;\r\n      }\r\n    } else if (\r\n      cameraTypeSetting === CameraControlType.AllAll ||\r\n      cameraTypeSetting === CameraControlType.AllEach\r\n    ) {\r\n      pointersInput.swapPanAndRotate = false;\r\n      pointersInput.multiTouchPanAndZoom = cameraTypeSetting === CameraControlType.AllAll;\r\n      pointersInput.multiTouchPanning = true;\r\n      pointersInput.pinchZoom = true;\r\n    }\r\n    return pointersInput;\r\n  }\r\n\r\n  public override isRemainInertia(): boolean {\r\n    return (\r\n      this.camera.inertialAlphaOffset !== 0 ||\r\n      this.camera.inertialBetaOffset !== 0 ||\r\n      this.camera.inertialPanningX !== 0 ||\r\n      this.camera.inertialPanningY !== 0\r\n    );\r\n  }\r\n\r\n  private rotateLeft(camera: ArcRotateCamera) {\r\n    this.rotateCommon(camera, false);\r\n  }\r\n\r\n  private rotateRight(camera: ArcRotateCamera) {\r\n    this.rotateCommon(camera, true);\r\n  }\r\n\r\n  public override quaterView(alphaAngle = 45, betaAngle = 45, seconds: number) {\r\n    const alpha = alphaAngle * toRadian;\r\n    const beta = betaAngle * toRadian;\r\n    const r = this.fitRadiusWithMargin;\r\n    this.animationHelper.moveAnimation(this.camera, this.defaultTarget, alpha, beta, r, seconds);\r\n  }\r\n\r\n  private alphaStart: number = 0;\r\n\r\n  private rotateCommon(camera: ArcRotateCamera, toRight: boolean) {\r\n    camera.target = this.defaultTarget;\r\n    camera.radius = this.fitRadiusWithMargin;\r\n    camera.beta = 45 * toRadian;\r\n    if (this.alphaStart === 0) {\r\n      this.alphaStart = camera.alpha;\r\n    }\r\n    let nextAlpha = this.getNextRotationAlpha(this.alphaStart, toRight);\r\n    this.animationHelper.changeAlphaWithAnimation(this.alphaStart, nextAlpha, camera);\r\n    this.alphaStart = nextAlpha;\r\n  }\r\n\r\n  private getNextRotationAlpha(currentAlpha: number, doPlus: boolean) {\r\n    const angle = toAngle * currentAlpha;\r\n    const angleRounded = Math.round(angle);\r\n    const isQuaterviewStateNow = angleRounded % 90 === 45 || angleRounded % 90 === -45;\r\n    let finalAngle = 45;\r\n    if (isQuaterviewStateNow) {\r\n      finalAngle = doPlus ? angle + 90 : angle - 90;\r\n    }\r\n    return toRadian * finalAngle;\r\n  }\r\n\r\n  private restoreCameraWithRotationHold(camera: ArcRotateCamera) {\r\n    this.animationHelper.zoomAnimation(camera, this.fitRadiusWithMargin, this.defaultTarget, 0.1);\r\n  }\r\n\r\n  private zoomInToPoint(camera: ArcRotateCamera, pt: Vector3) {\r\n    if (camera.radius <= 0) {\r\n      return; // cannot zoom in more\r\n    }\r\n    const customFactor = 0.4;\r\n    const zoomFactor = (this.fitRadiusWithMargin * customFactor) / camera.radius;\r\n    const targetToPt = pt.subtract(camera.target);\r\n    const moveVec = targetToPt.multiplyByFloats(1 - zoomFactor, 1 - zoomFactor, 1 - zoomFactor);\r\n    const newTarget = camera.target.add(moveVec);\r\n    const targetRadius = camera.radius * zoomFactor;\r\n\r\n    this.animationHelper.zoomAnimation(camera, targetRadius, newTarget, 3);\r\n  }\r\n\r\n  public override zoomIn(percent = 30, seconds = 0.3) {\r\n    if (percent < 0) {\r\n      return;\r\n    }\r\n    const radius = this.camera.radius * (1 - percent / 100);\r\n    this.animationHelper.zoomAnimation(this.camera, radius, this.camera.target, seconds);\r\n  }\r\n\r\n  public override zoomOut(percent = 30, seconds = 0.3) {\r\n    if (percent < 0) {\r\n      return;\r\n    }\r\n    const radius = this.camera.radius * (1 + percent / 100);\r\n    this.animationHelper.zoomAnimation(this.camera, radius, this.camera.target, seconds);\r\n  }\r\n\r\n  public override setDistance(distance = 3, seconds = 0.3) {\r\n    this.animationHelper.zoomAnimation(this.camera, distance, this.camera.target, seconds);\r\n  }\r\n\r\n  public override zoomFitOnInit(ext: { min: Vector3; max: Vector3 }) {\r\n    const fitRadius = getFitRadius(this.scene, ext, this.camera);\r\n    if (fitRadius === undefined) {\r\n      return;\r\n    }\r\n    this.fitRadiusWithMargin = fitRadius;\r\n    this.setCameraValue(ext);\r\n    this.setSceneEvents();\r\n    this.animationHelper.zoomAnimation(this.camera, fitRadius, this.defaultTarget, 1.5, true);\r\n  }\r\n\r\n  protected override zoomFit(useAnimation = false, ext: { min: Vector3; max: Vector3 }) {\r\n    const fitRadius = getFitRadius(this.scene, ext, this.camera);\r\n    if (fitRadius === undefined) {\r\n      return;\r\n    }\r\n    this.fitRadiusWithMargin = fitRadius;\r\n\r\n    if (useAnimation) {\r\n      this.animationHelper.zoomAnimation(this.camera, fitRadius, this.defaultTarget, 0.4);\r\n    } else {\r\n      this.camera.radius = fitRadius;\r\n    }\r\n  }\r\n\r\n  public override async moveTo(\r\n    pos: CameraPosition,\r\n    cameraAngle: CameraAngle,\r\n    isRelativeAngle = false,\r\n    seconds = 1\r\n  ) {\r\n    let startVec = new Vector3(0, 0, -1);\r\n    if (isRelativeAngle) {\r\n      startVec = CameraAngle.convertToVectorFromAlphaBetaRadian(\r\n        this.camera.alpha,\r\n        this.camera.beta\r\n      );\r\n    }\r\n    const [alpha, beta] = cameraAngle.getRotatedAlphaBetaAsRadianFrom(startVec);\r\n    const vec = CameraAngle.convertToVectorFromAlphaBetaRadian(alpha, beta);\r\n    const convertedPos = new Vector3(-pos.x, pos.h, -pos.y);\r\n    let target = this.camera.target.clone();\r\n    let newPos = this.camera.position.clone();\r\n    if (pos.isRelative) {\r\n      target = target.add(convertedPos);\r\n      newPos = target.subtract(vec);\r\n    } else {\r\n      target = convertedPos.add(vec);\r\n      newPos = target.subtract(vec);\r\n    }\r\n    const newRadius = Vector3.Distance(newPos, target);\r\n\r\n    this.changeCameraLimitRadiusAndUpperBeta(newRadius, beta);\r\n\r\n    await this.animationHelper.moveAnimation(this.camera, target, alpha, beta, 1, seconds);\r\n  }\r\n\r\n  public override async moveToCameraTarget(\r\n    position: Vector3,\r\n    forward: Vector3,\r\n    cameraAngle: CameraAngle,\r\n    dist: number,\r\n    seconds = 1,\r\n    fromForward = true\r\n  ) {\r\n    const startVec = fromForward ? forward.clone().normalize().scale(-1) : new Vector3(0, 0, -1);\r\n    const [alpha, beta] = cameraAngle.getRotatedAlphaBetaAsRadianFrom(startVec);\r\n    const target = position;\r\n\r\n    this.changeCameraLimitRadiusAndUpperBeta(dist, beta);\r\n\r\n    await this.animationHelper.moveAnimation(this.camera, target, alpha, beta, dist, seconds);\r\n  }\r\n\r\n  public override async moveToCoordinate(position: Vector3, rotation: Vector3, seconds = 1) {\r\n    const rot = rotation.clone();\r\n    rot.z = 0;\r\n    const { target, alpha, beta, radius } = freeToArc(this.scene, position, rot, 1);\r\n\r\n    await this.animationHelper.moveAnimation(this.camera, target, alpha, beta, radius, seconds);\r\n  }\r\n\r\n  private changeCameraLimitRadiusAndUpperBeta(radius: number, beta: number) {\r\n    if (this.camera.lowerRadiusLimit && radius < this.camera.lowerRadiusLimit) {\r\n      this.camera.lowerRadiusLimit = radius;\r\n      ZEDCameraBase.minDistance = radius;\r\n    }\r\n    if (this.camera.upperRadiusLimit && radius > this.camera.upperRadiusLimit) {\r\n      this.camera.upperRadiusLimit = radius;\r\n      ZEDCameraBase.maxDistance = radius;\r\n    }\r\n  }\r\n\r\n  public override topViewFit(seconds = 0.3, ext: { min: Vector3; max: Vector3 }) {\r\n    const target = this.defaultTarget;\r\n    const radius = getFitRadius(this.scene, ext, this.camera);\r\n    if (radius === undefined) {\r\n      return;\r\n    }\r\n    this.animationHelper.moveAnimation(\r\n      this.camera,\r\n      target,\r\n      this.defaultAlpha,\r\n      this.defaultBeta,\r\n      radius,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public override topViewCustom(\r\n    x: number,\r\n    y: number,\r\n    zoomPercent: number,\r\n    rotation: number,\r\n    seconds = 0.3,\r\n    ext: { min: Vector3; max: Vector3 }\r\n  ) {\r\n    if (zoomPercent <= 0) {\r\n      return;\r\n    }\r\n    const target = this.defaultTarget;\r\n    const newTarget = new Vector3(target.x - x, target.y, target.z - y);\r\n    const radius = getFitRadius(this.scene, ext, this.camera);\r\n    if (radius === undefined) {\r\n      return;\r\n    }\r\n    const ratio = 1 + (100 - zoomPercent) / 100;\r\n    this.animationHelper.moveAnimation(\r\n      this.camera,\r\n      newTarget,\r\n      this.defaultAlpha + rotation * toRadian,\r\n      this.defaultBeta,\r\n      radius * ratio,\r\n      seconds\r\n    );\r\n  }\r\n\r\n  public override setViewport(to: Viewport): void {\r\n    Object.assign(this.camera.viewport, to);\r\n  }\r\n\r\n  public override getViewport(): Viewport {\r\n    return this.camera.viewport;\r\n  }\r\n\r\n  public override transformViewport(\r\n    from: Viewport,\r\n    to: Viewport,\r\n    frame: number,\r\n    onEnd?: () => void\r\n  ): void {\r\n    this.animationHelper.viewportAnimation(this.camera, from, to, frame, onEnd);\r\n  }\r\n\r\n  public override enableControl(enable: boolean) {\r\n    this.camera.inputs.removeByType('ArcRotateCameraPointersInput');\r\n\r\n    if (enable) {\r\n      const pointersInput = this.createPointersInput();\r\n      this.camera.inputs.add(pointersInput);\r\n      this.applyCameraSpeed();\r\n    }\r\n  }\r\n}\r\n\r\nexport enum CameraType {\r\n  ArcRotate,\r\n  Free,\r\n  Gyro,\r\n}\r\n","import {\r\n  DeviceOrientationCamera,\r\n  PointerEventTypes,\r\n  PointerInfo,\r\n  Vector2,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nexport class GyroPinchHandler {\r\n  public static pointMap = new Map<number, Vector2>();\r\n  public static prevDist: number = -1;\r\n\r\n  public static processPinch = (e: PointerInfo, camera: DeviceOrientationCamera): boolean => {\r\n    if (e.type === PointerEventTypes.POINTERDOWN) {\r\n      this.pointMap.set(\r\n        (e.event as PointerEvent).pointerId,\r\n        new Vector2(e.event.clientX, e.event.clientY)\r\n      );\r\n      if (this.pointMap.size === 2) {\r\n        const values = Array.from(this.pointMap.values());\r\n        this.prevDist = Vector2.Distance(values[0], values[1]);\r\n      }\r\n    }\r\n\r\n    if (e.type === PointerEventTypes.POINTERUP) {\r\n      const id = (e.event as PointerEvent).pointerId;\r\n      this.pointMap.clear();\r\n      this.prevDist = -1;\r\n      camera.enableHorizontalDragging(-2 / 300);\r\n    }\r\n\r\n    if (e.type === PointerEventTypes.POINTERMOVE) {\r\n      this.pointMap.set(\r\n        (e.event as PointerEvent).pointerId,\r\n        new Vector2(e.event.clientX, e.event.clientY)\r\n      );\r\n\r\n      if (this.pointMap.size === 2) {\r\n        camera.enableHorizontalDragging(0);\r\n        const values = Array.from(this.pointMap.values());\r\n        const dist = Vector2.Distance(values[0], values[1]);\r\n        if (this.prevDist !== -1) {\r\n          const delta = dist - this.prevDist;\r\n          const dir = camera.target.subtract(camera.position);\r\n          const addVec = new Vector3(dir.x * (delta * 0.01), 0, dir.z * (delta * 0.01));\r\n          camera.position = camera.position.add(addVec);\r\n          camera.target = camera.target.add(addVec);\r\n          this.prevDist = dist;\r\n          return true;\r\n        } else {\r\n          this.prevDist = dist;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n}\r\n","import {\r\n  DeviceOrientationCamera,\r\n  PointerEventTypes,\r\n  PointerInfo,\r\n  Quaternion,\r\n  Vector2,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nexport class GyroVerticalDragHandler {\r\n  public static pointMapDrag = new Map<number, Vector2>();\r\n\r\n  public static processVerticalDrag = (\r\n    e: PointerInfo,\r\n    camera: DeviceOrientationCamera,\r\n    withHorizontal = false\r\n  ): boolean => {\r\n    if (e.type === PointerEventTypes.POINTERDOWN) {\r\n      this.pointMapDrag.set(\r\n        (e.event as PointerEvent).pointerId,\r\n        new Vector2(e.event.clientX, e.event.clientY)\r\n      );\r\n      camera.enableHorizontalDragging(-2 / 300);\r\n    }\r\n\r\n    if (e.type === PointerEventTypes.POINTERUP) {\r\n      const id = (e.event as PointerEvent).pointerId;\r\n      this.pointMapDrag.clear();\r\n      camera.enableHorizontalDragging(-2 / 300);\r\n    }\r\n\r\n    if (e.type === PointerEventTypes.POINTERMOVE) {\r\n      if (this.pointMapDrag.size === 1) {\r\n        const values = Array.from(this.pointMapDrag.values());\r\n        const p1 = new Vector2(values[0].x, values[0].y);\r\n        const p2 = new Vector2(e.event.clientX, e.event.clientY);\r\n\r\n        this.pointMapDrag.set(\r\n          (e.event as PointerEvent).pointerId,\r\n          new Vector2(e.event.clientX, e.event.clientY)\r\n        );\r\n\r\n        const isVertical = Math.abs(p2.y - p1.y) > Math.abs(p2.x - p1.x);\r\n\r\n        if (isVertical) {\r\n          //camera.enableHorizontalDragging(0);\r\n          const delta = p2.y - p1.y;\r\n          const dir = camera.target.subtract(camera.position);\r\n          const addVec = new Vector3(dir.x * (delta * 0.01), 0, dir.z * (delta * 0.01));\r\n          camera.position = camera.position.add(addVec);\r\n          camera.target = camera.target.add(addVec);\r\n\r\n          return true;\r\n        }\r\n\r\n        // 수평방향 회전도 같이 처리 (withHorizontal 이 true 인 경우만)\r\n        if (withHorizontal) {\r\n          if (!isVertical) {\r\n            const delta = p2.x - p1.x;\r\n            const dir = camera.target.subtract(camera.position);\r\n            dir.applyRotationQuaternionInPlace(\r\n              Quaternion.RotationAxis(Vector3.Up(), -delta * 0.003)\r\n            );\r\n            const pos = camera.position.clone();\r\n            camera.target = pos.add(dir);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n}\r\n","import {\r\n  AbstractMesh,\r\n  Angle,\r\n  Color4,\r\n  Database,\r\n  DeviceOrientationCamera,\r\n  Engine,\r\n  FreeCamera,\r\n  GizmoManager,\r\n  type Nullable,\r\n  PointerEventTypes,\r\n  PointerInfo,\r\n  Quaternion,\r\n  Scene,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\n\r\nimport {\r\n  cacheJsonData,\r\n  deleteCache,\r\n  disposeLoader,\r\n  floorplanData,\r\n  loadHome,\r\n  type QualitySettings,\r\n  Resolution,\r\n} from '@/data';\r\nimport {\r\n  CameraManager,\r\n  FurnitureManager,\r\n  GraphicManager,\r\n  MaterialPluginManager,\r\n  ObservableManager,\r\n  RenderManager,\r\n  SystemManager,\r\n} from '@/manager';\r\nimport { World } from '@/World';\r\nimport { CameraType, ZEDCamera, ZEDCameraBase, ZEDFreeCamera, ZEDGyroCamera } from '@/ZEDCamera';\r\n\r\nimport { PerformanceProfiler } from './manager/PerformanceProfiler';\r\nimport {\r\n  ActiveHomeSystem,\r\n  FloorplanSystem,\r\n  MaterialChangeSystem,\r\n  RoomSystem,\r\n  TransformSystem,\r\n} from './system';\r\nimport { CameraAnimationHelper } from './util/camera/CameraAnimationHelper';\r\nimport {\r\n  getDirectionToCenter,\r\n  getWallMeshesAll,\r\n  timeout,\r\n  toAngle,\r\n  toRadian,\r\n} from './util/camera/CameraUtils';\r\nimport { GyroPinchHandler } from './util/camera/GyroPinchHandler';\r\nimport { GyroVerticalDragHandler } from './util/camera/GyroVerticalDragHandler';\r\nimport { Profile } from './util/Profile';\r\nimport { convertUnityRotationYToBabylon, convertUnityScaleToBabylon } from './util/Utile';\r\n\r\nclass ZED {\r\n  //-------------------------------------------------\r\n  // * Core Member\r\n  private engine!: Engine;\r\n  private scene!: Scene;\r\n\r\n  //-------------------------------------------------\r\n  // * Base Member\r\n  private zedcamera!: ZEDCameraBase;\r\n  private renderManager!: RenderManager;\r\n  private systemManager!: SystemManager;\r\n  private gizmoManager!: GizmoManager;\r\n  private materialPluginManager!: MaterialPluginManager;\r\n\r\n  //-------------------------------------------------\r\n  // * API Class\r\n  public camera!: CameraManager;\r\n  public furniture!: FurnitureManager;\r\n  public graphic!: GraphicManager;\r\n  public observer!: ObservableManager;\r\n  public performance!: PerformanceProfiler;\r\n\r\n  //-------------------------------------------------\r\n  constructor(\r\n    private canvasOrContext: Nullable<\r\n      HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext\r\n    >\r\n  ) {\r\n    this.initialize();\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * initialize & dispose\r\n  private initialize = () => {\r\n    Profile.start('Initialize');\r\n    // * Core Member 초기화\r\n    this.engine = new Engine(this.canvasOrContext, true, {\r\n      adaptToDeviceRatio: true,\r\n    });\r\n    // 모바일에서 이 값을 수동으로 true로 하지 않으면, 첫 렌더링이 느려진다 해 추가\r\n    // https://forum.babylonjs.com/t/engine-disableuniformbuffers-is-set-to-false-in-mobile-mode-and-cause-a-bad-performance/41228\r\n    this.engine.disableUniformBuffers = true;\r\n    this.scene = new Scene(this.engine);\r\n\r\n    // * Scene 초기화\r\n    this.scene.clearColor = new Color4(0, 0, 0, 0);\r\n    this.scene.autoClear = false; // Color buffer\r\n    this.scene.autoClearDepthAndStencil = false; // Depth and stencil, obviously\r\n    this.scene.skipFrustumClipping = true;\r\n    this.scene.skipPointerMovePicking = true;\r\n    this.scene.blockMaterialDirtyMechanism = true;\r\n    this.scene.getEngine().stopRenderLoop();\r\n\r\n    // * GizmoManager 초기화\r\n    this.gizmoManager = new GizmoManager(this.scene);\r\n    this.gizmoManager.enableAutoPicking = false;\r\n    this.gizmoManager.onAttachedToNodeObservable.add((ed) => {\r\n      const enable = !!ed;\r\n      this.gizmoManager.positionGizmoEnabled = enable;\r\n      this.gizmoManager.rotationGizmoEnabled = enable;\r\n      if (!!this.gizmoManager.gizmos.positionGizmo) {\r\n        this.gizmoManager.gizmos.positionGizmo.yGizmo.isEnabled = false;\r\n        this.gizmoManager.gizmos.positionGizmo.scaleRatio = 0.8;\r\n      }\r\n      if (!!this.gizmoManager.gizmos.rotationGizmo) {\r\n        this.gizmoManager.gizmos.rotationGizmo.xGizmo.isEnabled = false;\r\n        this.gizmoManager.gizmos.rotationGizmo.zGizmo.isEnabled = false;\r\n        this.gizmoManager.gizmos.rotationGizmo.scaleRatio = 0.5;\r\n      }\r\n    });\r\n\r\n    // * Singleton Member 초기화\r\n    this.observer = new ObservableManager();\r\n    this.materialPluginManager = new MaterialPluginManager();\r\n\r\n    // * Base Member 초기화\r\n    this.zedcamera = new ZEDCamera(this.scene);\r\n    this.renderManager = new RenderManager(\r\n      this.scene,\r\n      this.engine,\r\n      this.gizmoManager,\r\n      this.canvasOrContext instanceof HTMLCanvasElement ? this.canvasOrContext : undefined\r\n    );\r\n    this.systemManager = new SystemManager(this.scene);\r\n\r\n    // * API Class 초기화\r\n    this.camera = new CameraManager(this.engine, this.scene, this.zedcamera);\r\n    this.furniture = new FurnitureManager(this.gizmoManager);\r\n    this.graphic = new GraphicManager();\r\n    this.performance = PerformanceProfiler.getInstance(this.scene);\r\n\r\n    //-------------------------------------------------\r\n    // * Model 로드가 완료되었을 때 사용자가 입력한 콜백보다 먼저 호출하기 위해 미리 추가하는 콜백\r\n    this.observer.onAllModelLoaded.add(() => {\r\n      this.setActiveHome(this.activeHomeId);\r\n    });\r\n    Profile.end('Initialize');\r\n  };\r\n  public dispose = () => {\r\n    Profile.reset();\r\n\r\n    // * ECS World Clear\r\n    World.clear();\r\n\r\n    disposeLoader();\r\n\r\n    // * Singleton Member Reset\r\n    this.observer.reset();\r\n    this.materialPluginManager.reset();\r\n\r\n    // * Base Member Dispose\r\n    this.graphic.dispose();\r\n    this.renderManager.reset();\r\n    this.zedcamera.reset();\r\n    this.gizmoManager.dispose();\r\n    this.systemManager.reset();\r\n\r\n    // * Babylon.js Dispose\r\n    this.scene.clearCachedVertexData();\r\n    this.scene.cleanCachedTextureBuffer();\r\n    this.scene.dispose();\r\n    this.engine.dispose();\r\n  };\r\n\r\n  //-------------------------------------------------\r\n  // * DBStorageEnabled (리소스 캐시 사용 여부)\r\n  public EnableDBStorage(enable: boolean) {\r\n    Database.IDBStorageEnabled = enable;\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Change Camera\r\n\r\n  public changeCamera = (newType: CameraType) => {\r\n    const currentType = this.getCameraType();\r\n\r\n    if (currentType === newType) return;\r\n\r\n    let newCamera: ZEDCameraBase | undefined = undefined;\r\n\r\n    switch (newType) {\r\n      case CameraType.Free:\r\n        newCamera = new ZEDFreeCamera(this.scene);\r\n        break;\r\n      case CameraType.ArcRotate:\r\n        newCamera = new ZEDCamera(this.scene);\r\n        (newCamera as ZEDCamera).recoverMinMaxDistance();\r\n        break;\r\n      case CameraType.Gyro:\r\n        const oldCamera = this.zedcamera.babylonCamera();\r\n        const dir = oldCamera.target.subtract(oldCamera.position);\r\n        newCamera = new ZEDGyroCamera(this.scene, oldCamera.position, dir);\r\n        break;\r\n      default:\r\n        throw new Error('impossible camera type.');\r\n    }\r\n\r\n    // 카메라 이동 및 변경\r\n    newCamera.copyFromCamera(this.zedcamera);\r\n    this.changeZedCamera(newCamera);\r\n\r\n    // 콜백 처리 (자이로에서 터치 인풋 처리)\r\n    this.clearGyroCallbacks();\r\n    if (newType === CameraType.Gyro) {\r\n      this.scene.onPointerObservable.add(this.onTouchInGyro);\r\n    }\r\n\r\n    this.renderManager.runRenderLoop(true);\r\n  };\r\n\r\n  public getCameraType = () => {\r\n    if (this.zedcamera instanceof ZEDCamera) return CameraType.ArcRotate;\r\n    else if (this.zedcamera instanceof ZEDFreeCamera) return CameraType.Free;\r\n    else if (this.zedcamera instanceof ZEDGyroCamera) return CameraType.Gyro;\r\n\r\n    throw new Error('impossible camera type.');\r\n  };\r\n\r\n  //-------------------------------------------------\r\n  // * Gyro Mode\r\n  private gyroTransitionAnimationSeconds = 0.7;\r\n\r\n  private isGyroSupported = true;\r\n\r\n  // 자이로로 전환될 준비가 된 Top View 로 전환한다\r\n  // (이 top view 는 일반 카메라이나, 바닥 클릭시 자동으로 자이로로 전환되는 콜백을 가진다)\r\n  public startTopViewForGyro = (animationSeconds?: number) => {\r\n    if (animationSeconds !== undefined) {\r\n      this.gyroTransitionAnimationSeconds = animationSeconds;\r\n    }\r\n\r\n    if (this.getCameraType() !== CameraType.ArcRotate) {\r\n      this.changeCamera(CameraType.ArcRotate);\r\n    }\r\n    this.scene.onPointerObservable.add(this.onTouchInTopView);\r\n\r\n    this.camera.topViewFit();\r\n  };\r\n\r\n  public endGyro = () => {\r\n    this.changeCamera(CameraType.ArcRotate);\r\n  };\r\n\r\n  // 자이로 카메라의 위치까지 에니메이션 해 준다\r\n  // - Free 카메라로 자동 변경됨\r\n  // - 최종 카메라 방향은 현재 자이로 상하 각도 반영\r\n  // - dir 이 undefined 이면 방 중심으로 설정\r\n  public moveToGyroPosition = async (\r\n    startPosition?: Vector3,\r\n    startDir?: Vector3,\r\n    animationSeconds?: number\r\n  ) => {\r\n    if (this.getCameraType() === CameraType.Gyro) {\r\n      return;\r\n    }\r\n\r\n    // 에니메이션 옵션 처리\r\n    if (animationSeconds !== undefined) {\r\n      this.gyroTransitionAnimationSeconds = animationSeconds;\r\n    }\r\n    const seconds = this.gyroTransitionAnimationSeconds;\r\n\r\n    // 시작 지점, 시작 방향\r\n    const pos = startPosition ? startPosition : new Vector3(0, 1.6, 0);\r\n    const dir = startDir ? startDir : getDirectionToCenter(pos, getWallMeshesAll());\r\n\r\n    // 자이로 카메라 생성\r\n    const gyroCamera = new ZEDGyroCamera(this.scene, pos, dir);\r\n    const internalGyro = gyroCamera.babylonCamera();\r\n\r\n    // 자이로 지원 여부 처리\r\n    // (isGyroSupported 이 한번 false 로 판단되면 기다리지 않는다)\r\n    if (this.isGyroSupported) {\r\n      const p1 = (gyroCamera as ZEDGyroCamera).getGyroAngles();\r\n      const p2 = new Promise((resolve) => setTimeout(resolve, 2000, undefined));\r\n      const value = await Promise.any([p1, p2]);\r\n\r\n      if (value === undefined) this.isGyroSupported = false;\r\n    }\r\n\r\n    // *********************************************\r\n    // 1. 일단 Free 카메라로 전환\r\n    this.changeCamera(CameraType.Free);\r\n    const internalFree = this.zedcamera.babylonCamera();\r\n    // Free Camera 의 target 을 바로 앞으로 조정해준다\r\n    // (추후 arcRotate 로 변경시에 radius 가 너무 길어지면 조작이 이상해지기 때문)\r\n    const unitDir = internalFree.target.subtract(internalFree.position).normalize();\r\n    internalFree.target = internalFree.position.add(unitDir);\r\n    if (internalFree.rotation.y < 0) {\r\n      internalFree.rotation.y += 360 * toRadian;\r\n    }\r\n\r\n    // *********************************************\r\n    // 2. 자이로 위치로 에니메이션\r\n\r\n    // 예외처리 (자이로가 지원되지 않는 경우)\r\n    if (!this.isGyroSupported) {\r\n      internalGyro.position = pos!;\r\n      internalGyro.position.y = 1.6;\r\n      internalGyro.setTarget(internalGyro.position.add(dir!));\r\n      internalGyro.inputs.removeByType('FreeCameraMouseInput');\r\n    }\r\n\r\n    // 에니메이션 실행\r\n    const promise = CameraAnimationHelper.toOtherCameraState(\r\n      internalFree,\r\n      internalGyro,\r\n      this.scene,\r\n      seconds\r\n    );\r\n\r\n    // return promise;\r\n\r\n    // 에니메이션 완료 후에 resolve\r\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000 * 1.1, undefined));\r\n  };\r\n\r\n  private onTouchInTopView = (e: PointerInfo) => {\r\n    const position = e.pickInfo && e.pickInfo.pickedPoint ? e.pickInfo.pickedPoint : undefined;\r\n    if (e.type === PointerEventTypes.POINTERTAP) {\r\n      // 자이로 위치로 에니메이션 -> 카메라 전환\r\n      this.moveToGyroPosition(position!).then(() => {\r\n        this.changeCamera(CameraType.Gyro);\r\n      });\r\n    }\r\n  };\r\n\r\n  private onTouchInGyro = (e: PointerInfo) => {\r\n    const deviceCamera = this.zedcamera.babylonCamera() as DeviceOrientationCamera;\r\n\r\n    if (GyroPinchHandler.processPinch(e, deviceCamera)) return;\r\n\r\n    // 자이로 지원되지 않는 기기에서는 수평 이동까지 처리\r\n    const withHorizontal = this.isGyroSupported === false ? true : false;\r\n\r\n    GyroVerticalDragHandler.processVerticalDrag(e, deviceCamera, withHorizontal);\r\n\r\n    if (e.type === PointerEventTypes.POINTERTAP) {\r\n      // this.zedcamera.moveToPosition(e.pickInfo?.pickedPoint); // 이동\r\n    } else if (e.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n      this.startTopViewForGyro(); // 탑뷰로 전환\r\n    }\r\n  };\r\n\r\n  // 유틸 함수 - 자이로 모드 전환시 사용되는 여러 콜백들 정리\r\n  private clearGyroCallbacks = () => {\r\n    this.scene.onPointerObservable.removeCallback(this.onTouchInTopView);\r\n    this.scene.onPointerObservable.removeCallback(this.onTouchInGyro);\r\n  };\r\n\r\n  // 유틸 함수 - 제드 카메라를 변경시에 해 줘야 할 일을 동시에\r\n  private changeZedCamera = (newCamera: ZEDCameraBase) => {\r\n    const oldCamera = this.zedcamera;\r\n    this.camera = new CameraManager(this.engine, this.scene, newCamera);\r\n    this.graphic.replaceCamera(oldCamera.babylonCamera(), newCamera.babylonCamera());\r\n    this.zedcamera = newCamera;\r\n    this.zedcamera.setActive();\r\n  };\r\n\r\n  //-------------------------------------------------\r\n  // * Load & Save\r\n  private defalutQualitySettings: QualitySettings = {\r\n    simpleMode: false,\r\n    modelLOD: 'LOD0',\r\n    textureMaxSize: '2048',\r\n    resolution: Resolution.p900,\r\n    reflection: false,\r\n    useNormalTexture: false,\r\n  };\r\n\r\n  public loadHome = async (homeId: string, qualitySettings?: QualitySettings) => {\r\n    this.activeHomeId = homeId;\r\n\r\n    if (qualitySettings === undefined) {\r\n      qualitySettings = this.defalutQualitySettings;\r\n    }\r\n    if (qualitySettings.reflection === undefined) {\r\n      qualitySettings.reflection = this.defalutQualitySettings.reflection;\r\n    }\r\n    if (qualitySettings.resolution === undefined) {\r\n      qualitySettings.resolution = this.defalutQualitySettings.resolution;\r\n    }\r\n    if (qualitySettings.useNormalTexture === undefined) {\r\n      qualitySettings.useNormalTexture = this.defalutQualitySettings.useNormalTexture;\r\n    }\r\n    RenderManager.SetResolution(qualitySettings.resolution!);\r\n\r\n    Profile.start('Load Home');\r\n    await loadHome(this.scene, homeId, this.graphic, qualitySettings);\r\n    Profile.end('Load Home');\r\n    this.performance.loadHomeTotal = Profile.get('Load Home') ?? 0;\r\n\r\n    Profile.print();\r\n    Profile.reset();\r\n  };\r\n\r\n  public async saveCache() {\r\n    const homeId = this.activeHomeId;\r\n    const materialChangedEntities = MaterialChangeSystem.getMaterialChangeableEntities();\r\n\r\n    const floorplan = floorplanData[homeId];\r\n    if (!floorplan) return;\r\n\r\n    floorplan.forEach((f) => {\r\n      const entities = TransformSystem.getMovableTransformEntitiesInFloorplan(f.floorplanId);\r\n      const floorplanEntity = FloorplanSystem.getFloorplanEntity(f.floorplanId)?.Floorplan;\r\n\r\n      f.furniturePlaceData.forEach((d) => {\r\n        const entity = entities.find((e) => e.TransformNode.name === d.name);\r\n        if (entity) {\r\n          const TransformNode = entity.TransformNode;\r\n          const position = floorplanEntity\r\n            ? TransformNode.absolutePosition.subtract(floorplanEntity.pivotPosition)\r\n            : TransformNode.absolutePosition;\r\n\r\n          if (TransformNode.rotationQuaternion) {\r\n            TransformNode.rotationQuaternion.toEulerAnglesToRef(TransformNode.rotation);\r\n            TransformNode.rotationQuaternion = null;\r\n          }\r\n          const rotationY = Angle.FromRadians(\r\n            convertUnityRotationYToBabylon(TransformNode.rotation.y)\r\n          ).degrees();\r\n          const scale = convertUnityScaleToBabylon(TransformNode.scaling);\r\n          // @ts-ignore\r\n          d.position = { x: position.x, y: position.y, z: position.z };\r\n          d.rotationY = rotationY;\r\n          // @ts-ignore\r\n          d.scale = { x: scale.x, y: scale.y, z: scale.z };\r\n        }\r\n      });\r\n\r\n      const overrideData = materialChangedEntities\r\n        .filter((e) => e.Identifier.floorplanId === f.floorplanId)\r\n        .flatMap((e) => e.MaterialChangeable.materialOverrideData);\r\n\r\n      f.materialOverrideData = overrideData;\r\n\r\n      console.log(f);\r\n    });\r\n\r\n    await cacheJsonData('User', `Zed_${homeId}.json`, floorplan);\r\n  }\r\n  public async deleteCache() {\r\n    await deleteCache('User');\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Home\r\n  public activeHomeId: string = '';\r\n  public setActiveHome = (homeId: string, moveCamera = true): void => {\r\n    this.activeHomeId = homeId;\r\n    ActiveHomeSystem.setActiveHome(homeId);\r\n\r\n    if (moveCamera) {\r\n      if (this.activeFloorplanEntities.length > 0) {\r\n        const toTopView = false;\r\n        this.camera.setTargetFloor(\r\n          this.activeFloorplanEntities[0].Identifier.floorplanId,\r\n          toTopView\r\n        );\r\n      }\r\n    } else {\r\n      RenderManager.RenderUpdate();\r\n    }\r\n  };\r\n\r\n  //-------------------------------------------------\r\n  // * Floorplan\r\n  public get activeFloorplanEntities() {\r\n    return FloorplanSystem.getFloorplanEntitiesInActiveHome();\r\n  }\r\n\r\n  //-------------------------------------------------\r\n  // * Room\r\n  /**\r\n   * Room Component를 구성하고 있는 Entity를 RoomInfo로 변환해 반환합니다.\r\n   * @param floorplanId 입력시 해당 floorplan에 속한 RoomInfo만 반환합니다.\r\n   * @returns\r\n   */\r\n  public getRooms(floorplanId?: string) {\r\n    return RoomSystem.getRooms(floorplanId);\r\n  }\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity를 RoomObjectInfo로 변환해 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  public getRoomObjects(roomId?: string) {\r\n    return RoomSystem.getRoomObjects(roomId);\r\n  }\r\n  /**\r\n   * RoomObject Component를 구성하고 있는 Entity 중 Thing(IoT)State를 가진 Entity를 RoomObjectInfo로 변환해 반환합니다.\r\n   * @param roomId 입력시 해당 room에 속한 Entity만 반환합니다.\r\n   * @returns\r\n   */\r\n  public getRoomObjectsOnlyThing(roomId?: string) {\r\n    return RoomSystem.getRoomObjectsOnlyThing(roomId);\r\n  }\r\n}\r\nexport default ZED;\r\n","import { createContext, useContext } from 'react';\r\n\r\nimport ZED from '@/ZED';\r\n\r\nexport const ZedContext = createContext<ZED | undefined>(undefined);\r\n\r\nexport function useZed() {\r\n  return useContext(ZedContext);\r\n}\r\n","'use client';\r\n\r\nimport { forwardRef, memo, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\n\r\nimport styles from '@/styles/zed.module.css';\r\n\r\nimport ZED from '../ZED';\r\n\r\nimport { ZedContext } from './hooks/useZed';\r\n\r\nconst ZEDComponent = forwardRef<ZED | undefined>(function Zed(\r\n  {\r\n    children,\r\n    className,\r\n    style,\r\n    ...rest\r\n  }: Omit<React.CanvasHTMLAttributes<HTMLCanvasElement>, 'width' | 'height'>,\r\n  ref\r\n) {\r\n  const [zed, setZed] = useState<ZED>();\r\n  const [canvasRef, setCanvasRef] = useState<HTMLCanvasElement | null>(null);\r\n\r\n  useImperativeHandle(ref, () => zed, [zed]);\r\n\r\n  useEffect(() => {\r\n    setZed(canvasRef ? new ZED(canvasRef) : undefined);\r\n  }, [canvasRef]);\r\n\r\n  useEffect(() => {\r\n    if (!zed) return;\r\n\r\n    return () => {\r\n      zed.dispose();\r\n    };\r\n  }, [zed]);\r\n\r\n  return (\r\n    <div className={[className, styles.wrapper].join(' ')} style={style}>\r\n      <canvas ref={setCanvasRef} className={[styles.full, styles.canvas].join(' ')} {...rest} />\r\n      <ZedContext.Provider value={zed}>{children}</ZedContext.Provider>\r\n    </div>\r\n  );\r\n});\r\n\r\n/**\r\n * Zigbang 3D for IoT\r\n */\r\nexport const Zed = memo(ZEDComponent);\r\n"],"names":["EngineInstrumentation","value","engine","PerfCounter","SceneInstrumentation","Tools","camera","scene","cacheJsonData","cacheName","fileName","data","url","cache","jsonStr","response","getJsonDataFromCache","_a","deleteCache","error","_arrayLikeToArray","arr","len","i","arr2","_unsupportedIterableToArray","o","minLen","n","_createForOfIteratorHelper","allowArrayLike","it","F","e","normalCompletion","didErr","err","step","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_defineProperty","obj","key","Event","listener","_this","payload","_iterator","_step","_Symbol$iterator","Bucket","entities","index","result","entity","other","_arrayWithoutHoles","_iterableToArray","iter","_nonIterableSpread","_toConsumableArray","_typeof","_assertThisInitialized","self","_setPrototypeOf","p","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","_possibleConstructorReturn","call","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","Memoizer","predicate","hasComponents","_len2","components","_key2","c","hasNoComponents","_len4","_key4","normalizeComponents","normalizeQuery","query","queryCache","memoizeQuery","normalizedQuery","EntityBucket","_Bucket","_super","_len","args","_key","future","bucket","_this2","next","_iterator2","_step2","_bucket2","PredicateBucket","_bucket","_len3","rest","_key3","memoizedQuery","_iterator3","_step3","_bucket3","ArchetypeBucket","DerivedEntityBucket","_EntityBucket","_super2","source","_this3","_this4","_iterator4","_step4","_DerivedEntityBucket","_super3","_this5","_DerivedEntityBucket2","_super4","_this6","ownKeys","object","enumerableOnly","keys","symbols","sym","_objectSpread2","World","id","_update","update","_x","_x2","_x3","partial","component","world","createEntity","GUID","transformNode","clearArchetype","archetype","GUIDisplaySystem","__publicField","guiData","ObservableManager","ArcRotateCamera","scalingLevel","viewport","iconSize","transformMatrix","viewPort","transform","coordinates","Vector3","Matrix","radius","minRadius","maxRadius","radiusGap","_ReflectorSystem","floorplanId","reflector","level","blurKernel","r","reflectionTexture","RenderManager","meshes","Plane","MirrorTexture","ReflectorSystem","convertUnityCoordsToBabylon","vector","convertUnityRotationYToBabylon","convertUnityScaleToBabylon","toRadian","angle","loadJson","src","resolve","reject","xhr","evt","getClosestPointOnTriangle","coordinate","triangle","edge0","edge1","v0","b","d","det","s","t","Scalar","invDet","tmp0","tmp1","numerator","denominator","TransparentSystem","mesh","PBRMaterial","beta","alpha","radianStart","radianEnd","ratio","targetAlpha","_VideoPlayerSystem","videoPlayer","videoEl","pointerInfo","info","play","pause","volume","setVolume","VideoPlayerSystem","CeilingSystem","hideHeights","bb","structure","visible","_TransformSystem","TransformNode","TransformMovable","AbstractMesh","magneticFace","hmin","hmax","rootMatrix","corner0","corner1","boundingInfo","BoundingInfo","min","max","fixtures","pivotY","_b","lastTransform","position","rotationY","y","Angle","entityId","TransformSystem","defaultOptions","_MagnetismGhostSystem","options","ghostRoot","sm","MagnetismGhost","FixtureValid","FixtureGhost","targetMatrix","MagnetismGhostSystem","MagnetismSystem","EngineStore","Fixtures","currentTransform","candidateFixtures","validFixtures","closestFixture","fixture","facePosition","faceNormal","targetScale","TmpVectors","targetQuaternion","targetPosition","targetRotation","Quaternion","Mesh","cMatrix","cInvertedMatrix","targetToCandidateMatrix","localFixturePosition","normals","VertexBuffer","positions","indices","closestFace","_","faceIndex","i0","i1","i2","verticeNormals","a","worldFaceNormal","Epsilon","vertices","localClosestPoint","distance","ad","bd","TmpColors","normalColor","Color4","fixturePosition","fixtureNormal","debugLine","MeshBuilder","UtilityLayerRenderer","MagnetismValid","_PointerDragSystem","rootNode","pointerDragBehavior","PointerDragBehavior","m","enable","PointerDragSystem","_ActiveHomeSystem","homeId","ActiveHomeSystem","ANIMATION_TARGET_FRAME","playAnimation","input","stopCurrunt","currentScene","animations","property","generateAnimationByProperty","maxFrame","keyFrame","animatables","playAnimationTarget","animatable","generateAnimation","targetProperty","animationType","Animation","param","easingFunction","type","getAnimationType","animation","start","frame","timeToFrame","setAnimationKeyFrame","end","TYPEOF_NUMBER","Color3","seconds","EasingFunctionType","EasingFunctionType2","EasingModeType","EasingModeType2","getEasingFunctionTypeMap","resultMap","names","name","getEasingModeMap","createEasingFunction","functionType","mode","CircleEase","EasingFunction","BackEase","BounceEase","CubicEase","ElasticEase","ExponentialEase","PowerEase","QuadraticEase","QuarticEase","QuinticEase","SineEase","BezierCurveEase","OpenableSystem","openable","thingState","currentState","duration","ThingType","isOpen","_LightControllerSystem","state","MaterialPluginManager","LightControllerSystem","_ThingStateSystem","lastState","ThingStateSystem","_FloorplanSystem","FloorplanSystem","_CameraTargetSystem","targetName","CameraTargetSystem","_HallwaySystem","visibility","HallwaySystem","_MaterialChangeSystem","MaterialChangeSystem","_StructureSystem","StructureSystem","_RoomSystem","pos","rot","origin","hitEntity","forward","forwardOrigin","backOrigin","roomEntityId","origins","ray","Ray","pickedMesh","roomId","RoomSystem","CameraManager","zedCamera","AnimationOption","CameraAngle","option","alphaAngle","betaAngle","animationOption","ext","width","height","zoomPercent","floorplanEntities","floorId","toTopView","targetEntity","resetAngles","to","from","second","isLandscape","align","onEnd","CameraViewport","applyLimits","FurnitureManager","gizmoManager","pointerId","webDeviceInputSystem","deviceType","DeviceType","deviceSlot","pointer","PointerInput","dragDeltaRatio","furnitureName","scale","model","addModel","updateMemberValue","member","GraphicManager","oldCamera","newCamera","defaultPostprocessSettings","enablePostprocess","settings","DefaultRenderingPipeline","pp","samples","ppi","curve","ColorCurves","colorGradingTexture","Texture","is3DL","isPNG","ColorGradingTexture","MotionBlurPostProcess","params","additionalLoadAndApplyMaterial","resolution","SystemManager","Observable","PointerEventTypes","_ObservableManager","_RenderManager","canvasOrContext","then","isGizmo","isAnimating","isPlayingVideo","forceRender","isRemainInertia","finishedForceRender","fps","now","delta","interval","justOnceUpdate","entries","Resolution","onceUpdate","RoomLightDefines","MaterialDefines","RoomLightConfiguration","RoomLightMaterial","MaterialPluginBase","material","addToPluginList","PBRBaseMaterial","enabled","defines","uniformBuffer","shaderType","_MaterialPluginManager","RegisterMaterialPlugin","UnregisterMaterialPlugin","plugin","isOn","intensity","color","initializeVideoPlayer","videoTexture","VideoTexture","StructureType","StructureType2","ThingType2","getDefaultThingState","thingType","isPanningPossible","offsetX","offsetY","ret","canvas","ext2d","getProjectedExtendsByCamera","w","h","modelW","modelH","margin","marginW","marginH","modelLeft","modelRight","modelTop","modelBot","pts","x","z","project","getFitRadius","cameraTargetExtends","halfW","halfH","fovH","fovW","radiusByW","radiusByH","toAngle","getWallMeshesAll","getDirectionToCenter","bounding","newPos","box","cen","freeCamera","arcCamera","arcToFree","FreeCamera","freeToArc","rotation","dist","dir","newTarget","CameraControlType","CameraPosition","isRelative","_CameraAngle","v","startVec","norm","_PerformanceProfiler","group","item","callback","intervalMs","performanceInfo","PerformanceProfiler","Profile","startTime","stackTrace","lastCallstack","matches","temp","temp2","functionName","profileData","texts","pivotPositions","version","metadata","floorplanData","qualitySettings","loadedEnvironment","lightForStandardMaterial","loadedMaterialList","ExtensionName","loadHome","_scene","graphicManager","_qualitySettings","totalCount","loadedCount","performance","SceneLoader","loader","gltfLoader","materials","nodes","images","homeData","homeFloorplanData","postProcessSettings","setDefalutPostprocessSettings","home","DirectionalLight","loadEnvironment","homeFloorplans","homeFloorPlan","floorplan","homeFloorplan","f","pivotPosition","parentTransform","floorplanSrc","floorplanPosition","floorplanRotation","floorplanScale","additionalMaterials","GLTFLoader","ZEDExtension","loadModel","furnitureBatch","modelSrc","materialName","loadMaterial","applyOverrideMaterials","IgnoreMeshName","splitDot","validateModelFormats","modelName","extension","root","node","isMeshNode","parent","envTex","CubeTexture","overrideData","applyMaterial","materialChangeableEntities","dataList","reflection","StandardMaterial","loadedMaterial","newMaterial","disposeLoader","context","assign","materialData","structureType","furniture","childMeshes","targetMesh","babylonMaterial","constantContext","lightmapTexture","bt","textureName","TonemappingOperator","DepthOfFieldEffectBlurLevel","_ArcRotateCameraPointersInput","BaseCameraPointersInput","previousMultiTouchPanPosition","multiTouchPanPosition","moveDeltaX","moveDeltaY","deltaX","deltaY","previousPinchSquaredDistance","pinchSquaredDistance","point","pointA","pointB","vecA","vecB","innerProduct","ArcRotateCameraPointersInput","CameraInputTypes","CameraAnimationHelper","angleLimit","rad","alphaFrom","alphaTo","stopCurrent","startViewport","endViewport","destination","endFrame","animPos","animFov","animRot","rot1","rot2","Node","DeviceOrientationCamera","customInput","dragFactor","axis","Axis","axisName","FreeCameraDeviceOrientationInput","initDir","alphaAdjusted","dirNormal","timeout","res","rej","gotValue","eventHandler","hostWindow","_ZEDCameraBase","zedcamera","refCam","thisCam","fitRadius","current","currentDist","val","percent","newDist","useAnimation","cameraAngle","isRelativeAngle","vec","convertedPos","fromForward","FreeCameraMouseInput","ZEDCameraBase","ZEDFreeCamera","ZEDGyroCamera","startPos","ZEDCamera","createArcRotateCamera","replace","attachCameraControls","pointersInput","es","fitRadiusWithMargin","zoomInToPoint","restoreCameraWithRotationHold","renderUpdate","panSpeed","rotationSpeed","zoomSpeed","cameraTypeSetting","toRight","nextAlpha","currentAlpha","doPlus","angleRounded","isQuaterviewStateNow","finalAngle","pt","customFactor","zoomFactor","moveVec","targetRadius","newRadius","CameraType","CameraType2","_GyroPinchHandler","GyroPinchHandler","Vector2","values","addVec","_GyroVerticalDragHandler","GyroVerticalDragHandler","withHorizontal","p1","p2","isVertical","ZED","Engine","Scene","GizmoManager","ed","newType","animationSeconds","startPosition","startDir","gyroCamera","internalGyro","internalFree","unitDir","deviceCamera","moveCamera","Database","materialChangedEntities","floorplanEntity","ZED$1","ZedContext","createContext","useZed","useContext","ZEDComponent","forwardRef","children","className","style","ref","zed","setZed","useState","canvasRef","setCanvasRef","useImperativeHandle","useEffect","jsxs","styles","jsx","Zed","memo"],"mappings":"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6V,EAAWrsB,EAAO,KAAK,EAC7B,GAAIqsB,EAAW3e,CAAK,CACtB,CACF,EACA,CACE,eAAgB,OAChB,SAAU,CACR,SAAU8I,EACV,KAAMxW,EAAO,KACb,GAAIyN,CACN,CACF,EACA,CACE,eAAgB,SAChB,SAAU,CACR,SAAU+I,EACV,KAAMxW,EAAO,OACb,GAAIyK,CACN,CACF,CACF,EACA,eAAgB,KAAK,kBAAkB,EACvC,eAAgB,IAAM,CAAC,CACzB,EACA,KAAK,KAAA,CAET,GAGKb,EAAA,gCAA2B,CAChC2iB,EACAC,EACAxsB,IACG,CACH,KAAK,aAAaA,CAAM,EAExB4U,EACE,CACE,OAAQ5U,EACR,SAAU,CACR,eAAgB,QAChB,SAAU,CACR,SAAU,GACV,KAAMusB,EACN,GAAIC,CACN,CACF,EACA,eAAgB,KAAK,kBAAkB,CACzC,EACA,KAAK,KAAA,CACP,GAGK5iB,EAAA,yBAAoB,CACzB5J,EACAgQ,EACAwG,EACAiW,IACG,CACH7X,EACE,CACE,OAAQ5U,EACR,SAAU,CACR,CACE,eAAgB,WAChB,SAAU,CACR,SAAUwW,EACV,KAAMxW,EAAO,SACb,GAAIgQ,CACN,CACF,EACA,CACE,eAAgB,SAChB,SAAU,CACR,SAAUwG,EACV,KAAMxW,EAAO,OACb,GAAIA,EAAO,MACb,CACF,CACF,EACA,eAAgB,KAAK,kBAAkB,CACzC,EACA,KAAK,MACLysB,CAAA,CACF,GAGK7iB,EAAA,qBAAgB,CACrB5J,EACAyK,EACArI,EACAoU,EACAiW,IACG,CACH,KAAK,aAAazsB,CAAM,EAExB4U,EACE,CACE,OAAQ5U,EACR,SAAU,CACR,CACE,eAAgB,SAChB,SAAU,CACR,SAAUwW,EACV,KAAMxW,EAAO,OACb,GAAIyK,CACN,CACF,EACA,CACE,eAAgB,SAChB,SAAU,CACR,SAAU+L,EACV,KAAMxW,EAAO,OACb,GAAIoC,CACN,CACF,CACF,EACA,eAAgB,KAAK,kBAAkB,CACzC,EACA,KAAK,MACLqqB,CAAA,CACF,GAGK7iB,EAAA,yBAAoB,CACzB5J,EACA0sB,EACAC,EACA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","x_google_ignoreList":[0,1,3,4,5]}