{"version":3,"file":"performance.stories-27778a92.js","sources":["../../src/react/PerformancePanel.tsx"],"sourcesContent":["import { folder, Leva, useControls } from 'leva';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { useZed } from './hooks/useZed';\r\n\r\nimport type { PerformanceInfo } from '@/manager/PerformanceProfiler';\r\n\r\nexport function PerformancePanel(props: { enable: boolean; inspector: boolean }) {\r\n  const enable = props.enable;\r\n  const inspector = props.inspector;\r\n  const zed = useZed();\r\n\r\n  const initItems: { [index: string]: any } = {\r\n    fps: 0,\r\n    'frame times (ms)': folder(\r\n      {\r\n        frameTotal: 0,\r\n        interFrame: 0,\r\n        meshSelection: { value: 0, disabled: true },\r\n        renderTarget: { value: 0, disabled: true },\r\n        render: { value: 0, disabled: true },\r\n      },\r\n      { collapsed: true }\r\n    ),\r\n    infos: folder(\r\n      {\r\n        activeMeshes: { value: 0, disabled: true },\r\n        drawCalls: { value: 0, disabled: true },\r\n        vertices: { value: 0, disabled: true },\r\n        resolution: '',\r\n      },\r\n      { collapsed: true }\r\n    ),\r\n    loadHomeTotal: 0,\r\n  };\r\n\r\n  const [items, setItems] = useState(initItems);\r\n\r\n  const [{}, set] = useControls(() => items, [items]);\r\n\r\n  useEffect(() => {\r\n    if (!zed) return;\r\n\r\n    const callback = (info: PerformanceInfo, itemChanged?: boolean) => {\r\n      const { customInfo, ...defaultInfos } = info;\r\n      if (customInfo !== undefined && customInfo.size > 0) {\r\n        let itemsForStructure: { [index: string]: any } = { ...items };\r\n\r\n        for (const groupName of customInfo.keys()) {\r\n          // 이번 그룹의 item 들을 map 에 저장\r\n          let groupItems = {} as { [index: string]: any };\r\n          const groupMap = customInfo.get(groupName)!;\r\n          for (const key of groupMap.keys()) {\r\n            groupItems[key] = groupMap.get(key);\r\n          }\r\n          // useControls 에 쓰이는 UI 세팅용 변수 : itemsForStructure\r\n          // (그룹별로 돌면서 폴더를 추가해 준다)\r\n          let groupStructure = {} as { [index: string]: any };\r\n          groupStructure[groupName] = folder(groupItems, { collapsed: true });\r\n          itemsForStructure = { ...itemsForStructure, ...groupStructure };\r\n        }\r\n        setItems(itemsForStructure);\r\n        set(defaultInfos);\r\n      } else {\r\n        setItems(items);\r\n        set(defaultInfos);\r\n      }\r\n    };\r\n\r\n    if (enable) {\r\n      zed.performance.registerCallback(callback, 500);\r\n    } else {\r\n      zed.performance.unregisterCallback();\r\n    }\r\n\r\n    if (inspector) {\r\n      zed.performance.showInspector();\r\n    } else {\r\n      zed.performance.hideInspector();\r\n    }\r\n  }, [zed, enable, inspector]);\r\n\r\n  return (\r\n    <>\r\n      <Leva\r\n        hidden={!enable}\r\n        flat={false}\r\n        titleBar={true}\r\n        theme={{\r\n          colors: {\r\n            elevation1: '#292D39',\r\n            elevation2: '#181C20',\r\n            elevation3: '#373C4B',\r\n            accent1: '#0066DC',\r\n            accent2: '#007BFF',\r\n            accent3: '#3C93FF',\r\n            highlight1: '#535760',\r\n            highlight2: '#FFFFFF',\r\n            highlight3: '#FEFEFE',\r\n            vivid1: '#ffcc00',\r\n          },\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["PerformancePanel","props","enable","inspector","zed","useZed","initItems","folder","items","setItems","useState","set","useControls","useEffect","callback","info","itemChanged","customInfo","defaultInfos","itemsForStructure","groupName","groupItems","groupMap","key","groupStructure","jsx","Fragment","Leva"],"mappings":"0rBAOO,SAAAA,EAAAC,EAAA,CACL,MAAAC,EAAAD,EAAA,OACAE,EAAAF,EAAA,UACAG,EAAAC,IAEAC,EAAA,CAA4C,IAAA,EACrC,mBAAAC,EACe,CAClB,WAAA,EACc,WAAA,EACA,cAAA,CAAA,MAAA,EAAA,SAAA,EAAA,EAC8B,aAAA,CAAA,MAAA,EAAA,SAAA,EAAA,EACD,OAAA,CAAA,MAAA,EAAA,SAAA,EAAA,CACN,EACrC,CAAA,UAAA,EAAA,CACkB,EACpB,MAAAA,EACO,CACL,aAAA,CAAA,MAAA,EAAA,SAAA,EAAA,EAC2C,UAAA,CAAA,MAAA,EAAA,SAAA,EAAA,EACH,SAAA,CAAA,MAAA,EAAA,SAAA,EAAA,EACD,WAAA,EACzB,EACd,CAAA,UAAA,EAAA,CACkB,EACpB,cAAA,CACe,EAGjB,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAJ,CAAA,EAEA,CAAA,CAAA,EAAAK,CAAA,EAAAC,EAAA,IAAAJ,EAAA,CAAAA,CAAA,CAAA,EAEAK,OAAAA,EAAAA,UAAA,IAAA,CACE,GAAA,CAAAT,EAAU,OAEV,MAAAU,EAAA,CAAAC,EAAAC,IAAA,CACE,KAAA,CAAA,WAAAC,EAAA,GAAAC,CAAA,EAAAH,EACA,GAAAE,IAAA,QAAAA,EAAA,KAAA,EAAA,CACE,IAAAE,EAAA,CAAA,GAAAX,GAEA,UAAAY,KAAAH,EAAA,OAAA,CAEE,IAAAI,EAAA,CAAA,EACA,MAAAC,EAAAL,EAAA,IAAAG,CAAA,EACA,UAAAG,KAAAD,EAAA,OACED,EAAAE,CAAA,EAAAD,EAAA,IAAAC,CAAA,EAIF,IAAAC,EAAA,CAAA,EACAA,EAAAJ,CAAA,EAAAb,EAAAc,EAAA,CAAA,UAAA,EAAA,CAAA,EACAF,EAAA,CAAA,GAAAA,EAAA,GAAAK,CAAA,EAEFf,EAAAU,CAAA,EACAR,EAAAO,CAAA,OAEAT,EAAAD,CAAA,EACAG,EAAAO,CAAA,CACF,EAGFhB,EACEE,EAAA,YAAA,iBAAAU,EAAA,GAAA,EAEAV,EAAA,YAAA,qBAGFD,EACEC,EAAA,YAAA,gBAEAA,EAAA,YAAA,eACF,EAAA,CAAAA,EAAAF,EAAAC,CAAA,CAAA,EAGFsB,MAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAEIE,EAAC,CAAA,OAAA,CAAAzB,EACU,KAAA,GACH,SAAA,GACI,MAAA,CACH,OAAA,CACG,WAAA,UACM,WAAA,UACA,WAAA,UACA,QAAA,UACH,QAAA,UACA,QAAA,UACA,WAAA,UACG,WAAA,UACA,WAAA,UACA,OAAA,SACJ,CACV,CACF,CAAA,CAAA,CAAA,CAIR;;;;;;;;;;;;;;"}